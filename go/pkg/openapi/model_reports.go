/*
Severalnines ClusterControl REST API (V2)

REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

API version: OpenAPI specification v1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Reports type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reports{}

// Reports struct for Reports
type Reports struct {
	Operation string `json:"operation"`
	ClusterId *int32 `json:"cluster_id,omitempty"`
	Report *ReportsReport `json:"report,omitempty"`
}

type _Reports Reports

// NewReports instantiates a new Reports object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReports(operation string) *Reports {
	this := Reports{}
	this.Operation = operation
	return &this
}

// NewReportsWithDefaults instantiates a new Reports object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportsWithDefaults() *Reports {
	this := Reports{}
	return &this
}

// GetOperation returns the Operation field value
func (o *Reports) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Reports) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *Reports) SetOperation(v string) {
	o.Operation = v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *Reports) GetClusterId() int32 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int32
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reports) GetClusterIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *Reports) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int32 and assigns it to the ClusterId field.
func (o *Reports) SetClusterId(v int32) {
	o.ClusterId = &v
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *Reports) GetReport() ReportsReport {
	if o == nil || IsNil(o.Report) {
		var ret ReportsReport
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reports) GetReportOk() (*ReportsReport, bool) {
	if o == nil || IsNil(o.Report) {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *Reports) HasReport() bool {
	if o != nil && !IsNil(o.Report) {
		return true
	}

	return false
}

// SetReport gets a reference to the given ReportsReport and assigns it to the Report field.
func (o *Reports) SetReport(v ReportsReport) {
	o.Report = &v
}

func (o Reports) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reports) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	if !IsNil(o.ClusterId) {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if !IsNil(o.Report) {
		toSerialize["report"] = o.Report
	}
	return toSerialize, nil
}

func (o *Reports) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReports := _Reports{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReports)

	if err != nil {
		return err
	}

	*o = Reports(varReports)

	return err
}

type NullableReports struct {
	value *Reports
	isSet bool
}

func (v NullableReports) Get() *Reports {
	return v.value
}

func (v *NullableReports) Set(val *Reports) {
	v.value = val
	v.isSet = true
}

func (v NullableReports) IsSet() bool {
	return v.isSet
}

func (v *NullableReports) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReports(val *Reports) *NullableReports {
	return &NullableReports{value: val, isSet: true}
}

func (v NullableReports) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReports) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


