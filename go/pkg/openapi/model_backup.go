/*
Severalnines ClusterControl

This is a ...

API version: 1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Backup struct for Backup
type Backup struct {
	Operation string `json:"operation"`
	ClusterId *int32 `json:"cluster_id,omitempty"`
	Ascending *bool `json:"ascending,omitempty"`
	Schedule *BackupSchedule `json:"schedule,omitempty"`
	BackupRecord *BackupBackupRecord `json:"backup_record,omitempty"`
}

// NewBackup instantiates a new Backup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackup(operation string) *Backup {
	this := Backup{}
	this.Operation = operation
	return &this
}

// NewBackupWithDefaults instantiates a new Backup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupWithDefaults() *Backup {
	this := Backup{}
	return &this
}

// GetOperation returns the Operation field value
func (o *Backup) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Backup) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *Backup) SetOperation(v string) {
	o.Operation = v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *Backup) GetClusterId() int32 {
	if o == nil || o.ClusterId == nil {
		var ret int32
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetClusterIdOk() (*int32, bool) {
	if o == nil || o.ClusterId == nil {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *Backup) HasClusterId() bool {
	if o != nil && o.ClusterId != nil {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int32 and assigns it to the ClusterId field.
func (o *Backup) SetClusterId(v int32) {
	o.ClusterId = &v
}

// GetAscending returns the Ascending field value if set, zero value otherwise.
func (o *Backup) GetAscending() bool {
	if o == nil || o.Ascending == nil {
		var ret bool
		return ret
	}
	return *o.Ascending
}

// GetAscendingOk returns a tuple with the Ascending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetAscendingOk() (*bool, bool) {
	if o == nil || o.Ascending == nil {
		return nil, false
	}
	return o.Ascending, true
}

// HasAscending returns a boolean if a field has been set.
func (o *Backup) HasAscending() bool {
	if o != nil && o.Ascending != nil {
		return true
	}

	return false
}

// SetAscending gets a reference to the given bool and assigns it to the Ascending field.
func (o *Backup) SetAscending(v bool) {
	o.Ascending = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *Backup) GetSchedule() BackupSchedule {
	if o == nil || o.Schedule == nil {
		var ret BackupSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetScheduleOk() (*BackupSchedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *Backup) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given BackupSchedule and assigns it to the Schedule field.
func (o *Backup) SetSchedule(v BackupSchedule) {
	o.Schedule = &v
}

// GetBackupRecord returns the BackupRecord field value if set, zero value otherwise.
func (o *Backup) GetBackupRecord() BackupBackupRecord {
	if o == nil || o.BackupRecord == nil {
		var ret BackupBackupRecord
		return ret
	}
	return *o.BackupRecord
}

// GetBackupRecordOk returns a tuple with the BackupRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetBackupRecordOk() (*BackupBackupRecord, bool) {
	if o == nil || o.BackupRecord == nil {
		return nil, false
	}
	return o.BackupRecord, true
}

// HasBackupRecord returns a boolean if a field has been set.
func (o *Backup) HasBackupRecord() bool {
	if o != nil && o.BackupRecord != nil {
		return true
	}

	return false
}

// SetBackupRecord gets a reference to the given BackupBackupRecord and assigns it to the BackupRecord field.
func (o *Backup) SetBackupRecord(v BackupBackupRecord) {
	o.BackupRecord = &v
}

func (o Backup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operation"] = o.Operation
	}
	if o.ClusterId != nil {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if o.Ascending != nil {
		toSerialize["ascending"] = o.Ascending
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if o.BackupRecord != nil {
		toSerialize["backup_record"] = o.BackupRecord
	}
	return json.Marshal(toSerialize)
}

type NullableBackup struct {
	value *Backup
	isSet bool
}

func (v NullableBackup) Get() *Backup {
	return v.value
}

func (v *NullableBackup) Set(val *Backup) {
	v.value = val
	v.isSet = true
}

func (v NullableBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackup(val *Backup) *NullableBackup {
	return &NullableBackup{value: val, isSet: true}
}

func (v NullableBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


