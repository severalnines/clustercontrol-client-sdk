/*
Severalnines ClusterControl

This is a ...

API version: 1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JobsJobJobSpecJobDataUploadBackupDataToCloudStorage struct for JobsJobJobSpecJobDataUploadBackupDataToCloudStorage
type JobsJobJobSpecJobDataUploadBackupDataToCloudStorage struct {
	BackupRetention *int32 `json:"backup_retention,omitempty"`
	Bucket *string `json:"bucket,omitempty"`
	CloudStorageCredentialsId *int32 `json:"cloud_storage_credentials_id,omitempty"`
	CloudStorageProvider *string `json:"cloud_storage_provider,omitempty"`
	CloudStorageService *string `json:"cloud_storage_service,omitempty"`
	DeleteAfterUpload *bool `json:"delete_after_upload,omitempty"`
}

// NewJobsJobJobSpecJobDataUploadBackupDataToCloudStorage instantiates a new JobsJobJobSpecJobDataUploadBackupDataToCloudStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobsJobJobSpecJobDataUploadBackupDataToCloudStorage() *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage {
	this := JobsJobJobSpecJobDataUploadBackupDataToCloudStorage{}
	return &this
}

// NewJobsJobJobSpecJobDataUploadBackupDataToCloudStorageWithDefaults instantiates a new JobsJobJobSpecJobDataUploadBackupDataToCloudStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobsJobJobSpecJobDataUploadBackupDataToCloudStorageWithDefaults() *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage {
	this := JobsJobJobSpecJobDataUploadBackupDataToCloudStorage{}
	return &this
}

// GetBackupRetention returns the BackupRetention field value if set, zero value otherwise.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetBackupRetention() int32 {
	if o == nil || o.BackupRetention == nil {
		var ret int32
		return ret
	}
	return *o.BackupRetention
}

// GetBackupRetentionOk returns a tuple with the BackupRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetBackupRetentionOk() (*int32, bool) {
	if o == nil || o.BackupRetention == nil {
		return nil, false
	}
	return o.BackupRetention, true
}

// HasBackupRetention returns a boolean if a field has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) HasBackupRetention() bool {
	if o != nil && o.BackupRetention != nil {
		return true
	}

	return false
}

// SetBackupRetention gets a reference to the given int32 and assigns it to the BackupRetention field.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) SetBackupRetention(v int32) {
	o.BackupRetention = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetBucket() string {
	if o == nil || o.Bucket == nil {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetBucketOk() (*string, bool) {
	if o == nil || o.Bucket == nil {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) HasBucket() bool {
	if o != nil && o.Bucket != nil {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) SetBucket(v string) {
	o.Bucket = &v
}

// GetCloudStorageCredentialsId returns the CloudStorageCredentialsId field value if set, zero value otherwise.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetCloudStorageCredentialsId() int32 {
	if o == nil || o.CloudStorageCredentialsId == nil {
		var ret int32
		return ret
	}
	return *o.CloudStorageCredentialsId
}

// GetCloudStorageCredentialsIdOk returns a tuple with the CloudStorageCredentialsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetCloudStorageCredentialsIdOk() (*int32, bool) {
	if o == nil || o.CloudStorageCredentialsId == nil {
		return nil, false
	}
	return o.CloudStorageCredentialsId, true
}

// HasCloudStorageCredentialsId returns a boolean if a field has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) HasCloudStorageCredentialsId() bool {
	if o != nil && o.CloudStorageCredentialsId != nil {
		return true
	}

	return false
}

// SetCloudStorageCredentialsId gets a reference to the given int32 and assigns it to the CloudStorageCredentialsId field.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) SetCloudStorageCredentialsId(v int32) {
	o.CloudStorageCredentialsId = &v
}

// GetCloudStorageProvider returns the CloudStorageProvider field value if set, zero value otherwise.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetCloudStorageProvider() string {
	if o == nil || o.CloudStorageProvider == nil {
		var ret string
		return ret
	}
	return *o.CloudStorageProvider
}

// GetCloudStorageProviderOk returns a tuple with the CloudStorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetCloudStorageProviderOk() (*string, bool) {
	if o == nil || o.CloudStorageProvider == nil {
		return nil, false
	}
	return o.CloudStorageProvider, true
}

// HasCloudStorageProvider returns a boolean if a field has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) HasCloudStorageProvider() bool {
	if o != nil && o.CloudStorageProvider != nil {
		return true
	}

	return false
}

// SetCloudStorageProvider gets a reference to the given string and assigns it to the CloudStorageProvider field.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) SetCloudStorageProvider(v string) {
	o.CloudStorageProvider = &v
}

// GetCloudStorageService returns the CloudStorageService field value if set, zero value otherwise.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetCloudStorageService() string {
	if o == nil || o.CloudStorageService == nil {
		var ret string
		return ret
	}
	return *o.CloudStorageService
}

// GetCloudStorageServiceOk returns a tuple with the CloudStorageService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetCloudStorageServiceOk() (*string, bool) {
	if o == nil || o.CloudStorageService == nil {
		return nil, false
	}
	return o.CloudStorageService, true
}

// HasCloudStorageService returns a boolean if a field has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) HasCloudStorageService() bool {
	if o != nil && o.CloudStorageService != nil {
		return true
	}

	return false
}

// SetCloudStorageService gets a reference to the given string and assigns it to the CloudStorageService field.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) SetCloudStorageService(v string) {
	o.CloudStorageService = &v
}

// GetDeleteAfterUpload returns the DeleteAfterUpload field value if set, zero value otherwise.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetDeleteAfterUpload() bool {
	if o == nil || o.DeleteAfterUpload == nil {
		var ret bool
		return ret
	}
	return *o.DeleteAfterUpload
}

// GetDeleteAfterUploadOk returns a tuple with the DeleteAfterUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) GetDeleteAfterUploadOk() (*bool, bool) {
	if o == nil || o.DeleteAfterUpload == nil {
		return nil, false
	}
	return o.DeleteAfterUpload, true
}

// HasDeleteAfterUpload returns a boolean if a field has been set.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) HasDeleteAfterUpload() bool {
	if o != nil && o.DeleteAfterUpload != nil {
		return true
	}

	return false
}

// SetDeleteAfterUpload gets a reference to the given bool and assigns it to the DeleteAfterUpload field.
func (o *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) SetDeleteAfterUpload(v bool) {
	o.DeleteAfterUpload = &v
}

func (o JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupRetention != nil {
		toSerialize["backup_retention"] = o.BackupRetention
	}
	if o.Bucket != nil {
		toSerialize["bucket"] = o.Bucket
	}
	if o.CloudStorageCredentialsId != nil {
		toSerialize["cloud_storage_credentials_id"] = o.CloudStorageCredentialsId
	}
	if o.CloudStorageProvider != nil {
		toSerialize["cloud_storage_provider"] = o.CloudStorageProvider
	}
	if o.CloudStorageService != nil {
		toSerialize["cloud_storage_service"] = o.CloudStorageService
	}
	if o.DeleteAfterUpload != nil {
		toSerialize["delete_after_upload"] = o.DeleteAfterUpload
	}
	return json.Marshal(toSerialize)
}

type NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage struct {
	value *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage
	isSet bool
}

func (v NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage) Get() *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage {
	return v.value
}

func (v *NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage) Set(val *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage(val *JobsJobJobSpecJobDataUploadBackupDataToCloudStorage) *NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage {
	return &NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage{value: val, isSet: true}
}

func (v NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobsJobJobSpecJobDataUploadBackupDataToCloudStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


