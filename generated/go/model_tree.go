/*
Severalnines ClusterControl REST API (V2)

REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

API version: OpenAPI specification v1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Tree type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tree{}

// Tree struct for Tree
type Tree struct {
	Operation string `json:"operation"`
	Acl *string `json:"acl,omitempty"`
	Path *string `json:"path,omitempty"`
}

type _Tree Tree

// NewTree instantiates a new Tree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTree(operation string) *Tree {
	this := Tree{}
	this.Operation = operation
	return &this
}

// NewTreeWithDefaults instantiates a new Tree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeWithDefaults() *Tree {
	this := Tree{}
	return &this
}

// GetOperation returns the Operation field value
func (o *Tree) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Tree) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *Tree) SetOperation(v string) {
	o.Operation = v
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *Tree) GetAcl() string {
	if o == nil || IsNil(o.Acl) {
		var ret string
		return ret
	}
	return *o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tree) GetAclOk() (*string, bool) {
	if o == nil || IsNil(o.Acl) {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *Tree) HasAcl() bool {
	if o != nil && !IsNil(o.Acl) {
		return true
	}

	return false
}

// SetAcl gets a reference to the given string and assigns it to the Acl field.
func (o *Tree) SetAcl(v string) {
	o.Acl = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Tree) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tree) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Tree) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Tree) SetPath(v string) {
	o.Path = &v
}

func (o Tree) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tree) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	if !IsNil(o.Acl) {
		toSerialize["acl"] = o.Acl
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

func (o *Tree) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTree := _Tree{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTree)

	if err != nil {
		return err
	}

	*o = Tree(varTree)

	return err
}

type NullableTree struct {
	value *Tree
	isSet bool
}

func (v NullableTree) Get() *Tree {
	return v.value
}

func (v *NullableTree) Set(val *Tree) {
	v.value = val
	v.isSet = true
}

func (v NullableTree) IsSet() bool {
	return v.isSet
}

func (v *NullableTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTree(val *Tree) *NullableTree {
	return &NullableTree{value: val, isSet: true}
}

func (v NullableTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


