/*
Severalnines ClusterControl REST API (V2)

REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

API version: OpenAPI specification v1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Stat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stat{}

// Stat struct for Stat
type Stat struct {
	Operation string `json:"operation"`
	ClusterId *int32 `json:"cluster_id,omitempty"`
	// stat name. e.g. cpustat
	Name *string `json:"name,omitempty"`
	// e.g. \"15:20\"
	StartDatetime *string `json:"start_datetime,omitempty"`
	// e.g. \"15:21\"
	EndDatetime *string `json:"end_datetime,omitempty"`
	WithHosts *bool `json:"with_hosts,omitempty"`
	CalculatePerSec *bool `json:"calculate_per_sec,omitempty"`
}

type _Stat Stat

// NewStat instantiates a new Stat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStat(operation string) *Stat {
	this := Stat{}
	this.Operation = operation
	return &this
}

// NewStatWithDefaults instantiates a new Stat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatWithDefaults() *Stat {
	this := Stat{}
	return &this
}

// GetOperation returns the Operation field value
func (o *Stat) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Stat) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *Stat) SetOperation(v string) {
	o.Operation = v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *Stat) GetClusterId() int32 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int32
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetClusterIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *Stat) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int32 and assigns it to the ClusterId field.
func (o *Stat) SetClusterId(v int32) {
	o.ClusterId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Stat) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Stat) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Stat) SetName(v string) {
	o.Name = &v
}

// GetStartDatetime returns the StartDatetime field value if set, zero value otherwise.
func (o *Stat) GetStartDatetime() string {
	if o == nil || IsNil(o.StartDatetime) {
		var ret string
		return ret
	}
	return *o.StartDatetime
}

// GetStartDatetimeOk returns a tuple with the StartDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetStartDatetimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartDatetime) {
		return nil, false
	}
	return o.StartDatetime, true
}

// HasStartDatetime returns a boolean if a field has been set.
func (o *Stat) HasStartDatetime() bool {
	if o != nil && !IsNil(o.StartDatetime) {
		return true
	}

	return false
}

// SetStartDatetime gets a reference to the given string and assigns it to the StartDatetime field.
func (o *Stat) SetStartDatetime(v string) {
	o.StartDatetime = &v
}

// GetEndDatetime returns the EndDatetime field value if set, zero value otherwise.
func (o *Stat) GetEndDatetime() string {
	if o == nil || IsNil(o.EndDatetime) {
		var ret string
		return ret
	}
	return *o.EndDatetime
}

// GetEndDatetimeOk returns a tuple with the EndDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetEndDatetimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndDatetime) {
		return nil, false
	}
	return o.EndDatetime, true
}

// HasEndDatetime returns a boolean if a field has been set.
func (o *Stat) HasEndDatetime() bool {
	if o != nil && !IsNil(o.EndDatetime) {
		return true
	}

	return false
}

// SetEndDatetime gets a reference to the given string and assigns it to the EndDatetime field.
func (o *Stat) SetEndDatetime(v string) {
	o.EndDatetime = &v
}

// GetWithHosts returns the WithHosts field value if set, zero value otherwise.
func (o *Stat) GetWithHosts() bool {
	if o == nil || IsNil(o.WithHosts) {
		var ret bool
		return ret
	}
	return *o.WithHosts
}

// GetWithHostsOk returns a tuple with the WithHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetWithHostsOk() (*bool, bool) {
	if o == nil || IsNil(o.WithHosts) {
		return nil, false
	}
	return o.WithHosts, true
}

// HasWithHosts returns a boolean if a field has been set.
func (o *Stat) HasWithHosts() bool {
	if o != nil && !IsNil(o.WithHosts) {
		return true
	}

	return false
}

// SetWithHosts gets a reference to the given bool and assigns it to the WithHosts field.
func (o *Stat) SetWithHosts(v bool) {
	o.WithHosts = &v
}

// GetCalculatePerSec returns the CalculatePerSec field value if set, zero value otherwise.
func (o *Stat) GetCalculatePerSec() bool {
	if o == nil || IsNil(o.CalculatePerSec) {
		var ret bool
		return ret
	}
	return *o.CalculatePerSec
}

// GetCalculatePerSecOk returns a tuple with the CalculatePerSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stat) GetCalculatePerSecOk() (*bool, bool) {
	if o == nil || IsNil(o.CalculatePerSec) {
		return nil, false
	}
	return o.CalculatePerSec, true
}

// HasCalculatePerSec returns a boolean if a field has been set.
func (o *Stat) HasCalculatePerSec() bool {
	if o != nil && !IsNil(o.CalculatePerSec) {
		return true
	}

	return false
}

// SetCalculatePerSec gets a reference to the given bool and assigns it to the CalculatePerSec field.
func (o *Stat) SetCalculatePerSec(v bool) {
	o.CalculatePerSec = &v
}

func (o Stat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	if !IsNil(o.ClusterId) {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartDatetime) {
		toSerialize["start_datetime"] = o.StartDatetime
	}
	if !IsNil(o.EndDatetime) {
		toSerialize["end_datetime"] = o.EndDatetime
	}
	if !IsNil(o.WithHosts) {
		toSerialize["with_hosts"] = o.WithHosts
	}
	if !IsNil(o.CalculatePerSec) {
		toSerialize["calculate_per_sec"] = o.CalculatePerSec
	}
	return toSerialize, nil
}

func (o *Stat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStat := _Stat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStat)

	if err != nil {
		return err
	}

	*o = Stat(varStat)

	return err
}

type NullableStat struct {
	value *Stat
	isSet bool
}

func (v NullableStat) Get() *Stat {
	return v.value
}

func (v *NullableStat) Set(val *Stat) {
	v.value = val
	v.isSet = true
}

func (v NullableStat) IsSet() bool {
	return v.isSet
}

func (v *NullableStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStat(val *Stat) *NullableStat {
	return &NullableStat{value: val, isSet: true}
}

func (v NullableStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


