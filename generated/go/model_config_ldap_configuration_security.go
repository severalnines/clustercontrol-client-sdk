/*
Severalnines ClusterControl REST API (V2)

REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

API version: OpenAPI specification v1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigLdapConfigurationSecurity struct for ConfigLdapConfigurationSecurity
type ConfigLdapConfigurationSecurity struct {
	CaCertFile *string `json:"caCertFile,omitempty"`
	CertFile *string `json:"certFile,omitempty"`
	KeyFile *string `json:"keyFile,omitempty"`
}

// NewConfigLdapConfigurationSecurity instantiates a new ConfigLdapConfigurationSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigLdapConfigurationSecurity() *ConfigLdapConfigurationSecurity {
	this := ConfigLdapConfigurationSecurity{}
	return &this
}

// NewConfigLdapConfigurationSecurityWithDefaults instantiates a new ConfigLdapConfigurationSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigLdapConfigurationSecurityWithDefaults() *ConfigLdapConfigurationSecurity {
	this := ConfigLdapConfigurationSecurity{}
	return &this
}

// GetCaCertFile returns the CaCertFile field value if set, zero value otherwise.
func (o *ConfigLdapConfigurationSecurity) GetCaCertFile() string {
	if o == nil || isNil(o.CaCertFile) {
		var ret string
		return ret
	}
	return *o.CaCertFile
}

// GetCaCertFileOk returns a tuple with the CaCertFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLdapConfigurationSecurity) GetCaCertFileOk() (*string, bool) {
	if o == nil || isNil(o.CaCertFile) {
    return nil, false
	}
	return o.CaCertFile, true
}

// HasCaCertFile returns a boolean if a field has been set.
func (o *ConfigLdapConfigurationSecurity) HasCaCertFile() bool {
	if o != nil && !isNil(o.CaCertFile) {
		return true
	}

	return false
}

// SetCaCertFile gets a reference to the given string and assigns it to the CaCertFile field.
func (o *ConfigLdapConfigurationSecurity) SetCaCertFile(v string) {
	o.CaCertFile = &v
}

// GetCertFile returns the CertFile field value if set, zero value otherwise.
func (o *ConfigLdapConfigurationSecurity) GetCertFile() string {
	if o == nil || isNil(o.CertFile) {
		var ret string
		return ret
	}
	return *o.CertFile
}

// GetCertFileOk returns a tuple with the CertFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLdapConfigurationSecurity) GetCertFileOk() (*string, bool) {
	if o == nil || isNil(o.CertFile) {
    return nil, false
	}
	return o.CertFile, true
}

// HasCertFile returns a boolean if a field has been set.
func (o *ConfigLdapConfigurationSecurity) HasCertFile() bool {
	if o != nil && !isNil(o.CertFile) {
		return true
	}

	return false
}

// SetCertFile gets a reference to the given string and assigns it to the CertFile field.
func (o *ConfigLdapConfigurationSecurity) SetCertFile(v string) {
	o.CertFile = &v
}

// GetKeyFile returns the KeyFile field value if set, zero value otherwise.
func (o *ConfigLdapConfigurationSecurity) GetKeyFile() string {
	if o == nil || isNil(o.KeyFile) {
		var ret string
		return ret
	}
	return *o.KeyFile
}

// GetKeyFileOk returns a tuple with the KeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLdapConfigurationSecurity) GetKeyFileOk() (*string, bool) {
	if o == nil || isNil(o.KeyFile) {
    return nil, false
	}
	return o.KeyFile, true
}

// HasKeyFile returns a boolean if a field has been set.
func (o *ConfigLdapConfigurationSecurity) HasKeyFile() bool {
	if o != nil && !isNil(o.KeyFile) {
		return true
	}

	return false
}

// SetKeyFile gets a reference to the given string and assigns it to the KeyFile field.
func (o *ConfigLdapConfigurationSecurity) SetKeyFile(v string) {
	o.KeyFile = &v
}

func (o ConfigLdapConfigurationSecurity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CaCertFile) {
		toSerialize["caCertFile"] = o.CaCertFile
	}
	if !isNil(o.CertFile) {
		toSerialize["certFile"] = o.CertFile
	}
	if !isNil(o.KeyFile) {
		toSerialize["keyFile"] = o.KeyFile
	}
	return json.Marshal(toSerialize)
}

type NullableConfigLdapConfigurationSecurity struct {
	value *ConfigLdapConfigurationSecurity
	isSet bool
}

func (v NullableConfigLdapConfigurationSecurity) Get() *ConfigLdapConfigurationSecurity {
	return v.value
}

func (v *NullableConfigLdapConfigurationSecurity) Set(val *ConfigLdapConfigurationSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigLdapConfigurationSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigLdapConfigurationSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigLdapConfigurationSecurity(val *ConfigLdapConfigurationSecurity) *NullableConfigLdapConfigurationSecurity {
	return &NullableConfigLdapConfigurationSecurity{value: val, isSet: true}
}

func (v NullableConfigLdapConfigurationSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigLdapConfigurationSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


