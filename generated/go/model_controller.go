/*
Severalnines ClusterControl REST API (V2)

REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

API version: OpenAPI specification v1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Controller type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Controller{}

// Controller struct for Controller
type Controller struct {
	Operation string `json:"operation"`
	ClientIpAddress *string `json:"client_ip_address,omitempty"`
	ControllerKey *string `json:"controller_key,omitempty"`
}

type _Controller Controller

// NewController instantiates a new Controller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewController(operation string) *Controller {
	this := Controller{}
	this.Operation = operation
	return &this
}

// NewControllerWithDefaults instantiates a new Controller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllerWithDefaults() *Controller {
	this := Controller{}
	return &this
}

// GetOperation returns the Operation field value
func (o *Controller) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Controller) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *Controller) SetOperation(v string) {
	o.Operation = v
}

// GetClientIpAddress returns the ClientIpAddress field value if set, zero value otherwise.
func (o *Controller) GetClientIpAddress() string {
	if o == nil || IsNil(o.ClientIpAddress) {
		var ret string
		return ret
	}
	return *o.ClientIpAddress
}

// GetClientIpAddressOk returns a tuple with the ClientIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Controller) GetClientIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ClientIpAddress) {
		return nil, false
	}
	return o.ClientIpAddress, true
}

// HasClientIpAddress returns a boolean if a field has been set.
func (o *Controller) HasClientIpAddress() bool {
	if o != nil && !IsNil(o.ClientIpAddress) {
		return true
	}

	return false
}

// SetClientIpAddress gets a reference to the given string and assigns it to the ClientIpAddress field.
func (o *Controller) SetClientIpAddress(v string) {
	o.ClientIpAddress = &v
}

// GetControllerKey returns the ControllerKey field value if set, zero value otherwise.
func (o *Controller) GetControllerKey() string {
	if o == nil || IsNil(o.ControllerKey) {
		var ret string
		return ret
	}
	return *o.ControllerKey
}

// GetControllerKeyOk returns a tuple with the ControllerKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Controller) GetControllerKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerKey) {
		return nil, false
	}
	return o.ControllerKey, true
}

// HasControllerKey returns a boolean if a field has been set.
func (o *Controller) HasControllerKey() bool {
	if o != nil && !IsNil(o.ControllerKey) {
		return true
	}

	return false
}

// SetControllerKey gets a reference to the given string and assigns it to the ControllerKey field.
func (o *Controller) SetControllerKey(v string) {
	o.ControllerKey = &v
}

func (o Controller) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Controller) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	if !IsNil(o.ClientIpAddress) {
		toSerialize["client_ip_address"] = o.ClientIpAddress
	}
	if !IsNil(o.ControllerKey) {
		toSerialize["controller_key"] = o.ControllerKey
	}
	return toSerialize, nil
}

func (o *Controller) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varController := _Controller{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varController)

	if err != nil {
		return err
	}

	*o = Controller(varController)

	return err
}

type NullableController struct {
	value *Controller
	isSet bool
}

func (v NullableController) Get() *Controller {
	return v.value
}

func (v *NullableController) Set(val *Controller) {
	v.value = val
	v.isSet = true
}

func (v NullableController) IsSet() bool {
	return v.isSet
}

func (v *NullableController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableController(val *Controller) *NullableController {
	return &NullableController{value: val, isSet: true}
}

func (v NullableController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


