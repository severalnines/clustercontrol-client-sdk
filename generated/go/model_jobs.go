/*
Severalnines ClusterControl REST API (V2)

REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

API version: OpenAPI specification v1.0.0
Contact: sales@severalnines.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Jobs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jobs{}

// Jobs Creating and manipulating jobs, reading information about jobs
type Jobs struct {
	Operation string `json:"operation"`
	ClusterId *int32 `json:"cluster_id,omitempty"`
	JobId *int32 `json:"job_id,omitempty"`
	Signal *int32 `json:"signal,omitempty"`
	Ascending *bool `json:"ascending,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	LogLevel *string `json:"log_level,omitempty"`
	Job *JobsJob `json:"job,omitempty"`
}

type _Jobs Jobs

// NewJobs instantiates a new Jobs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobs(operation string) *Jobs {
	this := Jobs{}
	this.Operation = operation
	return &this
}

// NewJobsWithDefaults instantiates a new Jobs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobsWithDefaults() *Jobs {
	this := Jobs{}
	return &this
}

// GetOperation returns the Operation field value
func (o *Jobs) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Jobs) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *Jobs) SetOperation(v string) {
	o.Operation = v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *Jobs) GetClusterId() int32 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int32
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetClusterIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *Jobs) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int32 and assigns it to the ClusterId field.
func (o *Jobs) SetClusterId(v int32) {
	o.ClusterId = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *Jobs) GetJobId() int32 {
	if o == nil || IsNil(o.JobId) {
		var ret int32
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetJobIdOk() (*int32, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *Jobs) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given int32 and assigns it to the JobId field.
func (o *Jobs) SetJobId(v int32) {
	o.JobId = &v
}

// GetSignal returns the Signal field value if set, zero value otherwise.
func (o *Jobs) GetSignal() int32 {
	if o == nil || IsNil(o.Signal) {
		var ret int32
		return ret
	}
	return *o.Signal
}

// GetSignalOk returns a tuple with the Signal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetSignalOk() (*int32, bool) {
	if o == nil || IsNil(o.Signal) {
		return nil, false
	}
	return o.Signal, true
}

// HasSignal returns a boolean if a field has been set.
func (o *Jobs) HasSignal() bool {
	if o != nil && !IsNil(o.Signal) {
		return true
	}

	return false
}

// SetSignal gets a reference to the given int32 and assigns it to the Signal field.
func (o *Jobs) SetSignal(v int32) {
	o.Signal = &v
}

// GetAscending returns the Ascending field value if set, zero value otherwise.
func (o *Jobs) GetAscending() bool {
	if o == nil || IsNil(o.Ascending) {
		var ret bool
		return ret
	}
	return *o.Ascending
}

// GetAscendingOk returns a tuple with the Ascending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetAscendingOk() (*bool, bool) {
	if o == nil || IsNil(o.Ascending) {
		return nil, false
	}
	return o.Ascending, true
}

// HasAscending returns a boolean if a field has been set.
func (o *Jobs) HasAscending() bool {
	if o != nil && !IsNil(o.Ascending) {
		return true
	}

	return false
}

// SetAscending gets a reference to the given bool and assigns it to the Ascending field.
func (o *Jobs) SetAscending(v bool) {
	o.Ascending = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Jobs) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Jobs) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *Jobs) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *Jobs) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *Jobs) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *Jobs) SetOffset(v int32) {
	o.Offset = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *Jobs) GetLogLevel() string {
	if o == nil || IsNil(o.LogLevel) {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetLogLevelOk() (*string, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *Jobs) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *Jobs) SetLogLevel(v string) {
	o.LogLevel = &v
}

// GetJob returns the Job field value if set, zero value otherwise.
func (o *Jobs) GetJob() JobsJob {
	if o == nil || IsNil(o.Job) {
		var ret JobsJob
		return ret
	}
	return *o.Job
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jobs) GetJobOk() (*JobsJob, bool) {
	if o == nil || IsNil(o.Job) {
		return nil, false
	}
	return o.Job, true
}

// HasJob returns a boolean if a field has been set.
func (o *Jobs) HasJob() bool {
	if o != nil && !IsNil(o.Job) {
		return true
	}

	return false
}

// SetJob gets a reference to the given JobsJob and assigns it to the Job field.
func (o *Jobs) SetJob(v JobsJob) {
	o.Job = &v
}

func (o Jobs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jobs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	if !IsNil(o.ClusterId) {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if !IsNil(o.JobId) {
		toSerialize["job_id"] = o.JobId
	}
	if !IsNil(o.Signal) {
		toSerialize["signal"] = o.Signal
	}
	if !IsNil(o.Ascending) {
		toSerialize["ascending"] = o.Ascending
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.LogLevel) {
		toSerialize["log_level"] = o.LogLevel
	}
	if !IsNil(o.Job) {
		toSerialize["job"] = o.Job
	}
	return toSerialize, nil
}

func (o *Jobs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobs := _Jobs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobs)

	if err != nil {
		return err
	}

	*o = Jobs(varJobs)

	return err
}

type NullableJobs struct {
	value *Jobs
	isSet bool
}

func (v NullableJobs) Get() *Jobs {
	return v.value
}

func (v *NullableJobs) Set(val *Jobs) {
	v.value = val
	v.isSet = true
}

func (v NullableJobs) IsSet() bool {
	return v.isSet
}

func (v *NullableJobs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobs(val *Jobs) *NullableJobs {
	return &NullableJobs{value: val, isSet: true}
}

func (v NullableJobs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


