/*
 * Severalnines ClusterControl
 *
 * This is a ...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@severalnines.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Clusters {
    #[serde(rename = "operation")]
    pub operation: Operation,
    #[serde(rename = "cluster_id", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<i32>,
    #[serde(rename = "cluster_name", skip_serializing_if = "Option::is_none")]
    pub cluster_name: Option<String>,
    #[serde(rename = "with_hosts", skip_serializing_if = "Option::is_none")]
    pub with_hosts: Option<bool>,
    #[serde(rename = "with_sheet_info", skip_serializing_if = "Option::is_none")]
    pub with_sheet_info: Option<bool>,
    #[serde(rename = "configuration", skip_serializing_if = "Option::is_none")]
    pub configuration: Option<Vec<crate::models::ClustersConfiguration>>,
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<Box<crate::models::ClustersAccount>>,
    #[serde(rename = "filter_strings", skip_serializing_if = "Option::is_none")]
    pub filter_strings: Option<String>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "database", skip_serializing_if = "Option::is_none")]
    pub database: Option<Box<crate::models::ClustersDatabase>>,
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
}

impl Clusters {
    pub fn new(operation: Operation) -> Clusters {
        Clusters {
            operation,
            cluster_id: None,
            cluster_name: None,
            with_hosts: None,
            with_sheet_info: None,
            configuration: None,
            account: None,
            filter_strings: None,
            limit: None,
            offset: None,
            database: None,
            nodes: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operation {
    #[serde(rename = "getallclusterinfo")]
    Getallclusterinfo,
    #[serde(rename = "getclusterinfo")]
    Getclusterinfo,
    #[serde(rename = "getConfig")]
    GetConfig,
    #[serde(rename = "setConfig")]
    SetConfig,
    #[serde(rename = "createAccount")]
    CreateAccount,
    #[serde(rename = "getAccounts")]
    GetAccounts,
    #[serde(rename = "deleteAccount")]
    DeleteAccount,
    #[serde(rename = "grantPrivileges")]
    GrantPrivileges,
    #[serde(rename = "revokePrivileges")]
    RevokePrivileges,
    #[serde(rename = "getSqlProcesses")]
    GetSqlProcesses,
    #[serde(rename = "getTopQueries")]
    GetTopQueries,
    #[serde(rename = "createDatabase")]
    CreateDatabase,
    #[serde(rename = "ping")]
    Ping,
    #[serde(rename = "availableUpgrades")]
    AvailableUpgrades,
}

impl Default for Operation {
    fn default() -> Operation {
        Self::Getallclusterinfo
    }
}

