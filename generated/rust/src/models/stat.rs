/*
 * Severalnines ClusterControl
 *
 * This is a ...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@severalnines.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Stat {
    #[serde(rename = "operation")]
    pub operation: Operation,
    #[serde(rename = "cluster_id", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<i32>,
    /// stat name. e.g. cpustat
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<Name>,
    /// e.g. \"15:20\"
    #[serde(rename = "start_datetime", skip_serializing_if = "Option::is_none")]
    pub start_datetime: Option<String>,
    /// e.g. \"15:21\"
    #[serde(rename = "end_datetime", skip_serializing_if = "Option::is_none")]
    pub end_datetime: Option<String>,
    #[serde(rename = "with_hosts", skip_serializing_if = "Option::is_none")]
    pub with_hosts: Option<bool>,
    #[serde(rename = "calculate_per_sec", skip_serializing_if = "Option::is_none")]
    pub calculate_per_sec: Option<bool>,
}

impl Stat {
    pub fn new(operation: Operation) -> Stat {
        Stat {
            operation,
            cluster_id: None,
            name: None,
            start_datetime: None,
            end_datetime: None,
            with_hosts: None,
            calculate_per_sec: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operation {
    #[serde(rename = "getInfo")]
    GetInfo,
    #[serde(rename = "statByName")]
    StatByName,
    #[serde(rename = "getCpuPhysicalInfo")]
    GetCpuPhysicalInfo,
    #[serde(rename = "getDbGrowth")]
    GetDbGrowth,
}

impl Default for Operation {
    fn default() -> Operation {
        Self::GetInfo
    }
}
/// stat name. e.g. cpustat
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Name {
    #[serde(rename = "cpustat")]
    Cpustat,
}

impl Default for Name {
    fn default() -> Name {
        Self::Cpustat
    }
}

