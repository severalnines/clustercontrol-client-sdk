/*
 * Severalnines ClusterControl
 *
 * This is a ...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@severalnines.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JobsJobJobSpecJobData {
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    #[serde(rename = "addnode", skip_serializing_if = "Option::is_none")]
    pub addnode: Option<bool>,
    #[serde(rename = "admin_username", skip_serializing_if = "Option::is_none")]
    pub admin_username: Option<String>,
    #[serde(rename = "admin_user", skip_serializing_if = "Option::is_none")]
    pub admin_user: Option<String>,
    #[serde(rename = "admin_password", skip_serializing_if = "Option::is_none")]
    pub admin_password: Option<String>,
    #[serde(rename = "audit_events", skip_serializing_if = "Option::is_none")]
    pub audit_events: Option<String>,
    #[serde(rename = "backupid", skip_serializing_if = "Option::is_none")]
    pub backupid: Option<i32>,
    #[serde(rename = "backup_id", skip_serializing_if = "Option::is_none")]
    pub backup_id: Option<i32>,
    #[serde(rename = "build_from_source", skip_serializing_if = "Option::is_none")]
    pub build_from_source: Option<bool>,
    #[serde(rename = "cluster_name", skip_serializing_if = "Option::is_none")]
    pub cluster_name: Option<String>,
    #[serde(rename = "clusterid", skip_serializing_if = "Option::is_none")]
    pub clusterid: Option<i32>,
    #[serde(rename = "cluster_type", skip_serializing_if = "Option::is_none")]
    pub cluster_type: Option<ClusterType>,
    #[serde(rename = "company_id", skip_serializing_if = "Option::is_none")]
    pub company_id: Option<String>,
    #[serde(rename = "config_template", skip_serializing_if = "Option::is_none")]
    pub config_template: Option<String>,
    #[serde(rename = "backup_failover", skip_serializing_if = "Option::is_none")]
    pub backup_failover: Option<bool>,
    #[serde(rename = "backup_failover_host", skip_serializing_if = "Option::is_none")]
    pub backup_failover_host: Option<BackupFailoverHost>,
    #[serde(rename = "backup_method", skip_serializing_if = "Option::is_none")]
    pub backup_method: Option<BackupMethod>,
    #[serde(rename = "backup_mysqldump_type", skip_serializing_if = "Option::is_none")]
    pub backup_mysqldump_type: Option<BackupMysqldumpType>,
    #[serde(rename = "backup_individual_schemas", skip_serializing_if = "Option::is_none")]
    pub backup_individual_schemas: Option<bool>,
    #[serde(rename = "backup_retention", skip_serializing_if = "Option::is_none")]
    pub backup_retention: Option<i32>,
    #[serde(rename = "extended_insert", skip_serializing_if = "Option::is_none")]
    pub extended_insert: Option<bool>,
    #[serde(rename = "backup_dir", skip_serializing_if = "Option::is_none")]
    pub backup_dir: Option<String>,
    #[serde(rename = "backupsubdir", skip_serializing_if = "Option::is_none")]
    pub backupsubdir: Option<String>,
    #[serde(rename = "cc_storage", skip_serializing_if = "Option::is_none")]
    pub cc_storage: Option<String>,
    #[serde(rename = "compression", skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(rename = "compression_level", skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<i32>,
    #[serde(rename = "db_database", skip_serializing_if = "Option::is_none")]
    pub db_database: Option<String>,
    #[serde(rename = "db_password", skip_serializing_if = "Option::is_none")]
    pub db_password: Option<String>,
    #[serde(rename = "db_privs", skip_serializing_if = "Option::is_none")]
    pub db_privs: Option<String>,
    #[serde(rename = "db_username", skip_serializing_if = "Option::is_none")]
    pub db_username: Option<String>,
    #[serde(rename = "exec_upgrade_script", skip_serializing_if = "Option::is_none")]
    pub exec_upgrade_script: Option<bool>,
    #[serde(rename = "listening_port", skip_serializing_if = "Option::is_none")]
    pub listening_port: Option<i32>,
    #[serde(rename = "monitor_password", skip_serializing_if = "Option::is_none")]
    pub monitor_password: Option<String>,
    #[serde(rename = "monitor_user", skip_serializing_if = "Option::is_none")]
    pub monitor_user: Option<String>,
    #[serde(rename = "use_clustering", skip_serializing_if = "Option::is_none")]
    pub use_clustering: Option<bool>,
    #[serde(rename = "use_rw_split", skip_serializing_if = "Option::is_none")]
    pub use_rw_split: Option<bool>,
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(rename = "master_address", skip_serializing_if = "Option::is_none")]
    pub master_address: Option<String>,
    #[serde(rename = "include_databases", skip_serializing_if = "Option::is_none")]
    pub include_databases: Option<String>,
    #[serde(rename = "install_timescaledb", skip_serializing_if = "Option::is_none")]
    pub install_timescaledb: Option<bool>,
    #[serde(rename = "update_lb", skip_serializing_if = "Option::is_none")]
    pub update_lb: Option<bool>,
    #[serde(rename = "encrypt_backup", skip_serializing_if = "Option::is_none")]
    pub encrypt_backup: Option<bool>,
    #[serde(rename = "throttle_rate_netbw", skip_serializing_if = "Option::is_none")]
    pub throttle_rate_netbw: Option<i32>,
    #[serde(rename = "use_pigz", skip_serializing_if = "Option::is_none")]
    pub use_pigz: Option<bool>,
    #[serde(rename = "use_qpress", skip_serializing_if = "Option::is_none")]
    pub use_qpress: Option<bool>,
    #[serde(rename = "wsrep_desync", skip_serializing_if = "Option::is_none")]
    pub wsrep_desync: Option<bool>,
    #[serde(rename = "xtrabackup_backup_locks", skip_serializing_if = "Option::is_none")]
    pub xtrabackup_backup_locks: Option<bool>,
    #[serde(rename = "xtrabackup_lock_ddl_per_table", skip_serializing_if = "Option::is_none")]
    pub xtrabackup_lock_ddl_per_table: Option<bool>,
    #[serde(rename = "xtrabackup_parallellism", skip_serializing_if = "Option::is_none")]
    pub xtrabackup_parallellism: Option<i32>,
    #[serde(rename = "verify_backup_delay", skip_serializing_if = "Option::is_none")]
    pub verify_backup_delay: Option<i32>,
    #[serde(rename = "data_dir", skip_serializing_if = "Option::is_none")]
    pub data_dir: Option<String>,
    #[serde(rename = "db_user", skip_serializing_if = "Option::is_none")]
    pub db_user: Option<String>,
    #[serde(rename = "disable_firewall", skip_serializing_if = "Option::is_none")]
    pub disable_firewall: Option<bool>,
    #[serde(rename = "disable_selinux", skip_serializing_if = "Option::is_none")]
    pub disable_selinux: Option<bool>,
    #[serde(rename = "enabl_uninstall", skip_serializing_if = "Option::is_none")]
    pub enabl_uninstall: Option<bool>,
    #[serde(rename = "generate_token", skip_serializing_if = "Option::is_none")]
    pub generate_token: Option<bool>,
    #[serde(rename = "install_software", skip_serializing_if = "Option::is_none")]
    pub install_software: Option<bool>,
    #[serde(rename = "enable_mysql_uninstall", skip_serializing_if = "Option::is_none")]
    pub enable_mysql_uninstall: Option<bool>,
    #[serde(rename = "mysql_semi_sync", skip_serializing_if = "Option::is_none")]
    pub mysql_semi_sync: Option<bool>,
    #[serde(rename = "enable_ssl", skip_serializing_if = "Option::is_none")]
    pub enable_ssl: Option<bool>,
    #[serde(rename = "mongos_conf_template", skip_serializing_if = "Option::is_none")]
    pub mongos_conf_template: Option<String>,
    #[serde(rename = "mongodb_authdb", skip_serializing_if = "Option::is_none")]
    pub mongodb_authdb: Option<String>,
    #[serde(rename = "node_type", skip_serializing_if = "Option::is_none")]
    pub node_type: Option<i32>,
    #[serde(rename = "overwrite_mysqlchk", skip_serializing_if = "Option::is_none")]
    pub overwrite_mysqlchk: Option<bool>,
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(rename = "ssh_keyfile", skip_serializing_if = "Option::is_none")]
    pub ssh_keyfile: Option<String>,
    #[serde(rename = "ssh_port", skip_serializing_if = "Option::is_none")]
    pub ssh_port: Option<String>,
    #[serde(rename = "ssh_user", skip_serializing_if = "Option::is_none")]
    pub ssh_user: Option<String>,
    #[serde(rename = "sudo_password", skip_serializing_if = "Option::is_none")]
    pub sudo_password: Option<String>,
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    #[serde(rename = "vendor", skip_serializing_if = "Option::is_none")]
    pub vendor: Option<Vendor>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "software_package", skip_serializing_if = "Option::is_none")]
    pub software_package: Option<String>,
    #[serde(rename = "server_address", skip_serializing_if = "Option::is_none")]
    pub server_address: Option<String>,
    #[serde(rename = "terminate_db_server", skip_serializing_if = "Option::is_none")]
    pub terminate_db_server: Option<bool>,
    #[serde(rename = "xtrabackup_use_memory", skip_serializing_if = "Option::is_none")]
    pub xtrabackup_use_memory: Option<i32>,
    #[serde(rename = "initial", skip_serializing_if = "Option::is_none")]
    pub initial: Option<bool>,
    #[serde(rename = "reboot", skip_serializing_if = "Option::is_none")]
    pub reboot: Option<bool>,
    #[serde(rename = "slave_address", skip_serializing_if = "Option::is_none")]
    pub slave_address: Option<String>,
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
    #[serde(rename = "force_stop", skip_serializing_if = "Option::is_none")]
    pub force_stop: Option<bool>,
    #[serde(rename = "stop_timeout", skip_serializing_if = "Option::is_none")]
    pub stop_timeout: Option<i32>,
    #[serde(rename = "verify_backup", skip_serializing_if = "Option::is_none")]
    pub verify_backup: Option<Box<crate::models::JobsJobJobSpecJobDataVerifyBackup>>,
    #[serde(rename = "config_servers", skip_serializing_if = "Option::is_none")]
    pub config_servers: Option<Box<crate::models::JobsJobJobSpecJobDataConfigServers>>,
    #[serde(rename = "mongos_servers2", skip_serializing_if = "Option::is_none")]
    pub mongos_servers2: Option<Vec<crate::models::JobsJobJobSpecJobDataConfigServersMembers>>,
    #[serde(rename = "node", skip_serializing_if = "Option::is_none")]
    pub node: Option<Box<crate::models::JobsJobJobSpecJobDataNode>>,
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<crate::models::JobsJobJobSpecJobDataNodes>>,
    #[serde(rename = "node_adresses", skip_serializing_if = "Option::is_none")]
    pub node_adresses: Option<Vec<crate::models::JobsJobJobSpecJobDataNodeAdresses>>,
    #[serde(rename = "topology", skip_serializing_if = "Option::is_none")]
    pub topology: Option<Box<crate::models::JobsJobJobSpecJobDataTopology>>,
    #[serde(rename = "replica_sets", skip_serializing_if = "Option::is_none")]
    pub replica_sets: Option<Vec<crate::models::JobsJobJobSpecJobDataReplicaSets>>,
    #[serde(rename = "with_tags", skip_serializing_if = "Option::is_none")]
    pub with_tags: Option<Vec<String>>,
}

impl JobsJobJobSpecJobData {
    pub fn new() -> JobsJobJobSpecJobData {
        JobsJobJobSpecJobData {
            action: None,
            addnode: None,
            admin_username: None,
            admin_user: None,
            admin_password: None,
            audit_events: None,
            backupid: None,
            backup_id: None,
            build_from_source: None,
            cluster_name: None,
            clusterid: None,
            cluster_type: None,
            company_id: None,
            config_template: None,
            backup_failover: None,
            backup_failover_host: None,
            backup_method: None,
            backup_mysqldump_type: None,
            backup_individual_schemas: None,
            backup_retention: None,
            extended_insert: None,
            backup_dir: None,
            backupsubdir: None,
            cc_storage: None,
            compression: None,
            compression_level: None,
            db_database: None,
            db_password: None,
            db_privs: None,
            db_username: None,
            exec_upgrade_script: None,
            listening_port: None,
            monitor_password: None,
            monitor_user: None,
            use_clustering: None,
            use_rw_split: None,
            hostname: None,
            master_address: None,
            include_databases: None,
            install_timescaledb: None,
            update_lb: None,
            encrypt_backup: None,
            throttle_rate_netbw: None,
            use_pigz: None,
            use_qpress: None,
            wsrep_desync: None,
            xtrabackup_backup_locks: None,
            xtrabackup_lock_ddl_per_table: None,
            xtrabackup_parallellism: None,
            verify_backup_delay: None,
            data_dir: None,
            db_user: None,
            disable_firewall: None,
            disable_selinux: None,
            enabl_uninstall: None,
            generate_token: None,
            install_software: None,
            enable_mysql_uninstall: None,
            mysql_semi_sync: None,
            enable_ssl: None,
            mongos_conf_template: None,
            mongodb_authdb: None,
            node_type: None,
            overwrite_mysqlchk: None,
            port: None,
            ssh_keyfile: None,
            ssh_port: None,
            ssh_user: None,
            sudo_password: None,
            user_id: None,
            vendor: None,
            version: None,
            software_package: None,
            server_address: None,
            terminate_db_server: None,
            xtrabackup_use_memory: None,
            initial: None,
            reboot: None,
            slave_address: None,
            force: None,
            force_stop: None,
            stop_timeout: None,
            verify_backup: None,
            config_servers: None,
            mongos_servers2: None,
            node: None,
            nodes: None,
            node_adresses: None,
            topology: None,
            replica_sets: None,
            with_tags: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "enable")]
    Enable,
    #[serde(rename = "setup")]
    Setup,
    #[serde(rename = "setupHaProxy")]
    SetupHaProxy,
    #[serde(rename = "setupProxySql")]
    SetupProxySql,
}

impl Default for Action {
    fn default() -> Action {
        Self::Enable
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClusterType {
    #[serde(rename = "mssql_single")]
    MssqlSingle,
    #[serde(rename = "redis")]
    Redis,
    #[serde(rename = "mongodb")]
    Mongodb,
    #[serde(rename = "mssql_ao_async")]
    MssqlAoAsync,
    #[serde(rename = "postgresql_single")]
    PostgresqlSingle,
    #[serde(rename = "replication")]
    Replication,
    #[serde(rename = "galera")]
    Galera,
}

impl Default for ClusterType {
    fn default() -> ClusterType {
        Self::MssqlSingle
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BackupFailoverHost {
    #[serde(rename = "auto")]
    Auto,
}

impl Default for BackupFailoverHost {
    fn default() -> BackupFailoverHost {
        Self::Auto
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BackupMethod {
    #[serde(rename = "xtrabackupfull")]
    Xtrabackupfull,
    #[serde(rename = "xtrabackupincr")]
    Xtrabackupincr,
    #[serde(rename = "pgbackrestfull")]
    Pgbackrestfull,
    #[serde(rename = "pgbackrestincr")]
    Pgbackrestincr,
    #[serde(rename = "pgbackrestdiff")]
    Pgbackrestdiff,
    #[serde(rename = "pg_basebackup")]
    PgBasebackup,
    #[serde(rename = "mysqldump")]
    Mysqldump,
    #[serde(rename = "percona-backup-mongodb")]
    PerconaBackupMongodb,
    #[serde(rename = "mssqlcert")]
    Mssqlcert,
}

impl Default for BackupMethod {
    fn default() -> BackupMethod {
        Self::Xtrabackupfull
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BackupMysqldumpType {
    #[serde(rename = "Complete")]
    Complete,
    #[serde(rename = "SchemaAndData")]
    SchemaAndData,
    #[serde(rename = "SchemaOnly")]
    SchemaOnly,
    #[serde(rename = "DataOnly")]
    DataOnly,
    #[serde(rename = "MySQLDbOnly")]
    MySQLDbOnly,
}

impl Default for BackupMysqldumpType {
    fn default() -> BackupMysqldumpType {
        Self::Complete
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Vendor {
    #[serde(rename = "defalt")]
    Defalt,
    #[serde(rename = "percona")]
    Percona,
    #[serde(rename = "microsoft")]
    Microsoft,
    #[serde(rename = "redis")]
    Redis,
}

impl Default for Vendor {
    fn default() -> Vendor {
        Self::Defalt
    }
}

