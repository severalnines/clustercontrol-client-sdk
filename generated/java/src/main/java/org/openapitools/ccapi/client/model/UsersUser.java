/*
 * Severalnines ClusterControl
 * This is a ...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.ccapi.client.model.UsersUserGroupsInner;
import org.openapitools.ccapi.client.model.UsersUserPublicKeysInner;
import org.openapitools.ccapi.client.model.UsersUserTimezone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * UsersUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-17T17:47:57.934643-04:00[America/New_York]")
public class UsersUser {
  /**
   * Gets or Sets className
   */
  @JsonAdapter(ClassNameEnum.Adapter.class)
  public enum ClassNameEnum {
    CMONUSER("CmonUser");

    private String value;

    ClassNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassNameEnum fromValue(String value) {
      for (ClassNameEnum b : ClassNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClassNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLASS_NAME = "class_name";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private ClassNameEnum className;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_NEW_PASSWORD = "new_password";
  @SerializedName(SERIALIZED_NAME_NEW_PASSWORD)
  private String newPassword;

  public static final String SERIALIZED_NAME_OLD_PASSWORD = "old_password";
  @SerializedName(SERIALIZED_NAME_OLD_PASSWORD)
  private String oldPassword;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<UsersUserGroupsInner> groups = null;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private UsersUserTimezone timezone;

  public static final String SERIALIZED_NAME_PUBLIC_KEYS = "public_keys";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEYS)
  private List<UsersUserPublicKeysInner> publicKeys = null;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private List<UsersUserPublicKeysInner> publicKey = null;

  public UsersUser() { 
  }

  public UsersUser className(ClassNameEnum className) {
    
    this.className = className;
    return this;
  }

   /**
   * Get className
   * @return className
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClassNameEnum getClassName() {
    return className;
  }


  public void setClassName(ClassNameEnum className) {
    this.className = className;
  }


  public UsersUser userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }


  public UsersUser userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public UsersUser firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UsersUser lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UsersUser emailAddress(String emailAddress) {
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Get emailAddress
   * @return emailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public UsersUser newPassword(String newPassword) {
    
    this.newPassword = newPassword;
    return this;
  }

   /**
   * Get newPassword
   * @return newPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNewPassword() {
    return newPassword;
  }


  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public UsersUser oldPassword(String oldPassword) {
    
    this.oldPassword = oldPassword;
    return this;
  }

   /**
   * Get oldPassword
   * @return oldPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOldPassword() {
    return oldPassword;
  }


  public void setOldPassword(String oldPassword) {
    this.oldPassword = oldPassword;
  }


  public UsersUser groups(List<UsersUserGroupsInner> groups) {
    
    this.groups = groups;
    return this;
  }

  public UsersUser addGroupsItem(UsersUserGroupsInner groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<UsersUserGroupsInner> getGroups() {
    return groups;
  }


  public void setGroups(List<UsersUserGroupsInner> groups) {
    this.groups = groups;
  }


  public UsersUser timezone(UsersUserTimezone timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsersUserTimezone getTimezone() {
    return timezone;
  }


  public void setTimezone(UsersUserTimezone timezone) {
    this.timezone = timezone;
  }


  public UsersUser publicKeys(List<UsersUserPublicKeysInner> publicKeys) {
    
    this.publicKeys = publicKeys;
    return this;
  }

  public UsersUser addPublicKeysItem(UsersUserPublicKeysInner publicKeysItem) {
    if (this.publicKeys == null) {
      this.publicKeys = new ArrayList<>();
    }
    this.publicKeys.add(publicKeysItem);
    return this;
  }

   /**
   * Get publicKeys
   * @return publicKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<UsersUserPublicKeysInner> getPublicKeys() {
    return publicKeys;
  }


  public void setPublicKeys(List<UsersUserPublicKeysInner> publicKeys) {
    this.publicKeys = publicKeys;
  }


  public UsersUser publicKey(List<UsersUserPublicKeysInner> publicKey) {
    
    this.publicKey = publicKey;
    return this;
  }

  public UsersUser addPublicKeyItem(UsersUserPublicKeysInner publicKeyItem) {
    if (this.publicKey == null) {
      this.publicKey = new ArrayList<>();
    }
    this.publicKey.add(publicKeyItem);
    return this;
  }

   /**
   * Get publicKey
   * @return publicKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<UsersUserPublicKeysInner> getPublicKey() {
    return publicKey;
  }


  public void setPublicKey(List<UsersUserPublicKeysInner> publicKey) {
    this.publicKey = publicKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersUser usersUser = (UsersUser) o;
    return Objects.equals(this.className, usersUser.className) &&
        Objects.equals(this.userName, usersUser.userName) &&
        Objects.equals(this.userId, usersUser.userId) &&
        Objects.equals(this.firstName, usersUser.firstName) &&
        Objects.equals(this.lastName, usersUser.lastName) &&
        Objects.equals(this.emailAddress, usersUser.emailAddress) &&
        Objects.equals(this.newPassword, usersUser.newPassword) &&
        Objects.equals(this.oldPassword, usersUser.oldPassword) &&
        Objects.equals(this.groups, usersUser.groups) &&
        Objects.equals(this.timezone, usersUser.timezone) &&
        Objects.equals(this.publicKeys, usersUser.publicKeys) &&
        Objects.equals(this.publicKey, usersUser.publicKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(className, userName, userId, firstName, lastName, emailAddress, newPassword, oldPassword, groups, timezone, publicKeys, publicKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersUser {\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    oldPassword: ").append(toIndentedString(oldPassword)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    publicKeys: ").append(toIndentedString(publicKeys)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("class_name");
    openapiFields.add("user_name");
    openapiFields.add("user_id");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("email_address");
    openapiFields.add("new_password");
    openapiFields.add("old_password");
    openapiFields.add("groups");
    openapiFields.add("timezone");
    openapiFields.add("public_keys");
    openapiFields.add("public_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UsersUser.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersUser is not found in the empty JSON string", UsersUser.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UsersUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("class_name") != null && !jsonObj.get("class_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class_name").toString()));
      }
      if (jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
      if (jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (jsonObj.get("email_address") != null && !jsonObj.get("email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_address").toString()));
      }
      if (jsonObj.get("new_password") != null && !jsonObj.get("new_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_password").toString()));
      }
      if (jsonObj.get("old_password") != null && !jsonObj.get("old_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_password").toString()));
      }
      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      if (jsonArraygroups != null) {
        // ensure the json data is an array
        if (!jsonObj.get("groups").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
        }

        // validate the optional field `groups` (array)
        for (int i = 0; i < jsonArraygroups.size(); i++) {
          UsersUserGroupsInner.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `timezone`
      if (jsonObj.getAsJsonObject("timezone") != null) {
        UsersUserTimezone.validateJsonObject(jsonObj.getAsJsonObject("timezone"));
      }
      JsonArray jsonArraypublicKeys = jsonObj.getAsJsonArray("public_keys");
      if (jsonArraypublicKeys != null) {
        // ensure the json data is an array
        if (!jsonObj.get("public_keys").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `public_keys` to be an array in the JSON string but got `%s`", jsonObj.get("public_keys").toString()));
        }

        // validate the optional field `public_keys` (array)
        for (int i = 0; i < jsonArraypublicKeys.size(); i++) {
          UsersUserPublicKeysInner.validateJsonObject(jsonArraypublicKeys.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraypublicKey = jsonObj.getAsJsonArray("public_key");
      if (jsonArraypublicKey != null) {
        // ensure the json data is an array
        if (!jsonObj.get("public_key").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `public_key` to be an array in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
        }

        // validate the optional field `public_key` (array)
        for (int i = 0; i < jsonArraypublicKey.size(); i++) {
          UsersUserPublicKeysInner.validateJsonObject(jsonArraypublicKey.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersUser.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersUser>() {
           @Override
           public void write(JsonWriter out, UsersUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersUser
  * @throws IOException if the JSON string is invalid with respect to UsersUser
  */
  public static UsersUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersUser.class);
  }

 /**
  * Convert an instance of UsersUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

