/*
 * Severalnines ClusterControl REST API (V2)
 * REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.
 *
 * The version of the OpenAPI document: OpenAPI specification v1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * JobsJobJobSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T15:50:08.265886-05:00[America/New_York]")
public class JobsJobJobSpec {
  /**
   * Gets or Sets command
   */
  @JsonAdapter(CommandEnum.Adapter.class)
  public enum CommandEnum {
    ROLLING_RESTART("rolling_restart"),
    
    CREATE_CLUSTER("create_cluster"),
    
    REMOVE_CLUSTER("remove_cluster"),
    
    BACKUP("backup"),
    
    VERIFY_BACKUP("verify_backup"),
    
    DEPLOY_AGENTS("deploy_agents"),
    
    PBMAGENT("pbmagent"),
    
    ADDNODE("addnode"),
    
    PGBOUNCER("pgbouncer"),
    
    PROMOTE_REPLICATION_SLAVE("promote_replication_slave"),
    
    SETUP_AUDIT_LOGGING("setup_audit_logging"),
    
    DISABLE_RECOVERY("disable_recovery"),
    
    ENABLE_RECOVERY("enable_recovery"),
    
    RESTART("restart"),
    
    ENABLE_DB_READONLY("enable_db_readonly"),
    
    ERROR_REPORT("error_report"),
    
    CALCULATE_DB_GROWTH("calculate_db_growth"),
    
    ENABLE_NODE_RECOVERY("enable_node_recovery"),
    
    DISABLE_NODE_RECOVERY("disable_node_recovery"),
    
    CHECK_PKG_UPGRADES("check_pkg_upgrades"),
    
    UPGRADE_CLUSTER("upgrade_cluster"),
    
    SUCCESS("success"),
    
    ADD_REPLICATION_SLAVE("add_replication_slave"),
    
    DEPLOY_CMONAGENTS("deploy_cmonagents");

    private String value;

    CommandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommandEnum fromValue(String value) {
      for (CommandEnum b : CommandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommandEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private CommandEnum command;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JOB_DATA = "job_data";
  @SerializedName(SERIALIZED_NAME_JOB_DATA)
  private JobsJobJobSpecJobData jobData;

  public JobsJobJobSpec() {
  }

  public JobsJobJobSpec command(CommandEnum command) {
    
    this.command = command;
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommandEnum getCommand() {
    return command;
  }


  public void setCommand(CommandEnum command) {
    this.command = command;
  }


  public JobsJobJobSpec id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public JobsJobJobSpec jobData(JobsJobJobSpecJobData jobData) {
    
    this.jobData = jobData;
    return this;
  }

   /**
   * Get jobData
   * @return jobData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsJobJobSpecJobData getJobData() {
    return jobData;
  }


  public void setJobData(JobsJobJobSpecJobData jobData) {
    this.jobData = jobData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsJobJobSpec jobsJobJobSpec = (JobsJobJobSpec) o;
    return Objects.equals(this.command, jobsJobJobSpec.command) &&
        Objects.equals(this.id, jobsJobJobSpec.id) &&
        Objects.equals(this.jobData, jobsJobJobSpec.jobData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, id, jobData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsJobJobSpec {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobData: ").append(toIndentedString(jobData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("command");
    openapiFields.add("id");
    openapiFields.add("job_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobsJobJobSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobsJobJobSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobsJobJobSpec is not found in the empty JSON string", JobsJobJobSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JobsJobJobSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsJobJobSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) && !jsonObj.get("command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      // validate the optional field `job_data`
      if (jsonObj.get("job_data") != null && !jsonObj.get("job_data").isJsonNull()) {
        JobsJobJobSpecJobData.validateJsonObject(jsonObj.getAsJsonObject("job_data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobsJobJobSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobsJobJobSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobsJobJobSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobsJobJobSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<JobsJobJobSpec>() {
           @Override
           public void write(JsonWriter out, JobsJobJobSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobsJobJobSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobsJobJobSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobsJobJobSpec
  * @throws IOException if the JSON string is invalid with respect to JobsJobJobSpec
  */
  public static JobsJobJobSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobsJobJobSpec.class);
  }

 /**
  * Convert an instance of JobsJobJobSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

