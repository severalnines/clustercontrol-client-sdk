/*
 * Severalnines ClusterControl REST API (V2)
 * REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.
 *
 * The version of the OpenAPI document: OpenAPI specification v1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.ccapi.client.model.DiscoveryJobJobSpecJobDataNodesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * DiscoveryJobJobSpecJobData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T11:54:25.905584-05:00[America/New_York]")
public class DiscoveryJobJobSpecJobData {
  /**
   * Gets or Sets clusterType
   */
  @JsonAdapter(ClusterTypeEnum.Adapter.class)
  public enum ClusterTypeEnum {
    GROUP_REPLICATION("group_replication");

    private String value;

    ClusterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClusterTypeEnum fromValue(String value) {
      for (ClusterTypeEnum b : ClusterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClusterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClusterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClusterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClusterTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLUSTER_TYPE = "cluster_type";
  @SerializedName(SERIALIZED_NAME_CLUSTER_TYPE)
  private ClusterTypeEnum clusterType;

  public static final String SERIALIZED_NAME_MYSQL_VERSION = "mysql_version";
  @SerializedName(SERIALIZED_NAME_MYSQL_VERSION)
  private String mysqlVersion;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<DiscoveryJobJobSpecJobDataNodesInner> nodes = null;

  public DiscoveryJobJobSpecJobData() {
  }

  public DiscoveryJobJobSpecJobData clusterType(ClusterTypeEnum clusterType) {
    
    this.clusterType = clusterType;
    return this;
  }

   /**
   * Get clusterType
   * @return clusterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClusterTypeEnum getClusterType() {
    return clusterType;
  }


  public void setClusterType(ClusterTypeEnum clusterType) {
    this.clusterType = clusterType;
  }


  public DiscoveryJobJobSpecJobData mysqlVersion(String mysqlVersion) {
    
    this.mysqlVersion = mysqlVersion;
    return this;
  }

   /**
   * Get mysqlVersion
   * @return mysqlVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMysqlVersion() {
    return mysqlVersion;
  }


  public void setMysqlVersion(String mysqlVersion) {
    this.mysqlVersion = mysqlVersion;
  }


  public DiscoveryJobJobSpecJobData vendor(String vendor) {
    
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendor() {
    return vendor;
  }


  public void setVendor(String vendor) {
    this.vendor = vendor;
  }


  public DiscoveryJobJobSpecJobData nodes(List<DiscoveryJobJobSpecJobDataNodesInner> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public DiscoveryJobJobSpecJobData addNodesItem(DiscoveryJobJobSpecJobDataNodesInner nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Get nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DiscoveryJobJobSpecJobDataNodesInner> getNodes() {
    return nodes;
  }


  public void setNodes(List<DiscoveryJobJobSpecJobDataNodesInner> nodes) {
    this.nodes = nodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveryJobJobSpecJobData discoveryJobJobSpecJobData = (DiscoveryJobJobSpecJobData) o;
    return Objects.equals(this.clusterType, discoveryJobJobSpecJobData.clusterType) &&
        Objects.equals(this.mysqlVersion, discoveryJobJobSpecJobData.mysqlVersion) &&
        Objects.equals(this.vendor, discoveryJobJobSpecJobData.vendor) &&
        Objects.equals(this.nodes, discoveryJobJobSpecJobData.nodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterType, mysqlVersion, vendor, nodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveryJobJobSpecJobData {\n");
    sb.append("    clusterType: ").append(toIndentedString(clusterType)).append("\n");
    sb.append("    mysqlVersion: ").append(toIndentedString(mysqlVersion)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster_type");
    openapiFields.add("mysql_version");
    openapiFields.add("vendor");
    openapiFields.add("nodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DiscoveryJobJobSpecJobData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DiscoveryJobJobSpecJobData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoveryJobJobSpecJobData is not found in the empty JSON string", DiscoveryJobJobSpecJobData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DiscoveryJobJobSpecJobData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoveryJobJobSpecJobData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("cluster_type") != null && !jsonObj.get("cluster_type").isJsonNull()) && !jsonObj.get("cluster_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_type").toString()));
      }
      if ((jsonObj.get("mysql_version") != null && !jsonObj.get("mysql_version").isJsonNull()) && !jsonObj.get("mysql_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql_version").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            DiscoveryJobJobSpecJobDataNodesInner.validateJsonObject(jsonArraynodes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoveryJobJobSpecJobData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoveryJobJobSpecJobData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoveryJobJobSpecJobData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoveryJobJobSpecJobData.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoveryJobJobSpecJobData>() {
           @Override
           public void write(JsonWriter out, DiscoveryJobJobSpecJobData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoveryJobJobSpecJobData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DiscoveryJobJobSpecJobData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DiscoveryJobJobSpecJobData
  * @throws IOException if the JSON string is invalid with respect to DiscoveryJobJobSpecJobData
  */
  public static DiscoveryJobJobSpecJobData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoveryJobJobSpecJobData.class);
  }

 /**
  * Convert an instance of DiscoveryJobJobSpecJobData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

