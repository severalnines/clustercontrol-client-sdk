/*
 * Severalnines ClusterControl REST API (V2)
 * REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.
 *
 * The version of the OpenAPI document: OpenAPI specification v1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * ClustersAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T15:50:08.265886-05:00[America/New_York]")
public class ClustersAccount {
  /**
   * Gets or Sets className
   */
  @JsonAdapter(ClassNameEnum.Adapter.class)
  public enum ClassNameEnum {
    CMONACCOUNT("CmonAccount");

    private String value;

    ClassNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassNameEnum fromValue(String value) {
      for (ClassNameEnum b : ClassNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClassNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLASS_NAME = "class_name";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private ClassNameEnum className;

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private String grants;

  public static final String SERIALIZED_NAME_HOST_ALLOW = "host_allow";
  @SerializedName(SERIALIZED_NAME_HOST_ALLOW)
  private String hostAllow;

  public static final String SERIALIZED_NAME_OWN_DATABASE = "own_database";
  @SerializedName(SERIALIZED_NAME_OWN_DATABASE)
  private String ownDatabase;

  public static final String SERIALIZED_NAME_PRIVILEGES = "privileges";
  @SerializedName(SERIALIZED_NAME_PRIVILEGES)
  private String privileges;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public ClustersAccount() {
  }

  public ClustersAccount className(ClassNameEnum className) {
    
    this.className = className;
    return this;
  }

   /**
   * Get className
   * @return className
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClassNameEnum getClassName() {
    return className;
  }


  public void setClassName(ClassNameEnum className) {
    this.className = className;
  }


  public ClustersAccount grants(String grants) {
    
    this.grants = grants;
    return this;
  }

   /**
   * e.g. \&quot;john:ALL;pipas:INSERT\&quot;
   * @return grants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "e.g. \"john:ALL;pipas:INSERT\"")

  public String getGrants() {
    return grants;
  }


  public void setGrants(String grants) {
    this.grants = grants;
  }


  public ClustersAccount hostAllow(String hostAllow) {
    
    this.hostAllow = hostAllow;
    return this;
  }

   /**
   * e.g. \&quot;1.2.3.4\&quot;
   * @return hostAllow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "e.g. \"1.2.3.4\"")

  public String getHostAllow() {
    return hostAllow;
  }


  public void setHostAllow(String hostAllow) {
    this.hostAllow = hostAllow;
  }


  public ClustersAccount ownDatabase(String ownDatabase) {
    
    this.ownDatabase = ownDatabase;
    return this;
  }

   /**
   * Get ownDatabase
   * @return ownDatabase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOwnDatabase() {
    return ownDatabase;
  }


  public void setOwnDatabase(String ownDatabase) {
    this.ownDatabase = ownDatabase;
  }


  public ClustersAccount privileges(String privileges) {
    
    this.privileges = privileges;
    return this;
  }

   /**
   * e.g. \&quot;testCreateDatabase.*:DELETE,TRUNCATE\&quot;
   * @return privileges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "e.g. \"testCreateDatabase.*:DELETE,TRUNCATE\"")

  public String getPrivileges() {
    return privileges;
  }


  public void setPrivileges(String privileges) {
    this.privileges = privileges;
  }


  public ClustersAccount userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * e.g. \&quot;pipas\&quot;
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "e.g. \"pipas\"")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }


  public ClustersAccount password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClustersAccount clustersAccount = (ClustersAccount) o;
    return Objects.equals(this.className, clustersAccount.className) &&
        Objects.equals(this.grants, clustersAccount.grants) &&
        Objects.equals(this.hostAllow, clustersAccount.hostAllow) &&
        Objects.equals(this.ownDatabase, clustersAccount.ownDatabase) &&
        Objects.equals(this.privileges, clustersAccount.privileges) &&
        Objects.equals(this.userName, clustersAccount.userName) &&
        Objects.equals(this.password, clustersAccount.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(className, grants, hostAllow, ownDatabase, privileges, userName, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClustersAccount {\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("    hostAllow: ").append(toIndentedString(hostAllow)).append("\n");
    sb.append("    ownDatabase: ").append(toIndentedString(ownDatabase)).append("\n");
    sb.append("    privileges: ").append(toIndentedString(privileges)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("class_name");
    openapiFields.add("grants");
    openapiFields.add("host_allow");
    openapiFields.add("own_database");
    openapiFields.add("privileges");
    openapiFields.add("user_name");
    openapiFields.add("password");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ClustersAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ClustersAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClustersAccount is not found in the empty JSON string", ClustersAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ClustersAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClustersAccount` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("class_name") != null && !jsonObj.get("class_name").isJsonNull()) && !jsonObj.get("class_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class_name").toString()));
      }
      if ((jsonObj.get("grants") != null && !jsonObj.get("grants").isJsonNull()) && !jsonObj.get("grants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grants").toString()));
      }
      if ((jsonObj.get("host_allow") != null && !jsonObj.get("host_allow").isJsonNull()) && !jsonObj.get("host_allow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_allow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_allow").toString()));
      }
      if ((jsonObj.get("own_database") != null && !jsonObj.get("own_database").isJsonNull()) && !jsonObj.get("own_database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `own_database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("own_database").toString()));
      }
      if ((jsonObj.get("privileges") != null && !jsonObj.get("privileges").isJsonNull()) && !jsonObj.get("privileges").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privileges` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privileges").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClustersAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClustersAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClustersAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClustersAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<ClustersAccount>() {
           @Override
           public void write(JsonWriter out, ClustersAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClustersAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClustersAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClustersAccount
  * @throws IOException if the JSON string is invalid with respect to ClustersAccount
  */
  public static ClustersAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClustersAccount.class);
  }

 /**
  * Convert an instance of ClustersAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

