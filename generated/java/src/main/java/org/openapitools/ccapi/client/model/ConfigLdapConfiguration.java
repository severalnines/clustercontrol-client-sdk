/*
 * Severalnines ClusterControl REST API (V2)
 * REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.
 *
 * The version of the OpenAPI document: OpenAPI specification v1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.ccapi.client.model.ConfigLdapConfigurationGroupMappingsInner;
import org.openapitools.ccapi.client.model.ConfigLdapConfigurationLdapSettings;
import org.openapitools.ccapi.client.model.ConfigLdapConfigurationSecurity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * ConfigLdapConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T15:50:08.265886-05:00[America/New_York]")
public class ConfigLdapConfiguration {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LDAP_ADMIN_PASSWORD = "ldapAdminPassword";
  @SerializedName(SERIALIZED_NAME_LDAP_ADMIN_PASSWORD)
  private String ldapAdminPassword;

  public static final String SERIALIZED_NAME_LDAP_ADMIN_USER = "ldapAdminUser";
  @SerializedName(SERIALIZED_NAME_LDAP_ADMIN_USER)
  private String ldapAdminUser;

  public static final String SERIALIZED_NAME_LDAP_GROUP_SEARCH_ROOT = "ldapGroupSearchRoot";
  @SerializedName(SERIALIZED_NAME_LDAP_GROUP_SEARCH_ROOT)
  private String ldapGroupSearchRoot;

  public static final String SERIALIZED_NAME_LDAP_SERVER_URI = "ldapServerUri";
  @SerializedName(SERIALIZED_NAME_LDAP_SERVER_URI)
  private String ldapServerUri;

  public static final String SERIALIZED_NAME_LDAP_USER_SEARCH_ROOT = "ldapUserSearchRoot";
  @SerializedName(SERIALIZED_NAME_LDAP_USER_SEARCH_ROOT)
  private String ldapUserSearchRoot;

  public static final String SERIALIZED_NAME_GROUP_MAPPINGS = "groupMappings";
  @SerializedName(SERIALIZED_NAME_GROUP_MAPPINGS)
  private List<ConfigLdapConfigurationGroupMappingsInner> groupMappings = null;

  public static final String SERIALIZED_NAME_LDAP_SETTINGS = "ldapSettings";
  @SerializedName(SERIALIZED_NAME_LDAP_SETTINGS)
  private ConfigLdapConfigurationLdapSettings ldapSettings;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private ConfigLdapConfigurationSecurity security;

  public ConfigLdapConfiguration() {
  }

  public ConfigLdapConfiguration enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ConfigLdapConfiguration ldapAdminPassword(String ldapAdminPassword) {
    
    this.ldapAdminPassword = ldapAdminPassword;
    return this;
  }

   /**
   * Get ldapAdminPassword
   * @return ldapAdminPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLdapAdminPassword() {
    return ldapAdminPassword;
  }


  public void setLdapAdminPassword(String ldapAdminPassword) {
    this.ldapAdminPassword = ldapAdminPassword;
  }


  public ConfigLdapConfiguration ldapAdminUser(String ldapAdminUser) {
    
    this.ldapAdminUser = ldapAdminUser;
    return this;
  }

   /**
   * Get ldapAdminUser
   * @return ldapAdminUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLdapAdminUser() {
    return ldapAdminUser;
  }


  public void setLdapAdminUser(String ldapAdminUser) {
    this.ldapAdminUser = ldapAdminUser;
  }


  public ConfigLdapConfiguration ldapGroupSearchRoot(String ldapGroupSearchRoot) {
    
    this.ldapGroupSearchRoot = ldapGroupSearchRoot;
    return this;
  }

   /**
   * Get ldapGroupSearchRoot
   * @return ldapGroupSearchRoot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLdapGroupSearchRoot() {
    return ldapGroupSearchRoot;
  }


  public void setLdapGroupSearchRoot(String ldapGroupSearchRoot) {
    this.ldapGroupSearchRoot = ldapGroupSearchRoot;
  }


  public ConfigLdapConfiguration ldapServerUri(String ldapServerUri) {
    
    this.ldapServerUri = ldapServerUri;
    return this;
  }

   /**
   * Get ldapServerUri
   * @return ldapServerUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLdapServerUri() {
    return ldapServerUri;
  }


  public void setLdapServerUri(String ldapServerUri) {
    this.ldapServerUri = ldapServerUri;
  }


  public ConfigLdapConfiguration ldapUserSearchRoot(String ldapUserSearchRoot) {
    
    this.ldapUserSearchRoot = ldapUserSearchRoot;
    return this;
  }

   /**
   * Get ldapUserSearchRoot
   * @return ldapUserSearchRoot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLdapUserSearchRoot() {
    return ldapUserSearchRoot;
  }


  public void setLdapUserSearchRoot(String ldapUserSearchRoot) {
    this.ldapUserSearchRoot = ldapUserSearchRoot;
  }


  public ConfigLdapConfiguration groupMappings(List<ConfigLdapConfigurationGroupMappingsInner> groupMappings) {
    
    this.groupMappings = groupMappings;
    return this;
  }

  public ConfigLdapConfiguration addGroupMappingsItem(ConfigLdapConfigurationGroupMappingsInner groupMappingsItem) {
    if (this.groupMappings == null) {
      this.groupMappings = new ArrayList<>();
    }
    this.groupMappings.add(groupMappingsItem);
    return this;
  }

   /**
   * Get groupMappings
   * @return groupMappings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConfigLdapConfigurationGroupMappingsInner> getGroupMappings() {
    return groupMappings;
  }


  public void setGroupMappings(List<ConfigLdapConfigurationGroupMappingsInner> groupMappings) {
    this.groupMappings = groupMappings;
  }


  public ConfigLdapConfiguration ldapSettings(ConfigLdapConfigurationLdapSettings ldapSettings) {
    
    this.ldapSettings = ldapSettings;
    return this;
  }

   /**
   * Get ldapSettings
   * @return ldapSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigLdapConfigurationLdapSettings getLdapSettings() {
    return ldapSettings;
  }


  public void setLdapSettings(ConfigLdapConfigurationLdapSettings ldapSettings) {
    this.ldapSettings = ldapSettings;
  }


  public ConfigLdapConfiguration security(ConfigLdapConfigurationSecurity security) {
    
    this.security = security;
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigLdapConfigurationSecurity getSecurity() {
    return security;
  }


  public void setSecurity(ConfigLdapConfigurationSecurity security) {
    this.security = security;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigLdapConfiguration configLdapConfiguration = (ConfigLdapConfiguration) o;
    return Objects.equals(this.enabled, configLdapConfiguration.enabled) &&
        Objects.equals(this.ldapAdminPassword, configLdapConfiguration.ldapAdminPassword) &&
        Objects.equals(this.ldapAdminUser, configLdapConfiguration.ldapAdminUser) &&
        Objects.equals(this.ldapGroupSearchRoot, configLdapConfiguration.ldapGroupSearchRoot) &&
        Objects.equals(this.ldapServerUri, configLdapConfiguration.ldapServerUri) &&
        Objects.equals(this.ldapUserSearchRoot, configLdapConfiguration.ldapUserSearchRoot) &&
        Objects.equals(this.groupMappings, configLdapConfiguration.groupMappings) &&
        Objects.equals(this.ldapSettings, configLdapConfiguration.ldapSettings) &&
        Objects.equals(this.security, configLdapConfiguration.security);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, ldapAdminPassword, ldapAdminUser, ldapGroupSearchRoot, ldapServerUri, ldapUserSearchRoot, groupMappings, ldapSettings, security);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigLdapConfiguration {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ldapAdminPassword: ").append(toIndentedString(ldapAdminPassword)).append("\n");
    sb.append("    ldapAdminUser: ").append(toIndentedString(ldapAdminUser)).append("\n");
    sb.append("    ldapGroupSearchRoot: ").append(toIndentedString(ldapGroupSearchRoot)).append("\n");
    sb.append("    ldapServerUri: ").append(toIndentedString(ldapServerUri)).append("\n");
    sb.append("    ldapUserSearchRoot: ").append(toIndentedString(ldapUserSearchRoot)).append("\n");
    sb.append("    groupMappings: ").append(toIndentedString(groupMappings)).append("\n");
    sb.append("    ldapSettings: ").append(toIndentedString(ldapSettings)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("ldapAdminPassword");
    openapiFields.add("ldapAdminUser");
    openapiFields.add("ldapGroupSearchRoot");
    openapiFields.add("ldapServerUri");
    openapiFields.add("ldapUserSearchRoot");
    openapiFields.add("groupMappings");
    openapiFields.add("ldapSettings");
    openapiFields.add("security");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfigLdapConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConfigLdapConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigLdapConfiguration is not found in the empty JSON string", ConfigLdapConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConfigLdapConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigLdapConfiguration` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ldapAdminPassword") != null && !jsonObj.get("ldapAdminPassword").isJsonNull()) && !jsonObj.get("ldapAdminPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapAdminPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapAdminPassword").toString()));
      }
      if ((jsonObj.get("ldapAdminUser") != null && !jsonObj.get("ldapAdminUser").isJsonNull()) && !jsonObj.get("ldapAdminUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapAdminUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapAdminUser").toString()));
      }
      if ((jsonObj.get("ldapGroupSearchRoot") != null && !jsonObj.get("ldapGroupSearchRoot").isJsonNull()) && !jsonObj.get("ldapGroupSearchRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapGroupSearchRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapGroupSearchRoot").toString()));
      }
      if ((jsonObj.get("ldapServerUri") != null && !jsonObj.get("ldapServerUri").isJsonNull()) && !jsonObj.get("ldapServerUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapServerUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapServerUri").toString()));
      }
      if ((jsonObj.get("ldapUserSearchRoot") != null && !jsonObj.get("ldapUserSearchRoot").isJsonNull()) && !jsonObj.get("ldapUserSearchRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapUserSearchRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapUserSearchRoot").toString()));
      }
      if (jsonObj.get("groupMappings") != null && !jsonObj.get("groupMappings").isJsonNull()) {
        JsonArray jsonArraygroupMappings = jsonObj.getAsJsonArray("groupMappings");
        if (jsonArraygroupMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupMappings` to be an array in the JSON string but got `%s`", jsonObj.get("groupMappings").toString()));
          }

          // validate the optional field `groupMappings` (array)
          for (int i = 0; i < jsonArraygroupMappings.size(); i++) {
            ConfigLdapConfigurationGroupMappingsInner.validateJsonObject(jsonArraygroupMappings.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `ldapSettings`
      if (jsonObj.get("ldapSettings") != null && !jsonObj.get("ldapSettings").isJsonNull()) {
        ConfigLdapConfigurationLdapSettings.validateJsonObject(jsonObj.getAsJsonObject("ldapSettings"));
      }
      // validate the optional field `security`
      if (jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull()) {
        ConfigLdapConfigurationSecurity.validateJsonObject(jsonObj.getAsJsonObject("security"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigLdapConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigLdapConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigLdapConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigLdapConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigLdapConfiguration>() {
           @Override
           public void write(JsonWriter out, ConfigLdapConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigLdapConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigLdapConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigLdapConfiguration
  * @throws IOException if the JSON string is invalid with respect to ConfigLdapConfiguration
  */
  public static ConfigLdapConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigLdapConfiguration.class);
  }

 /**
  * Convert an instance of ConfigLdapConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

