# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_cc_client
from openapi_cc_client.models.users import Users  # noqa: E501
from openapi_cc_client.rest import ApiException

class TestUsers(unittest.TestCase):
    """Users unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Users
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_cc_client.models.users.Users()  # noqa: E501
        if include_optional :
            return Users(
                operation = 'createUser', 
                create_group = True, 
                new_password = '', 
                old_password = '', 
                group_name = '', 
                replace_primary_group = True, 
                with_tags = [
                    ''
                    ], 
                user = openapi_cc_client.models.users_user.Users_user(
                    class_name = 'CmonUser', 
                    user_name = '', 
                    user_id = 56, 
                    first_name = '', 
                    last_name = '', 
                    email_address = '', 
                    new_password = '', 
                    old_password = '', 
                    groups = [
                        openapi_cc_client.models.users_user_groups_inner.Users_user_groups_inner(
                            class_name = '', 
                            group_name = '', 
                            group_id = 56, )
                        ], 
                    timezone = openapi_cc_client.models.users_user_timezone.Users_user_timezone(
                        class_name = '', 
                        abbreviation = '', 
                        name = '', 
                        offset = 56, 
                        use_dst = True, ), 
                    public_keys = [
                        openapi_cc_client.models.users_user_public_keys_inner.Users_user_public_keys_inner(
                            key = '', 
                            name = '', )
                        ], 
                    public_key = [
                        openapi_cc_client.models.users_user_public_keys_inner.Users_user_public_keys_inner(
                            key = '', 
                            name = '', )
                        ], ), 
                group = openapi_cc_client.models.users_group.Users_group(
                    class_name = 'CmonGroup', 
                    group_name = '', )
            )
        else :
            return Users(
                operation = 'createUser',
        )

    def testUsers(self):
        """Test Users"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
