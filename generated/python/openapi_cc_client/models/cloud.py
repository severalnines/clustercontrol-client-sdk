# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class Cloud(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'provider': 'str',
        'name': 'str',
        'comment': 'str',
        'id': 'int',
        'credentials': 'CloudCredentials'
    }

    attribute_map = {
        'operation': 'operation',
        'provider': 'provider',
        'name': 'name',
        'comment': 'comment',
        'id': 'id',
        'credentials': 'credentials'
    }

    def __init__(self, operation=None, provider=None, name=None, comment=None, id=None, credentials=None, local_vars_configuration=None):  # noqa: E501
        """Cloud - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation = None
        self._provider = None
        self._name = None
        self._comment = None
        self._id = None
        self._credentials = None
        self.discriminator = None

        self.operation = operation
        if provider is not None:
            self.provider = provider
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if credentials is not None:
            self.credentials = credentials

    @property
    def operation(self):
        """Gets the operation of this Cloud.  # noqa: E501


        :return: The operation of this Cloud.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Cloud.


        :param operation: The operation of this Cloud.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["verifyCredentials", "listCredentials", "getCredentials", "addCredentials", "updateCredentials", "removeCredentials"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def provider(self):
        """Gets the provider of this Cloud.  # noqa: E501


        :return: The provider of this Cloud.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Cloud.


        :param provider: The provider of this Cloud.  # noqa: E501
        :type provider: str
        """

        self._provider = provider

    @property
    def name(self):
        """Gets the name of this Cloud.  # noqa: E501


        :return: The name of this Cloud.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cloud.


        :param name: The name of this Cloud.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this Cloud.  # noqa: E501


        :return: The comment of this Cloud.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Cloud.


        :param comment: The comment of this Cloud.  # noqa: E501
        :type comment: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this Cloud.  # noqa: E501


        :return: The id of this Cloud.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cloud.


        :param id: The id of this Cloud.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def credentials(self):
        """Gets the credentials of this Cloud.  # noqa: E501


        :return: The credentials of this Cloud.  # noqa: E501
        :rtype: CloudCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Cloud.


        :param credentials: The credentials of this Cloud.  # noqa: E501
        :type credentials: CloudCredentials
        """

        self._credentials = credentials

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cloud):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Cloud):
            return True

        return self.to_dict() != other.to_dict()
