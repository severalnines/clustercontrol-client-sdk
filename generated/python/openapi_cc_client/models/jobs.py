# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class Jobs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'cluster_id': 'int',
        'job_id': 'int',
        'signal': 'int',
        'ascending': 'bool',
        'limit': 'int',
        'offset': 'int',
        'log_level': 'str',
        'job': 'JobsJob'
    }

    attribute_map = {
        'operation': 'operation',
        'cluster_id': 'cluster_id',
        'job_id': 'job_id',
        'signal': 'signal',
        'ascending': 'ascending',
        'limit': 'limit',
        'offset': 'offset',
        'log_level': 'log_level',
        'job': 'job'
    }

    def __init__(self, operation=None, cluster_id=None, job_id=None, signal=None, ascending=None, limit=None, offset=None, log_level=None, job=None, local_vars_configuration=None):  # noqa: E501
        """Jobs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation = None
        self._cluster_id = None
        self._job_id = None
        self._signal = None
        self._ascending = None
        self._limit = None
        self._offset = None
        self._log_level = None
        self._job = None
        self.discriminator = None

        self.operation = operation
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if job_id is not None:
            self.job_id = job_id
        if signal is not None:
            self.signal = signal
        if ascending is not None:
            self.ascending = ascending
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if log_level is not None:
            self.log_level = log_level
        if job is not None:
            self.job = job

    @property
    def operation(self):
        """Gets the operation of this Jobs.  # noqa: E501


        :return: The operation of this Jobs.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Jobs.


        :param operation: The operation of this Jobs.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["createJobInstance", "updateJobInstance", "deleteJobInstance", "killJobInstance", "cloneJobInstance", "getJobInstance", "getJobInstances", "getJobLog"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Jobs.  # noqa: E501


        :return: The cluster_id of this Jobs.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Jobs.


        :param cluster_id: The cluster_id of this Jobs.  # noqa: E501
        :type cluster_id: int
        """

        self._cluster_id = cluster_id

    @property
    def job_id(self):
        """Gets the job_id of this Jobs.  # noqa: E501


        :return: The job_id of this Jobs.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Jobs.


        :param job_id: The job_id of this Jobs.  # noqa: E501
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def signal(self):
        """Gets the signal of this Jobs.  # noqa: E501


        :return: The signal of this Jobs.  # noqa: E501
        :rtype: int
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this Jobs.


        :param signal: The signal of this Jobs.  # noqa: E501
        :type signal: int
        """

        self._signal = signal

    @property
    def ascending(self):
        """Gets the ascending of this Jobs.  # noqa: E501


        :return: The ascending of this Jobs.  # noqa: E501
        :rtype: bool
        """
        return self._ascending

    @ascending.setter
    def ascending(self, ascending):
        """Sets the ascending of this Jobs.


        :param ascending: The ascending of this Jobs.  # noqa: E501
        :type ascending: bool
        """

        self._ascending = ascending

    @property
    def limit(self):
        """Gets the limit of this Jobs.  # noqa: E501


        :return: The limit of this Jobs.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Jobs.


        :param limit: The limit of this Jobs.  # noqa: E501
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this Jobs.  # noqa: E501


        :return: The offset of this Jobs.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Jobs.


        :param offset: The offset of this Jobs.  # noqa: E501
        :type offset: int
        """

        self._offset = offset

    @property
    def log_level(self):
        """Gets the log_level of this Jobs.  # noqa: E501


        :return: The log_level of this Jobs.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this Jobs.


        :param log_level: The log_level of this Jobs.  # noqa: E501
        :type log_level: str
        """

        self._log_level = log_level

    @property
    def job(self):
        """Gets the job of this Jobs.  # noqa: E501


        :return: The job of this Jobs.  # noqa: E501
        :rtype: JobsJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Jobs.


        :param job: The job of this Jobs.  # noqa: E501
        :type job: JobsJob
        """

        self._job = job

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Jobs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Jobs):
            return True

        return self.to_dict() != other.to_dict()
