# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from openapi_cc_client.models.jobs_job import JobsJob

class Jobs(BaseModel):
    """
    Creating and manipulating jobs, reading information about jobs  # noqa: E501
    """
    operation: StrictStr = Field(...)
    cluster_id: Optional[StrictInt] = None
    job_id: Optional[StrictInt] = None
    signal: Optional[StrictInt] = None
    ascending: Optional[StrictBool] = None
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    log_level: Optional[StrictStr] = None
    job: Optional[JobsJob] = None
    __properties = ["operation", "cluster_id", "job_id", "signal", "ascending", "limit", "offset", "log_level", "job"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('createJobInstance', 'updateJobInstance', 'deleteJobInstance', 'killJobInstance', 'cloneJobInstance', 'getJobInstance', 'getJobInstances', 'getJobLog'):
            raise ValueError("must be one of enum values ('createJobInstance', 'updateJobInstance', 'deleteJobInstance', 'killJobInstance', 'cloneJobInstance', 'getJobInstance', 'getJobInstances', 'getJobLog')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Jobs:
        """Create an instance of Jobs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of job
        if self.job:
            _dict['job'] = self.job.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Jobs:
        """Create an instance of Jobs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Jobs.parse_obj(obj)

        _obj = Jobs.parse_obj({
            "operation": obj.get("operation"),
            "cluster_id": obj.get("cluster_id"),
            "job_id": obj.get("job_id"),
            "signal": obj.get("signal"),
            "ascending": obj.get("ascending"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "log_level": obj.get("log_level"),
            "job": JobsJob.from_dict(obj.get("job")) if obj.get("job") is not None else None
        })
        return _obj


