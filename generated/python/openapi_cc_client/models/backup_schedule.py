# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class BackupSchedule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'enabled': 'bool',
        'schedule': 'str',
        'schedule_id': 'int',
        'job': 'BackupScheduleJob'
    }

    attribute_map = {
        'class_name': 'class_name',
        'enabled': 'enabled',
        'schedule': 'schedule',
        'schedule_id': 'schedule_id',
        'job': 'job'
    }

    def __init__(self, class_name=None, enabled=None, schedule=None, schedule_id=None, job=None, local_vars_configuration=None):  # noqa: E501
        """BackupSchedule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._enabled = None
        self._schedule = None
        self._schedule_id = None
        self._job = None
        self.discriminator = None

        if class_name is not None:
            self.class_name = class_name
        if enabled is not None:
            self.enabled = enabled
        if schedule is not None:
            self.schedule = schedule
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if job is not None:
            self.job = job

    @property
    def class_name(self):
        """Gets the class_name of this BackupSchedule.  # noqa: E501


        :return: The class_name of this BackupSchedule.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this BackupSchedule.


        :param class_name: The class_name of this BackupSchedule.  # noqa: E501
        :type class_name: str
        """
        allowed_values = ["CmonBackupSchedule"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and class_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `class_name` ({0}), must be one of {1}"  # noqa: E501
                .format(class_name, allowed_values)
            )

        self._class_name = class_name

    @property
    def enabled(self):
        """Gets the enabled of this BackupSchedule.  # noqa: E501


        :return: The enabled of this BackupSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BackupSchedule.


        :param enabled: The enabled of this BackupSchedule.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def schedule(self):
        """Gets the schedule of this BackupSchedule.  # noqa: E501


        :return: The schedule of this BackupSchedule.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this BackupSchedule.


        :param schedule: The schedule of this BackupSchedule.  # noqa: E501
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def schedule_id(self):
        """Gets the schedule_id of this BackupSchedule.  # noqa: E501


        :return: The schedule_id of this BackupSchedule.  # noqa: E501
        :rtype: int
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this BackupSchedule.


        :param schedule_id: The schedule_id of this BackupSchedule.  # noqa: E501
        :type schedule_id: int
        """

        self._schedule_id = schedule_id

    @property
    def job(self):
        """Gets the job of this BackupSchedule.  # noqa: E501


        :return: The job of this BackupSchedule.  # noqa: E501
        :rtype: BackupScheduleJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this BackupSchedule.


        :param job: The job of this BackupSchedule.  # noqa: E501
        :type job: BackupScheduleJob
        """

        self._job = job

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupSchedule):
            return True

        return self.to_dict() != other.to_dict()
