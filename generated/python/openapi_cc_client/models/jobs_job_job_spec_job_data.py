# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class JobsJobJobSpecJobData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'addnode': 'bool',
        'admin_username': 'str',
        'admin_user': 'str',
        'admin_password': 'str',
        'audit_events': 'str',
        'archive_mode': 'str',
        'backupid': 'int',
        'backup_id': 'int',
        'build_from_source': 'bool',
        'cluster_name': 'str',
        'clusterid': 'int',
        'cluster_type': 'str',
        'company_id': 'str',
        'config_template': 'str',
        'backup_failover': 'bool',
        'backup_failover_host': 'str',
        'backup_method': 'str',
        'backup_mysqldump_type': 'str',
        'backup_individual_schemas': 'bool',
        'backup_retention': 'int',
        'extended_insert': 'bool',
        'backup_dir': 'str',
        'backupsubdir': 'str',
        'cc_storage': 'str',
        'compression': 'bool',
        'compression_level': 'int',
        'db_database': 'str',
        'db_password': 'str',
        'db_privs': 'str',
        'db_username': 'str',
        'data_center': 'int',
        'exec_upgrade_script': 'bool',
        'extended': 'bool',
        'listening_port': 'int',
        'mask_passwords': 'bool',
        'monitor_password': 'str',
        'monitor_user': 'str',
        'use_clustering': 'bool',
        'use_rw_split': 'bool',
        'hostname': 'str',
        'master_address': 'str',
        'include_databases': 'str',
        'install_timescaledb': 'bool',
        'update_lb': 'bool',
        'use_package_for_data_dir': 'bool',
        'encrypt_backup': 'bool',
        'throttle_rate_netbw': 'int',
        'use_pigz': 'bool',
        'use_qpress': 'bool',
        'wsrep_desync': 'bool',
        'xtrabackup_backup_locks': 'bool',
        'xtrabackup_lock_ddl_per_table': 'bool',
        'xtrabackup_parallellism': 'int',
        'verify_backup_delay': 'int',
        'data_dir': 'str',
        'db_user': 'str',
        'disable_firewall': 'bool',
        'disable_selinux': 'bool',
        'enable_uninstall': 'bool',
        'generate_token': 'bool',
        'install_software': 'bool',
        'use_internal_repos': 'bool',
        'local_repository': 'str',
        'enable_mysql_uninstall': 'bool',
        'mysql_semi_sync': 'bool',
        'enable_ssl': 'bool',
        'mongos_conf_template': 'str',
        'mongodb_authdb': 'str',
        'node_type': 'int',
        'overwrite_mysqlchk': 'bool',
        'port': 'int',
        'ssh_keyfile': 'str',
        'ssh_port': 'str',
        'ssh_user': 'str',
        'sudo_password': 'str',
        'user_id': 'int',
        'vendor': 'str',
        'type': 'str',
        'version': 'str',
        'software_package': 'str',
        'server_address': 'str',
        'terminate_db_server': 'bool',
        'xtrabackup_use_memory': 'int',
        'initial': 'bool',
        'reboot': 'bool',
        'slave_address': 'str',
        'force': 'bool',
        'force_stop': 'bool',
        'stop_timeout': 'int',
        'pitr_stop_time': 'str',
        'pitr_stop_log': 'str',
        'pitr_stop_pos': 'int',
        'host_location_uuid': 'str',
        'bootstrap': 'bool',
        'snapshot_locaiton': 'str',
        'snapshot_repository': 'str',
        'storage_host': 'str',
        'upload_backup_data_to_cloud_storage': 'JobsJobJobSpecJobDataUploadBackupDataToCloudStorage',
        'verify_backup': 'BackupScheduleJobJobDataVerifyBackup',
        'config_servers': 'JobsJobJobSpecJobDataConfigServers',
        'mongos_servers': 'list[JobsJobJobSpecJobDataConfigServersMembersInner]',
        'node': 'JobsJobJobSpecJobDataNode',
        'nodes': 'list[JobsJobJobSpecJobDataNodesInner]',
        'node_adresses': 'list[JobsJobJobSpecJobDataNodeAdressesInner]',
        'topology': 'JobsJobJobSpecJobDataTopology',
        'replica_sets': 'list[JobsJobJobSpecJobDataReplicaSetsInner]',
        'with_tags': 'list[str]'
    }

    attribute_map = {
        'action': 'action',
        'addnode': 'addnode',
        'admin_username': 'admin_username',
        'admin_user': 'admin_user',
        'admin_password': 'admin_password',
        'audit_events': 'audit_events',
        'archive_mode': 'archive_mode',
        'backupid': 'backupid',
        'backup_id': 'backup_id',
        'build_from_source': 'build_from_source',
        'cluster_name': 'cluster_name',
        'clusterid': 'clusterid',
        'cluster_type': 'cluster_type',
        'company_id': 'company_id',
        'config_template': 'config_template',
        'backup_failover': 'backup_failover',
        'backup_failover_host': 'backup_failover_host',
        'backup_method': 'backup_method',
        'backup_mysqldump_type': 'backup_mysqldump_type',
        'backup_individual_schemas': 'backup_individual_schemas',
        'backup_retention': 'backup_retention',
        'extended_insert': 'extended_insert',
        'backup_dir': 'backup_dir',
        'backupsubdir': 'backupsubdir',
        'cc_storage': 'cc_storage',
        'compression': 'compression',
        'compression_level': 'compression_level',
        'db_database': 'db_database',
        'db_password': 'db_password',
        'db_privs': 'db_privs',
        'db_username': 'db_username',
        'data_center': 'data_center',
        'exec_upgrade_script': 'exec_upgrade_script',
        'extended': 'extended',
        'listening_port': 'listening_port',
        'mask_passwords': 'mask_passwords',
        'monitor_password': 'monitor_password',
        'monitor_user': 'monitor_user',
        'use_clustering': 'use_clustering',
        'use_rw_split': 'use_rw_split',
        'hostname': 'hostname',
        'master_address': 'master_address',
        'include_databases': 'include_databases',
        'install_timescaledb': 'install_timescaledb',
        'update_lb': 'update_lb',
        'use_package_for_data_dir': 'usePackageForDataDir',
        'encrypt_backup': 'encrypt_backup',
        'throttle_rate_netbw': 'throttle_rate_netbw',
        'use_pigz': 'use_pigz',
        'use_qpress': 'use_qpress',
        'wsrep_desync': 'wsrep_desync',
        'xtrabackup_backup_locks': 'xtrabackup_backup_locks',
        'xtrabackup_lock_ddl_per_table': 'xtrabackup_lock_ddl_per_table',
        'xtrabackup_parallellism': 'xtrabackup_parallellism',
        'verify_backup_delay': 'verify_backup_delay',
        'data_dir': 'data_dir',
        'db_user': 'db_user',
        'disable_firewall': 'disable_firewall',
        'disable_selinux': 'disable_selinux',
        'enable_uninstall': 'enable_uninstall',
        'generate_token': 'generate_token',
        'install_software': 'install_software',
        'use_internal_repos': 'use_internal_repos',
        'local_repository': 'local_repository',
        'enable_mysql_uninstall': 'enable_mysql_uninstall',
        'mysql_semi_sync': 'mysql_semi_sync',
        'enable_ssl': 'enable_ssl',
        'mongos_conf_template': 'mongos_conf_template',
        'mongodb_authdb': 'mongodb_authdb',
        'node_type': 'node_type',
        'overwrite_mysqlchk': 'overwrite_mysqlchk',
        'port': 'port',
        'ssh_keyfile': 'ssh_keyfile',
        'ssh_port': 'ssh_port',
        'ssh_user': 'ssh_user',
        'sudo_password': 'sudo_password',
        'user_id': 'user_id',
        'vendor': 'vendor',
        'type': 'type',
        'version': 'version',
        'software_package': 'software_package',
        'server_address': 'server_address',
        'terminate_db_server': 'terminate_db_server',
        'xtrabackup_use_memory': 'xtrabackup_use_memory',
        'initial': 'initial',
        'reboot': 'reboot',
        'slave_address': 'slave_address',
        'force': 'force',
        'force_stop': 'force_stop',
        'stop_timeout': 'stop_timeout',
        'pitr_stop_time': 'pitr_stop_time',
        'pitr_stop_log': 'pitr_stop_log',
        'pitr_stop_pos': 'pitr_stop_pos',
        'host_location_uuid': 'host_location_uuid',
        'bootstrap': 'bootstrap',
        'snapshot_locaiton': 'snapshot_locaiton',
        'snapshot_repository': 'snapshot_repository',
        'storage_host': 'storage_host',
        'upload_backup_data_to_cloud_storage': 'upload_backup_data_to_cloud_storage',
        'verify_backup': 'verify_backup',
        'config_servers': 'config_servers',
        'mongos_servers': 'mongos_servers',
        'node': 'node',
        'nodes': 'nodes',
        'node_adresses': 'node_adresses',
        'topology': 'topology',
        'replica_sets': 'replica_sets',
        'with_tags': 'with_tags'
    }

    def __init__(self, action=None, addnode=None, admin_username=None, admin_user=None, admin_password=None, audit_events=None, archive_mode=None, backupid=None, backup_id=None, build_from_source=None, cluster_name=None, clusterid=None, cluster_type=None, company_id=None, config_template=None, backup_failover=None, backup_failover_host=None, backup_method=None, backup_mysqldump_type=None, backup_individual_schemas=None, backup_retention=None, extended_insert=None, backup_dir=None, backupsubdir=None, cc_storage=None, compression=None, compression_level=None, db_database=None, db_password=None, db_privs=None, db_username=None, data_center=None, exec_upgrade_script=None, extended=None, listening_port=None, mask_passwords=None, monitor_password=None, monitor_user=None, use_clustering=None, use_rw_split=None, hostname=None, master_address=None, include_databases=None, install_timescaledb=None, update_lb=None, use_package_for_data_dir=None, encrypt_backup=None, throttle_rate_netbw=None, use_pigz=None, use_qpress=None, wsrep_desync=None, xtrabackup_backup_locks=None, xtrabackup_lock_ddl_per_table=None, xtrabackup_parallellism=None, verify_backup_delay=None, data_dir=None, db_user=None, disable_firewall=None, disable_selinux=None, enable_uninstall=None, generate_token=None, install_software=None, use_internal_repos=None, local_repository=None, enable_mysql_uninstall=None, mysql_semi_sync=None, enable_ssl=None, mongos_conf_template=None, mongodb_authdb=None, node_type=None, overwrite_mysqlchk=None, port=None, ssh_keyfile=None, ssh_port=None, ssh_user=None, sudo_password=None, user_id=None, vendor=None, type=None, version=None, software_package=None, server_address=None, terminate_db_server=None, xtrabackup_use_memory=None, initial=None, reboot=None, slave_address=None, force=None, force_stop=None, stop_timeout=None, pitr_stop_time=None, pitr_stop_log=None, pitr_stop_pos=None, host_location_uuid=None, bootstrap=None, snapshot_locaiton=None, snapshot_repository=None, storage_host=None, upload_backup_data_to_cloud_storage=None, verify_backup=None, config_servers=None, mongos_servers=None, node=None, nodes=None, node_adresses=None, topology=None, replica_sets=None, with_tags=None, local_vars_configuration=None):  # noqa: E501
        """JobsJobJobSpecJobData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._addnode = None
        self._admin_username = None
        self._admin_user = None
        self._admin_password = None
        self._audit_events = None
        self._archive_mode = None
        self._backupid = None
        self._backup_id = None
        self._build_from_source = None
        self._cluster_name = None
        self._clusterid = None
        self._cluster_type = None
        self._company_id = None
        self._config_template = None
        self._backup_failover = None
        self._backup_failover_host = None
        self._backup_method = None
        self._backup_mysqldump_type = None
        self._backup_individual_schemas = None
        self._backup_retention = None
        self._extended_insert = None
        self._backup_dir = None
        self._backupsubdir = None
        self._cc_storage = None
        self._compression = None
        self._compression_level = None
        self._db_database = None
        self._db_password = None
        self._db_privs = None
        self._db_username = None
        self._data_center = None
        self._exec_upgrade_script = None
        self._extended = None
        self._listening_port = None
        self._mask_passwords = None
        self._monitor_password = None
        self._monitor_user = None
        self._use_clustering = None
        self._use_rw_split = None
        self._hostname = None
        self._master_address = None
        self._include_databases = None
        self._install_timescaledb = None
        self._update_lb = None
        self._use_package_for_data_dir = None
        self._encrypt_backup = None
        self._throttle_rate_netbw = None
        self._use_pigz = None
        self._use_qpress = None
        self._wsrep_desync = None
        self._xtrabackup_backup_locks = None
        self._xtrabackup_lock_ddl_per_table = None
        self._xtrabackup_parallellism = None
        self._verify_backup_delay = None
        self._data_dir = None
        self._db_user = None
        self._disable_firewall = None
        self._disable_selinux = None
        self._enable_uninstall = None
        self._generate_token = None
        self._install_software = None
        self._use_internal_repos = None
        self._local_repository = None
        self._enable_mysql_uninstall = None
        self._mysql_semi_sync = None
        self._enable_ssl = None
        self._mongos_conf_template = None
        self._mongodb_authdb = None
        self._node_type = None
        self._overwrite_mysqlchk = None
        self._port = None
        self._ssh_keyfile = None
        self._ssh_port = None
        self._ssh_user = None
        self._sudo_password = None
        self._user_id = None
        self._vendor = None
        self._type = None
        self._version = None
        self._software_package = None
        self._server_address = None
        self._terminate_db_server = None
        self._xtrabackup_use_memory = None
        self._initial = None
        self._reboot = None
        self._slave_address = None
        self._force = None
        self._force_stop = None
        self._stop_timeout = None
        self._pitr_stop_time = None
        self._pitr_stop_log = None
        self._pitr_stop_pos = None
        self._host_location_uuid = None
        self._bootstrap = None
        self._snapshot_locaiton = None
        self._snapshot_repository = None
        self._storage_host = None
        self._upload_backup_data_to_cloud_storage = None
        self._verify_backup = None
        self._config_servers = None
        self._mongos_servers = None
        self._node = None
        self._nodes = None
        self._node_adresses = None
        self._topology = None
        self._replica_sets = None
        self._with_tags = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if addnode is not None:
            self.addnode = addnode
        if admin_username is not None:
            self.admin_username = admin_username
        if admin_user is not None:
            self.admin_user = admin_user
        if admin_password is not None:
            self.admin_password = admin_password
        if audit_events is not None:
            self.audit_events = audit_events
        if archive_mode is not None:
            self.archive_mode = archive_mode
        if backupid is not None:
            self.backupid = backupid
        if backup_id is not None:
            self.backup_id = backup_id
        if build_from_source is not None:
            self.build_from_source = build_from_source
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if clusterid is not None:
            self.clusterid = clusterid
        if cluster_type is not None:
            self.cluster_type = cluster_type
        if company_id is not None:
            self.company_id = company_id
        if config_template is not None:
            self.config_template = config_template
        if backup_failover is not None:
            self.backup_failover = backup_failover
        if backup_failover_host is not None:
            self.backup_failover_host = backup_failover_host
        if backup_method is not None:
            self.backup_method = backup_method
        if backup_mysqldump_type is not None:
            self.backup_mysqldump_type = backup_mysqldump_type
        if backup_individual_schemas is not None:
            self.backup_individual_schemas = backup_individual_schemas
        if backup_retention is not None:
            self.backup_retention = backup_retention
        if extended_insert is not None:
            self.extended_insert = extended_insert
        if backup_dir is not None:
            self.backup_dir = backup_dir
        if backupsubdir is not None:
            self.backupsubdir = backupsubdir
        if cc_storage is not None:
            self.cc_storage = cc_storage
        if compression is not None:
            self.compression = compression
        if compression_level is not None:
            self.compression_level = compression_level
        if db_database is not None:
            self.db_database = db_database
        if db_password is not None:
            self.db_password = db_password
        if db_privs is not None:
            self.db_privs = db_privs
        if db_username is not None:
            self.db_username = db_username
        if data_center is not None:
            self.data_center = data_center
        if exec_upgrade_script is not None:
            self.exec_upgrade_script = exec_upgrade_script
        if extended is not None:
            self.extended = extended
        if listening_port is not None:
            self.listening_port = listening_port
        if mask_passwords is not None:
            self.mask_passwords = mask_passwords
        if monitor_password is not None:
            self.monitor_password = monitor_password
        if monitor_user is not None:
            self.monitor_user = monitor_user
        if use_clustering is not None:
            self.use_clustering = use_clustering
        if use_rw_split is not None:
            self.use_rw_split = use_rw_split
        if hostname is not None:
            self.hostname = hostname
        if master_address is not None:
            self.master_address = master_address
        if include_databases is not None:
            self.include_databases = include_databases
        if install_timescaledb is not None:
            self.install_timescaledb = install_timescaledb
        if update_lb is not None:
            self.update_lb = update_lb
        if use_package_for_data_dir is not None:
            self.use_package_for_data_dir = use_package_for_data_dir
        if encrypt_backup is not None:
            self.encrypt_backup = encrypt_backup
        if throttle_rate_netbw is not None:
            self.throttle_rate_netbw = throttle_rate_netbw
        if use_pigz is not None:
            self.use_pigz = use_pigz
        if use_qpress is not None:
            self.use_qpress = use_qpress
        if wsrep_desync is not None:
            self.wsrep_desync = wsrep_desync
        if xtrabackup_backup_locks is not None:
            self.xtrabackup_backup_locks = xtrabackup_backup_locks
        if xtrabackup_lock_ddl_per_table is not None:
            self.xtrabackup_lock_ddl_per_table = xtrabackup_lock_ddl_per_table
        if xtrabackup_parallellism is not None:
            self.xtrabackup_parallellism = xtrabackup_parallellism
        if verify_backup_delay is not None:
            self.verify_backup_delay = verify_backup_delay
        if data_dir is not None:
            self.data_dir = data_dir
        if db_user is not None:
            self.db_user = db_user
        if disable_firewall is not None:
            self.disable_firewall = disable_firewall
        if disable_selinux is not None:
            self.disable_selinux = disable_selinux
        if enable_uninstall is not None:
            self.enable_uninstall = enable_uninstall
        if generate_token is not None:
            self.generate_token = generate_token
        if install_software is not None:
            self.install_software = install_software
        if use_internal_repos is not None:
            self.use_internal_repos = use_internal_repos
        if local_repository is not None:
            self.local_repository = local_repository
        if enable_mysql_uninstall is not None:
            self.enable_mysql_uninstall = enable_mysql_uninstall
        if mysql_semi_sync is not None:
            self.mysql_semi_sync = mysql_semi_sync
        if enable_ssl is not None:
            self.enable_ssl = enable_ssl
        if mongos_conf_template is not None:
            self.mongos_conf_template = mongos_conf_template
        if mongodb_authdb is not None:
            self.mongodb_authdb = mongodb_authdb
        if node_type is not None:
            self.node_type = node_type
        if overwrite_mysqlchk is not None:
            self.overwrite_mysqlchk = overwrite_mysqlchk
        if port is not None:
            self.port = port
        if ssh_keyfile is not None:
            self.ssh_keyfile = ssh_keyfile
        if ssh_port is not None:
            self.ssh_port = ssh_port
        if ssh_user is not None:
            self.ssh_user = ssh_user
        if sudo_password is not None:
            self.sudo_password = sudo_password
        if user_id is not None:
            self.user_id = user_id
        if vendor is not None:
            self.vendor = vendor
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if software_package is not None:
            self.software_package = software_package
        if server_address is not None:
            self.server_address = server_address
        if terminate_db_server is not None:
            self.terminate_db_server = terminate_db_server
        if xtrabackup_use_memory is not None:
            self.xtrabackup_use_memory = xtrabackup_use_memory
        if initial is not None:
            self.initial = initial
        if reboot is not None:
            self.reboot = reboot
        if slave_address is not None:
            self.slave_address = slave_address
        if force is not None:
            self.force = force
        if force_stop is not None:
            self.force_stop = force_stop
        if stop_timeout is not None:
            self.stop_timeout = stop_timeout
        if pitr_stop_time is not None:
            self.pitr_stop_time = pitr_stop_time
        if pitr_stop_log is not None:
            self.pitr_stop_log = pitr_stop_log
        if pitr_stop_pos is not None:
            self.pitr_stop_pos = pitr_stop_pos
        if host_location_uuid is not None:
            self.host_location_uuid = host_location_uuid
        if bootstrap is not None:
            self.bootstrap = bootstrap
        if snapshot_locaiton is not None:
            self.snapshot_locaiton = snapshot_locaiton
        if snapshot_repository is not None:
            self.snapshot_repository = snapshot_repository
        if storage_host is not None:
            self.storage_host = storage_host
        if upload_backup_data_to_cloud_storage is not None:
            self.upload_backup_data_to_cloud_storage = upload_backup_data_to_cloud_storage
        if verify_backup is not None:
            self.verify_backup = verify_backup
        if config_servers is not None:
            self.config_servers = config_servers
        if mongos_servers is not None:
            self.mongos_servers = mongos_servers
        if node is not None:
            self.node = node
        if nodes is not None:
            self.nodes = nodes
        if node_adresses is not None:
            self.node_adresses = node_adresses
        if topology is not None:
            self.topology = topology
        if replica_sets is not None:
            self.replica_sets = replica_sets
        if with_tags is not None:
            self.with_tags = with_tags

    @property
    def action(self):
        """Gets the action of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The action of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this JobsJobJobSpecJobData.


        :param action: The action of this JobsJobJobSpecJobData.  # noqa: E501
        :type action: str
        """
        allowed_values = ["enable", "setup", "setupHaProxy", "setupProxySql"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def addnode(self):
        """Gets the addnode of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The addnode of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._addnode

    @addnode.setter
    def addnode(self, addnode):
        """Sets the addnode of this JobsJobJobSpecJobData.


        :param addnode: The addnode of this JobsJobJobSpecJobData.  # noqa: E501
        :type addnode: bool
        """

        self._addnode = addnode

    @property
    def admin_username(self):
        """Gets the admin_username of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The admin_username of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this JobsJobJobSpecJobData.


        :param admin_username: The admin_username of this JobsJobJobSpecJobData.  # noqa: E501
        :type admin_username: str
        """

        self._admin_username = admin_username

    @property
    def admin_user(self):
        """Gets the admin_user of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The admin_user of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this JobsJobJobSpecJobData.


        :param admin_user: The admin_user of this JobsJobJobSpecJobData.  # noqa: E501
        :type admin_user: str
        """

        self._admin_user = admin_user

    @property
    def admin_password(self):
        """Gets the admin_password of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The admin_password of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this JobsJobJobSpecJobData.


        :param admin_password: The admin_password of this JobsJobJobSpecJobData.  # noqa: E501
        :type admin_password: str
        """

        self._admin_password = admin_password

    @property
    def audit_events(self):
        """Gets the audit_events of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The audit_events of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._audit_events

    @audit_events.setter
    def audit_events(self, audit_events):
        """Sets the audit_events of this JobsJobJobSpecJobData.


        :param audit_events: The audit_events of this JobsJobJobSpecJobData.  # noqa: E501
        :type audit_events: str
        """

        self._audit_events = audit_events

    @property
    def archive_mode(self):
        """Gets the archive_mode of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The archive_mode of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._archive_mode

    @archive_mode.setter
    def archive_mode(self, archive_mode):
        """Sets the archive_mode of this JobsJobJobSpecJobData.


        :param archive_mode: The archive_mode of this JobsJobJobSpecJobData.  # noqa: E501
        :type archive_mode: str
        """
        allowed_values = ["always"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and archive_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `archive_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(archive_mode, allowed_values)
            )

        self._archive_mode = archive_mode

    @property
    def backupid(self):
        """Gets the backupid of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backupid of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._backupid

    @backupid.setter
    def backupid(self, backupid):
        """Sets the backupid of this JobsJobJobSpecJobData.


        :param backupid: The backupid of this JobsJobJobSpecJobData.  # noqa: E501
        :type backupid: int
        """

        self._backupid = backupid

    @property
    def backup_id(self):
        """Gets the backup_id of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_id of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this JobsJobJobSpecJobData.


        :param backup_id: The backup_id of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_id: int
        """

        self._backup_id = backup_id

    @property
    def build_from_source(self):
        """Gets the build_from_source of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The build_from_source of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._build_from_source

    @build_from_source.setter
    def build_from_source(self, build_from_source):
        """Sets the build_from_source of this JobsJobJobSpecJobData.


        :param build_from_source: The build_from_source of this JobsJobJobSpecJobData.  # noqa: E501
        :type build_from_source: bool
        """

        self._build_from_source = build_from_source

    @property
    def cluster_name(self):
        """Gets the cluster_name of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The cluster_name of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this JobsJobJobSpecJobData.


        :param cluster_name: The cluster_name of this JobsJobJobSpecJobData.  # noqa: E501
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def clusterid(self):
        """Gets the clusterid of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The clusterid of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._clusterid

    @clusterid.setter
    def clusterid(self, clusterid):
        """Sets the clusterid of this JobsJobJobSpecJobData.


        :param clusterid: The clusterid of this JobsJobJobSpecJobData.  # noqa: E501
        :type clusterid: int
        """

        self._clusterid = clusterid

    @property
    def cluster_type(self):
        """Gets the cluster_type of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The cluster_type of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this JobsJobJobSpecJobData.


        :param cluster_type: The cluster_type of this JobsJobJobSpecJobData.  # noqa: E501
        :type cluster_type: str
        """
        allowed_values = ["mssql_single", "redis", "mongodb", "mssql_ao_async", "postgresql_single", "replication", "galera", "elastic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cluster_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def company_id(self):
        """Gets the company_id of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The company_id of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this JobsJobJobSpecJobData.


        :param company_id: The company_id of this JobsJobJobSpecJobData.  # noqa: E501
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def config_template(self):
        """Gets the config_template of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The config_template of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._config_template

    @config_template.setter
    def config_template(self, config_template):
        """Sets the config_template of this JobsJobJobSpecJobData.


        :param config_template: The config_template of this JobsJobJobSpecJobData.  # noqa: E501
        :type config_template: str
        """

        self._config_template = config_template

    @property
    def backup_failover(self):
        """Gets the backup_failover of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_failover of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._backup_failover

    @backup_failover.setter
    def backup_failover(self, backup_failover):
        """Sets the backup_failover of this JobsJobJobSpecJobData.


        :param backup_failover: The backup_failover of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_failover: bool
        """

        self._backup_failover = backup_failover

    @property
    def backup_failover_host(self):
        """Gets the backup_failover_host of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_failover_host of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._backup_failover_host

    @backup_failover_host.setter
    def backup_failover_host(self, backup_failover_host):
        """Sets the backup_failover_host of this JobsJobJobSpecJobData.


        :param backup_failover_host: The backup_failover_host of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_failover_host: str
        """
        allowed_values = ["auto"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and backup_failover_host not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `backup_failover_host` ({0}), must be one of {1}"  # noqa: E501
                .format(backup_failover_host, allowed_values)
            )

        self._backup_failover_host = backup_failover_host

    @property
    def backup_method(self):
        """Gets the backup_method of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_method of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._backup_method

    @backup_method.setter
    def backup_method(self, backup_method):
        """Sets the backup_method of this JobsJobJobSpecJobData.


        :param backup_method: The backup_method of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_method: str
        """
        allowed_values = ["pg_basebackup", "xtrabackupfull", "xtrabackupincr", "pgbackrestfull", "pgbackrestincr", "pgbackrestdiff", "mysqldump", "mongodump", "percona-backup-mongodb", "pgdumpall", "mariabackupfull", "mariabackupincr", "mssqlcert", "ndb"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and backup_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `backup_method` ({0}), must be one of {1}"  # noqa: E501
                .format(backup_method, allowed_values)
            )

        self._backup_method = backup_method

    @property
    def backup_mysqldump_type(self):
        """Gets the backup_mysqldump_type of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_mysqldump_type of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._backup_mysqldump_type

    @backup_mysqldump_type.setter
    def backup_mysqldump_type(self, backup_mysqldump_type):
        """Sets the backup_mysqldump_type of this JobsJobJobSpecJobData.


        :param backup_mysqldump_type: The backup_mysqldump_type of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_mysqldump_type: str
        """
        allowed_values = ["Complete", "SchemaAndData", "SchemaOnly", "DataOnly", "MySQLDbOnly"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and backup_mysqldump_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `backup_mysqldump_type` ({0}), must be one of {1}"  # noqa: E501
                .format(backup_mysqldump_type, allowed_values)
            )

        self._backup_mysqldump_type = backup_mysqldump_type

    @property
    def backup_individual_schemas(self):
        """Gets the backup_individual_schemas of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_individual_schemas of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._backup_individual_schemas

    @backup_individual_schemas.setter
    def backup_individual_schemas(self, backup_individual_schemas):
        """Sets the backup_individual_schemas of this JobsJobJobSpecJobData.


        :param backup_individual_schemas: The backup_individual_schemas of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_individual_schemas: bool
        """

        self._backup_individual_schemas = backup_individual_schemas

    @property
    def backup_retention(self):
        """Gets the backup_retention of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_retention of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._backup_retention

    @backup_retention.setter
    def backup_retention(self, backup_retention):
        """Sets the backup_retention of this JobsJobJobSpecJobData.


        :param backup_retention: The backup_retention of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_retention: int
        """

        self._backup_retention = backup_retention

    @property
    def extended_insert(self):
        """Gets the extended_insert of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The extended_insert of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._extended_insert

    @extended_insert.setter
    def extended_insert(self, extended_insert):
        """Sets the extended_insert of this JobsJobJobSpecJobData.


        :param extended_insert: The extended_insert of this JobsJobJobSpecJobData.  # noqa: E501
        :type extended_insert: bool
        """

        self._extended_insert = extended_insert

    @property
    def backup_dir(self):
        """Gets the backup_dir of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backup_dir of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._backup_dir

    @backup_dir.setter
    def backup_dir(self, backup_dir):
        """Sets the backup_dir of this JobsJobJobSpecJobData.


        :param backup_dir: The backup_dir of this JobsJobJobSpecJobData.  # noqa: E501
        :type backup_dir: str
        """

        self._backup_dir = backup_dir

    @property
    def backupsubdir(self):
        """Gets the backupsubdir of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The backupsubdir of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._backupsubdir

    @backupsubdir.setter
    def backupsubdir(self, backupsubdir):
        """Sets the backupsubdir of this JobsJobJobSpecJobData.


        :param backupsubdir: The backupsubdir of this JobsJobJobSpecJobData.  # noqa: E501
        :type backupsubdir: str
        """

        self._backupsubdir = backupsubdir

    @property
    def cc_storage(self):
        """Gets the cc_storage of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The cc_storage of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._cc_storage

    @cc_storage.setter
    def cc_storage(self, cc_storage):
        """Sets the cc_storage of this JobsJobJobSpecJobData.


        :param cc_storage: The cc_storage of this JobsJobJobSpecJobData.  # noqa: E501
        :type cc_storage: str
        """

        self._cc_storage = cc_storage

    @property
    def compression(self):
        """Gets the compression of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The compression of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this JobsJobJobSpecJobData.


        :param compression: The compression of this JobsJobJobSpecJobData.  # noqa: E501
        :type compression: bool
        """

        self._compression = compression

    @property
    def compression_level(self):
        """Gets the compression_level of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The compression_level of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._compression_level

    @compression_level.setter
    def compression_level(self, compression_level):
        """Sets the compression_level of this JobsJobJobSpecJobData.


        :param compression_level: The compression_level of this JobsJobJobSpecJobData.  # noqa: E501
        :type compression_level: int
        """

        self._compression_level = compression_level

    @property
    def db_database(self):
        """Gets the db_database of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The db_database of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._db_database

    @db_database.setter
    def db_database(self, db_database):
        """Sets the db_database of this JobsJobJobSpecJobData.


        :param db_database: The db_database of this JobsJobJobSpecJobData.  # noqa: E501
        :type db_database: str
        """

        self._db_database = db_database

    @property
    def db_password(self):
        """Gets the db_password of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The db_password of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._db_password

    @db_password.setter
    def db_password(self, db_password):
        """Sets the db_password of this JobsJobJobSpecJobData.


        :param db_password: The db_password of this JobsJobJobSpecJobData.  # noqa: E501
        :type db_password: str
        """

        self._db_password = db_password

    @property
    def db_privs(self):
        """Gets the db_privs of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The db_privs of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._db_privs

    @db_privs.setter
    def db_privs(self, db_privs):
        """Sets the db_privs of this JobsJobJobSpecJobData.


        :param db_privs: The db_privs of this JobsJobJobSpecJobData.  # noqa: E501
        :type db_privs: str
        """

        self._db_privs = db_privs

    @property
    def db_username(self):
        """Gets the db_username of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The db_username of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._db_username

    @db_username.setter
    def db_username(self, db_username):
        """Sets the db_username of this JobsJobJobSpecJobData.


        :param db_username: The db_username of this JobsJobJobSpecJobData.  # noqa: E501
        :type db_username: str
        """

        self._db_username = db_username

    @property
    def data_center(self):
        """Gets the data_center of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The data_center of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._data_center

    @data_center.setter
    def data_center(self, data_center):
        """Sets the data_center of this JobsJobJobSpecJobData.


        :param data_center: The data_center of this JobsJobJobSpecJobData.  # noqa: E501
        :type data_center: int
        """

        self._data_center = data_center

    @property
    def exec_upgrade_script(self):
        """Gets the exec_upgrade_script of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The exec_upgrade_script of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._exec_upgrade_script

    @exec_upgrade_script.setter
    def exec_upgrade_script(self, exec_upgrade_script):
        """Sets the exec_upgrade_script of this JobsJobJobSpecJobData.


        :param exec_upgrade_script: The exec_upgrade_script of this JobsJobJobSpecJobData.  # noqa: E501
        :type exec_upgrade_script: bool
        """

        self._exec_upgrade_script = exec_upgrade_script

    @property
    def extended(self):
        """Gets the extended of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The extended of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._extended

    @extended.setter
    def extended(self, extended):
        """Sets the extended of this JobsJobJobSpecJobData.


        :param extended: The extended of this JobsJobJobSpecJobData.  # noqa: E501
        :type extended: bool
        """

        self._extended = extended

    @property
    def listening_port(self):
        """Gets the listening_port of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The listening_port of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._listening_port

    @listening_port.setter
    def listening_port(self, listening_port):
        """Sets the listening_port of this JobsJobJobSpecJobData.


        :param listening_port: The listening_port of this JobsJobJobSpecJobData.  # noqa: E501
        :type listening_port: int
        """

        self._listening_port = listening_port

    @property
    def mask_passwords(self):
        """Gets the mask_passwords of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The mask_passwords of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._mask_passwords

    @mask_passwords.setter
    def mask_passwords(self, mask_passwords):
        """Sets the mask_passwords of this JobsJobJobSpecJobData.


        :param mask_passwords: The mask_passwords of this JobsJobJobSpecJobData.  # noqa: E501
        :type mask_passwords: bool
        """

        self._mask_passwords = mask_passwords

    @property
    def monitor_password(self):
        """Gets the monitor_password of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The monitor_password of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._monitor_password

    @monitor_password.setter
    def monitor_password(self, monitor_password):
        """Sets the monitor_password of this JobsJobJobSpecJobData.


        :param monitor_password: The monitor_password of this JobsJobJobSpecJobData.  # noqa: E501
        :type monitor_password: str
        """

        self._monitor_password = monitor_password

    @property
    def monitor_user(self):
        """Gets the monitor_user of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The monitor_user of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._monitor_user

    @monitor_user.setter
    def monitor_user(self, monitor_user):
        """Sets the monitor_user of this JobsJobJobSpecJobData.


        :param monitor_user: The monitor_user of this JobsJobJobSpecJobData.  # noqa: E501
        :type monitor_user: str
        """

        self._monitor_user = monitor_user

    @property
    def use_clustering(self):
        """Gets the use_clustering of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The use_clustering of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._use_clustering

    @use_clustering.setter
    def use_clustering(self, use_clustering):
        """Sets the use_clustering of this JobsJobJobSpecJobData.


        :param use_clustering: The use_clustering of this JobsJobJobSpecJobData.  # noqa: E501
        :type use_clustering: bool
        """

        self._use_clustering = use_clustering

    @property
    def use_rw_split(self):
        """Gets the use_rw_split of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The use_rw_split of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._use_rw_split

    @use_rw_split.setter
    def use_rw_split(self, use_rw_split):
        """Sets the use_rw_split of this JobsJobJobSpecJobData.


        :param use_rw_split: The use_rw_split of this JobsJobJobSpecJobData.  # noqa: E501
        :type use_rw_split: bool
        """

        self._use_rw_split = use_rw_split

    @property
    def hostname(self):
        """Gets the hostname of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The hostname of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this JobsJobJobSpecJobData.


        :param hostname: The hostname of this JobsJobJobSpecJobData.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def master_address(self):
        """Gets the master_address of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The master_address of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._master_address

    @master_address.setter
    def master_address(self, master_address):
        """Sets the master_address of this JobsJobJobSpecJobData.


        :param master_address: The master_address of this JobsJobJobSpecJobData.  # noqa: E501
        :type master_address: str
        """

        self._master_address = master_address

    @property
    def include_databases(self):
        """Gets the include_databases of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The include_databases of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._include_databases

    @include_databases.setter
    def include_databases(self, include_databases):
        """Sets the include_databases of this JobsJobJobSpecJobData.


        :param include_databases: The include_databases of this JobsJobJobSpecJobData.  # noqa: E501
        :type include_databases: str
        """

        self._include_databases = include_databases

    @property
    def install_timescaledb(self):
        """Gets the install_timescaledb of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The install_timescaledb of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._install_timescaledb

    @install_timescaledb.setter
    def install_timescaledb(self, install_timescaledb):
        """Sets the install_timescaledb of this JobsJobJobSpecJobData.


        :param install_timescaledb: The install_timescaledb of this JobsJobJobSpecJobData.  # noqa: E501
        :type install_timescaledb: bool
        """

        self._install_timescaledb = install_timescaledb

    @property
    def update_lb(self):
        """Gets the update_lb of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The update_lb of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._update_lb

    @update_lb.setter
    def update_lb(self, update_lb):
        """Sets the update_lb of this JobsJobJobSpecJobData.


        :param update_lb: The update_lb of this JobsJobJobSpecJobData.  # noqa: E501
        :type update_lb: bool
        """

        self._update_lb = update_lb

    @property
    def use_package_for_data_dir(self):
        """Gets the use_package_for_data_dir of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The use_package_for_data_dir of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._use_package_for_data_dir

    @use_package_for_data_dir.setter
    def use_package_for_data_dir(self, use_package_for_data_dir):
        """Sets the use_package_for_data_dir of this JobsJobJobSpecJobData.


        :param use_package_for_data_dir: The use_package_for_data_dir of this JobsJobJobSpecJobData.  # noqa: E501
        :type use_package_for_data_dir: bool
        """

        self._use_package_for_data_dir = use_package_for_data_dir

    @property
    def encrypt_backup(self):
        """Gets the encrypt_backup of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The encrypt_backup of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_backup

    @encrypt_backup.setter
    def encrypt_backup(self, encrypt_backup):
        """Sets the encrypt_backup of this JobsJobJobSpecJobData.


        :param encrypt_backup: The encrypt_backup of this JobsJobJobSpecJobData.  # noqa: E501
        :type encrypt_backup: bool
        """

        self._encrypt_backup = encrypt_backup

    @property
    def throttle_rate_netbw(self):
        """Gets the throttle_rate_netbw of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The throttle_rate_netbw of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._throttle_rate_netbw

    @throttle_rate_netbw.setter
    def throttle_rate_netbw(self, throttle_rate_netbw):
        """Sets the throttle_rate_netbw of this JobsJobJobSpecJobData.


        :param throttle_rate_netbw: The throttle_rate_netbw of this JobsJobJobSpecJobData.  # noqa: E501
        :type throttle_rate_netbw: int
        """

        self._throttle_rate_netbw = throttle_rate_netbw

    @property
    def use_pigz(self):
        """Gets the use_pigz of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The use_pigz of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._use_pigz

    @use_pigz.setter
    def use_pigz(self, use_pigz):
        """Sets the use_pigz of this JobsJobJobSpecJobData.


        :param use_pigz: The use_pigz of this JobsJobJobSpecJobData.  # noqa: E501
        :type use_pigz: bool
        """

        self._use_pigz = use_pigz

    @property
    def use_qpress(self):
        """Gets the use_qpress of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The use_qpress of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._use_qpress

    @use_qpress.setter
    def use_qpress(self, use_qpress):
        """Sets the use_qpress of this JobsJobJobSpecJobData.


        :param use_qpress: The use_qpress of this JobsJobJobSpecJobData.  # noqa: E501
        :type use_qpress: bool
        """

        self._use_qpress = use_qpress

    @property
    def wsrep_desync(self):
        """Gets the wsrep_desync of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The wsrep_desync of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._wsrep_desync

    @wsrep_desync.setter
    def wsrep_desync(self, wsrep_desync):
        """Sets the wsrep_desync of this JobsJobJobSpecJobData.


        :param wsrep_desync: The wsrep_desync of this JobsJobJobSpecJobData.  # noqa: E501
        :type wsrep_desync: bool
        """

        self._wsrep_desync = wsrep_desync

    @property
    def xtrabackup_backup_locks(self):
        """Gets the xtrabackup_backup_locks of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The xtrabackup_backup_locks of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._xtrabackup_backup_locks

    @xtrabackup_backup_locks.setter
    def xtrabackup_backup_locks(self, xtrabackup_backup_locks):
        """Sets the xtrabackup_backup_locks of this JobsJobJobSpecJobData.


        :param xtrabackup_backup_locks: The xtrabackup_backup_locks of this JobsJobJobSpecJobData.  # noqa: E501
        :type xtrabackup_backup_locks: bool
        """

        self._xtrabackup_backup_locks = xtrabackup_backup_locks

    @property
    def xtrabackup_lock_ddl_per_table(self):
        """Gets the xtrabackup_lock_ddl_per_table of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The xtrabackup_lock_ddl_per_table of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._xtrabackup_lock_ddl_per_table

    @xtrabackup_lock_ddl_per_table.setter
    def xtrabackup_lock_ddl_per_table(self, xtrabackup_lock_ddl_per_table):
        """Sets the xtrabackup_lock_ddl_per_table of this JobsJobJobSpecJobData.


        :param xtrabackup_lock_ddl_per_table: The xtrabackup_lock_ddl_per_table of this JobsJobJobSpecJobData.  # noqa: E501
        :type xtrabackup_lock_ddl_per_table: bool
        """

        self._xtrabackup_lock_ddl_per_table = xtrabackup_lock_ddl_per_table

    @property
    def xtrabackup_parallellism(self):
        """Gets the xtrabackup_parallellism of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The xtrabackup_parallellism of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._xtrabackup_parallellism

    @xtrabackup_parallellism.setter
    def xtrabackup_parallellism(self, xtrabackup_parallellism):
        """Sets the xtrabackup_parallellism of this JobsJobJobSpecJobData.


        :param xtrabackup_parallellism: The xtrabackup_parallellism of this JobsJobJobSpecJobData.  # noqa: E501
        :type xtrabackup_parallellism: int
        """

        self._xtrabackup_parallellism = xtrabackup_parallellism

    @property
    def verify_backup_delay(self):
        """Gets the verify_backup_delay of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The verify_backup_delay of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._verify_backup_delay

    @verify_backup_delay.setter
    def verify_backup_delay(self, verify_backup_delay):
        """Sets the verify_backup_delay of this JobsJobJobSpecJobData.


        :param verify_backup_delay: The verify_backup_delay of this JobsJobJobSpecJobData.  # noqa: E501
        :type verify_backup_delay: int
        """

        self._verify_backup_delay = verify_backup_delay

    @property
    def data_dir(self):
        """Gets the data_dir of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The data_dir of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._data_dir

    @data_dir.setter
    def data_dir(self, data_dir):
        """Sets the data_dir of this JobsJobJobSpecJobData.


        :param data_dir: The data_dir of this JobsJobJobSpecJobData.  # noqa: E501
        :type data_dir: str
        """

        self._data_dir = data_dir

    @property
    def db_user(self):
        """Gets the db_user of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The db_user of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._db_user

    @db_user.setter
    def db_user(self, db_user):
        """Sets the db_user of this JobsJobJobSpecJobData.


        :param db_user: The db_user of this JobsJobJobSpecJobData.  # noqa: E501
        :type db_user: str
        """

        self._db_user = db_user

    @property
    def disable_firewall(self):
        """Gets the disable_firewall of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The disable_firewall of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._disable_firewall

    @disable_firewall.setter
    def disable_firewall(self, disable_firewall):
        """Sets the disable_firewall of this JobsJobJobSpecJobData.


        :param disable_firewall: The disable_firewall of this JobsJobJobSpecJobData.  # noqa: E501
        :type disable_firewall: bool
        """

        self._disable_firewall = disable_firewall

    @property
    def disable_selinux(self):
        """Gets the disable_selinux of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The disable_selinux of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._disable_selinux

    @disable_selinux.setter
    def disable_selinux(self, disable_selinux):
        """Sets the disable_selinux of this JobsJobJobSpecJobData.


        :param disable_selinux: The disable_selinux of this JobsJobJobSpecJobData.  # noqa: E501
        :type disable_selinux: bool
        """

        self._disable_selinux = disable_selinux

    @property
    def enable_uninstall(self):
        """Gets the enable_uninstall of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The enable_uninstall of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_uninstall

    @enable_uninstall.setter
    def enable_uninstall(self, enable_uninstall):
        """Sets the enable_uninstall of this JobsJobJobSpecJobData.


        :param enable_uninstall: The enable_uninstall of this JobsJobJobSpecJobData.  # noqa: E501
        :type enable_uninstall: bool
        """

        self._enable_uninstall = enable_uninstall

    @property
    def generate_token(self):
        """Gets the generate_token of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The generate_token of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._generate_token

    @generate_token.setter
    def generate_token(self, generate_token):
        """Sets the generate_token of this JobsJobJobSpecJobData.


        :param generate_token: The generate_token of this JobsJobJobSpecJobData.  # noqa: E501
        :type generate_token: bool
        """

        self._generate_token = generate_token

    @property
    def install_software(self):
        """Gets the install_software of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The install_software of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._install_software

    @install_software.setter
    def install_software(self, install_software):
        """Sets the install_software of this JobsJobJobSpecJobData.


        :param install_software: The install_software of this JobsJobJobSpecJobData.  # noqa: E501
        :type install_software: bool
        """

        self._install_software = install_software

    @property
    def use_internal_repos(self):
        """Gets the use_internal_repos of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The use_internal_repos of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._use_internal_repos

    @use_internal_repos.setter
    def use_internal_repos(self, use_internal_repos):
        """Sets the use_internal_repos of this JobsJobJobSpecJobData.


        :param use_internal_repos: The use_internal_repos of this JobsJobJobSpecJobData.  # noqa: E501
        :type use_internal_repos: bool
        """

        self._use_internal_repos = use_internal_repos

    @property
    def local_repository(self):
        """Gets the local_repository of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The local_repository of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._local_repository

    @local_repository.setter
    def local_repository(self, local_repository):
        """Sets the local_repository of this JobsJobJobSpecJobData.


        :param local_repository: The local_repository of this JobsJobJobSpecJobData.  # noqa: E501
        :type local_repository: str
        """

        self._local_repository = local_repository

    @property
    def enable_mysql_uninstall(self):
        """Gets the enable_mysql_uninstall of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The enable_mysql_uninstall of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_mysql_uninstall

    @enable_mysql_uninstall.setter
    def enable_mysql_uninstall(self, enable_mysql_uninstall):
        """Sets the enable_mysql_uninstall of this JobsJobJobSpecJobData.


        :param enable_mysql_uninstall: The enable_mysql_uninstall of this JobsJobJobSpecJobData.  # noqa: E501
        :type enable_mysql_uninstall: bool
        """

        self._enable_mysql_uninstall = enable_mysql_uninstall

    @property
    def mysql_semi_sync(self):
        """Gets the mysql_semi_sync of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The mysql_semi_sync of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._mysql_semi_sync

    @mysql_semi_sync.setter
    def mysql_semi_sync(self, mysql_semi_sync):
        """Sets the mysql_semi_sync of this JobsJobJobSpecJobData.


        :param mysql_semi_sync: The mysql_semi_sync of this JobsJobJobSpecJobData.  # noqa: E501
        :type mysql_semi_sync: bool
        """

        self._mysql_semi_sync = mysql_semi_sync

    @property
    def enable_ssl(self):
        """Gets the enable_ssl of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The enable_ssl of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ssl

    @enable_ssl.setter
    def enable_ssl(self, enable_ssl):
        """Sets the enable_ssl of this JobsJobJobSpecJobData.


        :param enable_ssl: The enable_ssl of this JobsJobJobSpecJobData.  # noqa: E501
        :type enable_ssl: bool
        """

        self._enable_ssl = enable_ssl

    @property
    def mongos_conf_template(self):
        """Gets the mongos_conf_template of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The mongos_conf_template of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._mongos_conf_template

    @mongos_conf_template.setter
    def mongos_conf_template(self, mongos_conf_template):
        """Sets the mongos_conf_template of this JobsJobJobSpecJobData.


        :param mongos_conf_template: The mongos_conf_template of this JobsJobJobSpecJobData.  # noqa: E501
        :type mongos_conf_template: str
        """

        self._mongos_conf_template = mongos_conf_template

    @property
    def mongodb_authdb(self):
        """Gets the mongodb_authdb of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The mongodb_authdb of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_authdb

    @mongodb_authdb.setter
    def mongodb_authdb(self, mongodb_authdb):
        """Sets the mongodb_authdb of this JobsJobJobSpecJobData.


        :param mongodb_authdb: The mongodb_authdb of this JobsJobJobSpecJobData.  # noqa: E501
        :type mongodb_authdb: str
        """

        self._mongodb_authdb = mongodb_authdb

    @property
    def node_type(self):
        """Gets the node_type of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The node_type of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this JobsJobJobSpecJobData.


        :param node_type: The node_type of this JobsJobJobSpecJobData.  # noqa: E501
        :type node_type: int
        """

        self._node_type = node_type

    @property
    def overwrite_mysqlchk(self):
        """Gets the overwrite_mysqlchk of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The overwrite_mysqlchk of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite_mysqlchk

    @overwrite_mysqlchk.setter
    def overwrite_mysqlchk(self, overwrite_mysqlchk):
        """Sets the overwrite_mysqlchk of this JobsJobJobSpecJobData.


        :param overwrite_mysqlchk: The overwrite_mysqlchk of this JobsJobJobSpecJobData.  # noqa: E501
        :type overwrite_mysqlchk: bool
        """

        self._overwrite_mysqlchk = overwrite_mysqlchk

    @property
    def port(self):
        """Gets the port of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The port of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this JobsJobJobSpecJobData.


        :param port: The port of this JobsJobJobSpecJobData.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def ssh_keyfile(self):
        """Gets the ssh_keyfile of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The ssh_keyfile of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._ssh_keyfile

    @ssh_keyfile.setter
    def ssh_keyfile(self, ssh_keyfile):
        """Sets the ssh_keyfile of this JobsJobJobSpecJobData.


        :param ssh_keyfile: The ssh_keyfile of this JobsJobJobSpecJobData.  # noqa: E501
        :type ssh_keyfile: str
        """

        self._ssh_keyfile = ssh_keyfile

    @property
    def ssh_port(self):
        """Gets the ssh_port of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The ssh_port of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """Sets the ssh_port of this JobsJobJobSpecJobData.


        :param ssh_port: The ssh_port of this JobsJobJobSpecJobData.  # noqa: E501
        :type ssh_port: str
        """

        self._ssh_port = ssh_port

    @property
    def ssh_user(self):
        """Gets the ssh_user of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The ssh_user of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._ssh_user

    @ssh_user.setter
    def ssh_user(self, ssh_user):
        """Sets the ssh_user of this JobsJobJobSpecJobData.


        :param ssh_user: The ssh_user of this JobsJobJobSpecJobData.  # noqa: E501
        :type ssh_user: str
        """

        self._ssh_user = ssh_user

    @property
    def sudo_password(self):
        """Gets the sudo_password of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The sudo_password of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._sudo_password

    @sudo_password.setter
    def sudo_password(self, sudo_password):
        """Sets the sudo_password of this JobsJobJobSpecJobData.


        :param sudo_password: The sudo_password of this JobsJobJobSpecJobData.  # noqa: E501
        :type sudo_password: str
        """

        self._sudo_password = sudo_password

    @property
    def user_id(self):
        """Gets the user_id of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The user_id of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JobsJobJobSpecJobData.


        :param user_id: The user_id of this JobsJobJobSpecJobData.  # noqa: E501
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def vendor(self):
        """Gets the vendor of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The vendor of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this JobsJobJobSpecJobData.


        :param vendor: The vendor of this JobsJobJobSpecJobData.  # noqa: E501
        :type vendor: str
        """
        allowed_values = ["default", "percona", "microsoft", "redis", "oracle", "mariadb", "elasticsearch", "10gen"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and vendor not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `vendor` ({0}), must be one of {1}"  # noqa: E501
                .format(vendor, allowed_values)
            )

        self._vendor = vendor

    @property
    def type(self):
        """Gets the type of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The type of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobsJobJobSpecJobData.


        :param type: The type of this JobsJobJobSpecJobData.  # noqa: E501
        :type type: str
        """
        allowed_values = ["postgresql", "redis", "microsoft", "elasticsearch", "mysql", "mongodb"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The version of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JobsJobJobSpecJobData.


        :param version: The version of this JobsJobJobSpecJobData.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def software_package(self):
        """Gets the software_package of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The software_package of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._software_package

    @software_package.setter
    def software_package(self, software_package):
        """Sets the software_package of this JobsJobJobSpecJobData.


        :param software_package: The software_package of this JobsJobJobSpecJobData.  # noqa: E501
        :type software_package: str
        """

        self._software_package = software_package

    @property
    def server_address(self):
        """Gets the server_address of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The server_address of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._server_address

    @server_address.setter
    def server_address(self, server_address):
        """Sets the server_address of this JobsJobJobSpecJobData.


        :param server_address: The server_address of this JobsJobJobSpecJobData.  # noqa: E501
        :type server_address: str
        """

        self._server_address = server_address

    @property
    def terminate_db_server(self):
        """Gets the terminate_db_server of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The terminate_db_server of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._terminate_db_server

    @terminate_db_server.setter
    def terminate_db_server(self, terminate_db_server):
        """Sets the terminate_db_server of this JobsJobJobSpecJobData.


        :param terminate_db_server: The terminate_db_server of this JobsJobJobSpecJobData.  # noqa: E501
        :type terminate_db_server: bool
        """

        self._terminate_db_server = terminate_db_server

    @property
    def xtrabackup_use_memory(self):
        """Gets the xtrabackup_use_memory of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The xtrabackup_use_memory of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._xtrabackup_use_memory

    @xtrabackup_use_memory.setter
    def xtrabackup_use_memory(self, xtrabackup_use_memory):
        """Sets the xtrabackup_use_memory of this JobsJobJobSpecJobData.


        :param xtrabackup_use_memory: The xtrabackup_use_memory of this JobsJobJobSpecJobData.  # noqa: E501
        :type xtrabackup_use_memory: int
        """

        self._xtrabackup_use_memory = xtrabackup_use_memory

    @property
    def initial(self):
        """Gets the initial of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The initial of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._initial

    @initial.setter
    def initial(self, initial):
        """Sets the initial of this JobsJobJobSpecJobData.


        :param initial: The initial of this JobsJobJobSpecJobData.  # noqa: E501
        :type initial: bool
        """

        self._initial = initial

    @property
    def reboot(self):
        """Gets the reboot of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The reboot of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._reboot

    @reboot.setter
    def reboot(self, reboot):
        """Sets the reboot of this JobsJobJobSpecJobData.


        :param reboot: The reboot of this JobsJobJobSpecJobData.  # noqa: E501
        :type reboot: bool
        """

        self._reboot = reboot

    @property
    def slave_address(self):
        """Gets the slave_address of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The slave_address of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._slave_address

    @slave_address.setter
    def slave_address(self, slave_address):
        """Sets the slave_address of this JobsJobJobSpecJobData.


        :param slave_address: The slave_address of this JobsJobJobSpecJobData.  # noqa: E501
        :type slave_address: str
        """

        self._slave_address = slave_address

    @property
    def force(self):
        """Gets the force of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The force of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this JobsJobJobSpecJobData.


        :param force: The force of this JobsJobJobSpecJobData.  # noqa: E501
        :type force: bool
        """

        self._force = force

    @property
    def force_stop(self):
        """Gets the force_stop of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The force_stop of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._force_stop

    @force_stop.setter
    def force_stop(self, force_stop):
        """Sets the force_stop of this JobsJobJobSpecJobData.


        :param force_stop: The force_stop of this JobsJobJobSpecJobData.  # noqa: E501
        :type force_stop: bool
        """

        self._force_stop = force_stop

    @property
    def stop_timeout(self):
        """Gets the stop_timeout of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The stop_timeout of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._stop_timeout

    @stop_timeout.setter
    def stop_timeout(self, stop_timeout):
        """Sets the stop_timeout of this JobsJobJobSpecJobData.


        :param stop_timeout: The stop_timeout of this JobsJobJobSpecJobData.  # noqa: E501
        :type stop_timeout: int
        """

        self._stop_timeout = stop_timeout

    @property
    def pitr_stop_time(self):
        """Gets the pitr_stop_time of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The pitr_stop_time of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._pitr_stop_time

    @pitr_stop_time.setter
    def pitr_stop_time(self, pitr_stop_time):
        """Sets the pitr_stop_time of this JobsJobJobSpecJobData.


        :param pitr_stop_time: The pitr_stop_time of this JobsJobJobSpecJobData.  # noqa: E501
        :type pitr_stop_time: str
        """

        self._pitr_stop_time = pitr_stop_time

    @property
    def pitr_stop_log(self):
        """Gets the pitr_stop_log of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The pitr_stop_log of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._pitr_stop_log

    @pitr_stop_log.setter
    def pitr_stop_log(self, pitr_stop_log):
        """Sets the pitr_stop_log of this JobsJobJobSpecJobData.


        :param pitr_stop_log: The pitr_stop_log of this JobsJobJobSpecJobData.  # noqa: E501
        :type pitr_stop_log: str
        """

        self._pitr_stop_log = pitr_stop_log

    @property
    def pitr_stop_pos(self):
        """Gets the pitr_stop_pos of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The pitr_stop_pos of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: int
        """
        return self._pitr_stop_pos

    @pitr_stop_pos.setter
    def pitr_stop_pos(self, pitr_stop_pos):
        """Sets the pitr_stop_pos of this JobsJobJobSpecJobData.


        :param pitr_stop_pos: The pitr_stop_pos of this JobsJobJobSpecJobData.  # noqa: E501
        :type pitr_stop_pos: int
        """

        self._pitr_stop_pos = pitr_stop_pos

    @property
    def host_location_uuid(self):
        """Gets the host_location_uuid of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The host_location_uuid of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._host_location_uuid

    @host_location_uuid.setter
    def host_location_uuid(self, host_location_uuid):
        """Sets the host_location_uuid of this JobsJobJobSpecJobData.


        :param host_location_uuid: The host_location_uuid of this JobsJobJobSpecJobData.  # noqa: E501
        :type host_location_uuid: str
        """

        self._host_location_uuid = host_location_uuid

    @property
    def bootstrap(self):
        """Gets the bootstrap of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The bootstrap of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: bool
        """
        return self._bootstrap

    @bootstrap.setter
    def bootstrap(self, bootstrap):
        """Sets the bootstrap of this JobsJobJobSpecJobData.


        :param bootstrap: The bootstrap of this JobsJobJobSpecJobData.  # noqa: E501
        :type bootstrap: bool
        """

        self._bootstrap = bootstrap

    @property
    def snapshot_locaiton(self):
        """Gets the snapshot_locaiton of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The snapshot_locaiton of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_locaiton

    @snapshot_locaiton.setter
    def snapshot_locaiton(self, snapshot_locaiton):
        """Sets the snapshot_locaiton of this JobsJobJobSpecJobData.


        :param snapshot_locaiton: The snapshot_locaiton of this JobsJobJobSpecJobData.  # noqa: E501
        :type snapshot_locaiton: str
        """

        self._snapshot_locaiton = snapshot_locaiton

    @property
    def snapshot_repository(self):
        """Gets the snapshot_repository of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The snapshot_repository of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_repository

    @snapshot_repository.setter
    def snapshot_repository(self, snapshot_repository):
        """Sets the snapshot_repository of this JobsJobJobSpecJobData.


        :param snapshot_repository: The snapshot_repository of this JobsJobJobSpecJobData.  # noqa: E501
        :type snapshot_repository: str
        """

        self._snapshot_repository = snapshot_repository

    @property
    def storage_host(self):
        """Gets the storage_host of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The storage_host of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._storage_host

    @storage_host.setter
    def storage_host(self, storage_host):
        """Sets the storage_host of this JobsJobJobSpecJobData.


        :param storage_host: The storage_host of this JobsJobJobSpecJobData.  # noqa: E501
        :type storage_host: str
        """

        self._storage_host = storage_host

    @property
    def upload_backup_data_to_cloud_storage(self):
        """Gets the upload_backup_data_to_cloud_storage of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The upload_backup_data_to_cloud_storage of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: JobsJobJobSpecJobDataUploadBackupDataToCloudStorage
        """
        return self._upload_backup_data_to_cloud_storage

    @upload_backup_data_to_cloud_storage.setter
    def upload_backup_data_to_cloud_storage(self, upload_backup_data_to_cloud_storage):
        """Sets the upload_backup_data_to_cloud_storage of this JobsJobJobSpecJobData.


        :param upload_backup_data_to_cloud_storage: The upload_backup_data_to_cloud_storage of this JobsJobJobSpecJobData.  # noqa: E501
        :type upload_backup_data_to_cloud_storage: JobsJobJobSpecJobDataUploadBackupDataToCloudStorage
        """

        self._upload_backup_data_to_cloud_storage = upload_backup_data_to_cloud_storage

    @property
    def verify_backup(self):
        """Gets the verify_backup of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The verify_backup of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: BackupScheduleJobJobDataVerifyBackup
        """
        return self._verify_backup

    @verify_backup.setter
    def verify_backup(self, verify_backup):
        """Sets the verify_backup of this JobsJobJobSpecJobData.


        :param verify_backup: The verify_backup of this JobsJobJobSpecJobData.  # noqa: E501
        :type verify_backup: BackupScheduleJobJobDataVerifyBackup
        """

        self._verify_backup = verify_backup

    @property
    def config_servers(self):
        """Gets the config_servers of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The config_servers of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: JobsJobJobSpecJobDataConfigServers
        """
        return self._config_servers

    @config_servers.setter
    def config_servers(self, config_servers):
        """Sets the config_servers of this JobsJobJobSpecJobData.


        :param config_servers: The config_servers of this JobsJobJobSpecJobData.  # noqa: E501
        :type config_servers: JobsJobJobSpecJobDataConfigServers
        """

        self._config_servers = config_servers

    @property
    def mongos_servers(self):
        """Gets the mongos_servers of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The mongos_servers of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: list[JobsJobJobSpecJobDataConfigServersMembersInner]
        """
        return self._mongos_servers

    @mongos_servers.setter
    def mongos_servers(self, mongos_servers):
        """Sets the mongos_servers of this JobsJobJobSpecJobData.


        :param mongos_servers: The mongos_servers of this JobsJobJobSpecJobData.  # noqa: E501
        :type mongos_servers: list[JobsJobJobSpecJobDataConfigServersMembersInner]
        """

        self._mongos_servers = mongos_servers

    @property
    def node(self):
        """Gets the node of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The node of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: JobsJobJobSpecJobDataNode
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this JobsJobJobSpecJobData.


        :param node: The node of this JobsJobJobSpecJobData.  # noqa: E501
        :type node: JobsJobJobSpecJobDataNode
        """

        self._node = node

    @property
    def nodes(self):
        """Gets the nodes of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The nodes of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: list[JobsJobJobSpecJobDataNodesInner]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this JobsJobJobSpecJobData.


        :param nodes: The nodes of this JobsJobJobSpecJobData.  # noqa: E501
        :type nodes: list[JobsJobJobSpecJobDataNodesInner]
        """

        self._nodes = nodes

    @property
    def node_adresses(self):
        """Gets the node_adresses of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The node_adresses of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: list[JobsJobJobSpecJobDataNodeAdressesInner]
        """
        return self._node_adresses

    @node_adresses.setter
    def node_adresses(self, node_adresses):
        """Sets the node_adresses of this JobsJobJobSpecJobData.


        :param node_adresses: The node_adresses of this JobsJobJobSpecJobData.  # noqa: E501
        :type node_adresses: list[JobsJobJobSpecJobDataNodeAdressesInner]
        """

        self._node_adresses = node_adresses

    @property
    def topology(self):
        """Gets the topology of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The topology of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: JobsJobJobSpecJobDataTopology
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this JobsJobJobSpecJobData.


        :param topology: The topology of this JobsJobJobSpecJobData.  # noqa: E501
        :type topology: JobsJobJobSpecJobDataTopology
        """

        self._topology = topology

    @property
    def replica_sets(self):
        """Gets the replica_sets of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The replica_sets of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: list[JobsJobJobSpecJobDataReplicaSetsInner]
        """
        return self._replica_sets

    @replica_sets.setter
    def replica_sets(self, replica_sets):
        """Sets the replica_sets of this JobsJobJobSpecJobData.


        :param replica_sets: The replica_sets of this JobsJobJobSpecJobData.  # noqa: E501
        :type replica_sets: list[JobsJobJobSpecJobDataReplicaSetsInner]
        """

        self._replica_sets = replica_sets

    @property
    def with_tags(self):
        """Gets the with_tags of this JobsJobJobSpecJobData.  # noqa: E501


        :return: The with_tags of this JobsJobJobSpecJobData.  # noqa: E501
        :rtype: list[str]
        """
        return self._with_tags

    @with_tags.setter
    def with_tags(self, with_tags):
        """Sets the with_tags of this JobsJobJobSpecJobData.


        :param with_tags: The with_tags of this JobsJobJobSpecJobData.  # noqa: E501
        :type with_tags: list[str]
        """

        self._with_tags = with_tags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsJobJobSpecJobData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsJobJobSpecJobData):
            return True

        return self.to_dict() != other.to_dict()
