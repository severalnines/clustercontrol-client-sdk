# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class BackupScheduleJobJobData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'backup_failover': 'bool',
        'backup_failover_host': 'str',
        'backup_method': 'str',
        'backup_retention': 'int',
        'backupdir': 'str',
        'backupsubdir': 'str',
        'cc_storage': 'str',
        'compression': 'bool',
        'compresion_level': 'int',
        'encrypt_backup': 'bool',
        'hostname': 'str',
        'port': 'int',
        'verify_backup_delay': 'int',
        'verify_backup': 'BackupScheduleJobJobDataVerifyBackup'
    }

    attribute_map = {
        'description': 'description',
        'backup_failover': 'backup_failover',
        'backup_failover_host': 'backup_failover_host',
        'backup_method': 'backup_method',
        'backup_retention': 'backup_retention',
        'backupdir': 'backupdir',
        'backupsubdir': 'backupsubdir',
        'cc_storage': 'cc_storage',
        'compression': 'compression',
        'compresion_level': 'compresion_level',
        'encrypt_backup': 'encrypt_backup',
        'hostname': 'hostname',
        'port': 'port',
        'verify_backup_delay': 'verify_backup_delay',
        'verify_backup': 'verify_backup'
    }

    def __init__(self, description=None, backup_failover=None, backup_failover_host=None, backup_method=None, backup_retention=None, backupdir=None, backupsubdir=None, cc_storage=None, compression=None, compresion_level=None, encrypt_backup=None, hostname=None, port=None, verify_backup_delay=None, verify_backup=None, local_vars_configuration=None):  # noqa: E501
        """BackupScheduleJobJobData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._backup_failover = None
        self._backup_failover_host = None
        self._backup_method = None
        self._backup_retention = None
        self._backupdir = None
        self._backupsubdir = None
        self._cc_storage = None
        self._compression = None
        self._compresion_level = None
        self._encrypt_backup = None
        self._hostname = None
        self._port = None
        self._verify_backup_delay = None
        self._verify_backup = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if backup_failover is not None:
            self.backup_failover = backup_failover
        if backup_failover_host is not None:
            self.backup_failover_host = backup_failover_host
        if backup_method is not None:
            self.backup_method = backup_method
        if backup_retention is not None:
            self.backup_retention = backup_retention
        if backupdir is not None:
            self.backupdir = backupdir
        if backupsubdir is not None:
            self.backupsubdir = backupsubdir
        if cc_storage is not None:
            self.cc_storage = cc_storage
        if compression is not None:
            self.compression = compression
        if compresion_level is not None:
            self.compresion_level = compresion_level
        if encrypt_backup is not None:
            self.encrypt_backup = encrypt_backup
        if hostname is not None:
            self.hostname = hostname
        if port is not None:
            self.port = port
        if verify_backup_delay is not None:
            self.verify_backup_delay = verify_backup_delay
        if verify_backup is not None:
            self.verify_backup = verify_backup

    @property
    def description(self):
        """Gets the description of this BackupScheduleJobJobData.  # noqa: E501


        :return: The description of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackupScheduleJobJobData.


        :param description: The description of this BackupScheduleJobJobData.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def backup_failover(self):
        """Gets the backup_failover of this BackupScheduleJobJobData.  # noqa: E501


        :return: The backup_failover of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: bool
        """
        return self._backup_failover

    @backup_failover.setter
    def backup_failover(self, backup_failover):
        """Sets the backup_failover of this BackupScheduleJobJobData.


        :param backup_failover: The backup_failover of this BackupScheduleJobJobData.  # noqa: E501
        :type backup_failover: bool
        """

        self._backup_failover = backup_failover

    @property
    def backup_failover_host(self):
        """Gets the backup_failover_host of this BackupScheduleJobJobData.  # noqa: E501


        :return: The backup_failover_host of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: str
        """
        return self._backup_failover_host

    @backup_failover_host.setter
    def backup_failover_host(self, backup_failover_host):
        """Sets the backup_failover_host of this BackupScheduleJobJobData.


        :param backup_failover_host: The backup_failover_host of this BackupScheduleJobJobData.  # noqa: E501
        :type backup_failover_host: str
        """
        allowed_values = ["auto"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and backup_failover_host not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `backup_failover_host` ({0}), must be one of {1}"  # noqa: E501
                .format(backup_failover_host, allowed_values)
            )

        self._backup_failover_host = backup_failover_host

    @property
    def backup_method(self):
        """Gets the backup_method of this BackupScheduleJobJobData.  # noqa: E501


        :return: The backup_method of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: str
        """
        return self._backup_method

    @backup_method.setter
    def backup_method(self, backup_method):
        """Sets the backup_method of this BackupScheduleJobJobData.


        :param backup_method: The backup_method of this BackupScheduleJobJobData.  # noqa: E501
        :type backup_method: str
        """
        allowed_values = ["pg_basebackup", "xtrabackupfull", "xtrabackupincr", "pgbackrestfull", "pgbackrestincr", "pgbackrestdiff", "mysqldump", "mongodump", "percona-backup-mongodb", "pgdumpall", "mariabackupfull", "mariabackupincr", "mssqlcert", "ndb"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and backup_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `backup_method` ({0}), must be one of {1}"  # noqa: E501
                .format(backup_method, allowed_values)
            )

        self._backup_method = backup_method

    @property
    def backup_retention(self):
        """Gets the backup_retention of this BackupScheduleJobJobData.  # noqa: E501


        :return: The backup_retention of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: int
        """
        return self._backup_retention

    @backup_retention.setter
    def backup_retention(self, backup_retention):
        """Sets the backup_retention of this BackupScheduleJobJobData.


        :param backup_retention: The backup_retention of this BackupScheduleJobJobData.  # noqa: E501
        :type backup_retention: int
        """

        self._backup_retention = backup_retention

    @property
    def backupdir(self):
        """Gets the backupdir of this BackupScheduleJobJobData.  # noqa: E501


        :return: The backupdir of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: str
        """
        return self._backupdir

    @backupdir.setter
    def backupdir(self, backupdir):
        """Sets the backupdir of this BackupScheduleJobJobData.


        :param backupdir: The backupdir of this BackupScheduleJobJobData.  # noqa: E501
        :type backupdir: str
        """

        self._backupdir = backupdir

    @property
    def backupsubdir(self):
        """Gets the backupsubdir of this BackupScheduleJobJobData.  # noqa: E501


        :return: The backupsubdir of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: str
        """
        return self._backupsubdir

    @backupsubdir.setter
    def backupsubdir(self, backupsubdir):
        """Sets the backupsubdir of this BackupScheduleJobJobData.


        :param backupsubdir: The backupsubdir of this BackupScheduleJobJobData.  # noqa: E501
        :type backupsubdir: str
        """

        self._backupsubdir = backupsubdir

    @property
    def cc_storage(self):
        """Gets the cc_storage of this BackupScheduleJobJobData.  # noqa: E501


        :return: The cc_storage of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: str
        """
        return self._cc_storage

    @cc_storage.setter
    def cc_storage(self, cc_storage):
        """Sets the cc_storage of this BackupScheduleJobJobData.


        :param cc_storage: The cc_storage of this BackupScheduleJobJobData.  # noqa: E501
        :type cc_storage: str
        """

        self._cc_storage = cc_storage

    @property
    def compression(self):
        """Gets the compression of this BackupScheduleJobJobData.  # noqa: E501


        :return: The compression of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: bool
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this BackupScheduleJobJobData.


        :param compression: The compression of this BackupScheduleJobJobData.  # noqa: E501
        :type compression: bool
        """

        self._compression = compression

    @property
    def compresion_level(self):
        """Gets the compresion_level of this BackupScheduleJobJobData.  # noqa: E501


        :return: The compresion_level of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: int
        """
        return self._compresion_level

    @compresion_level.setter
    def compresion_level(self, compresion_level):
        """Sets the compresion_level of this BackupScheduleJobJobData.


        :param compresion_level: The compresion_level of this BackupScheduleJobJobData.  # noqa: E501
        :type compresion_level: int
        """

        self._compresion_level = compresion_level

    @property
    def encrypt_backup(self):
        """Gets the encrypt_backup of this BackupScheduleJobJobData.  # noqa: E501


        :return: The encrypt_backup of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_backup

    @encrypt_backup.setter
    def encrypt_backup(self, encrypt_backup):
        """Sets the encrypt_backup of this BackupScheduleJobJobData.


        :param encrypt_backup: The encrypt_backup of this BackupScheduleJobJobData.  # noqa: E501
        :type encrypt_backup: bool
        """

        self._encrypt_backup = encrypt_backup

    @property
    def hostname(self):
        """Gets the hostname of this BackupScheduleJobJobData.  # noqa: E501


        :return: The hostname of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this BackupScheduleJobJobData.


        :param hostname: The hostname of this BackupScheduleJobJobData.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def port(self):
        """Gets the port of this BackupScheduleJobJobData.  # noqa: E501


        :return: The port of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this BackupScheduleJobJobData.


        :param port: The port of this BackupScheduleJobJobData.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def verify_backup_delay(self):
        """Gets the verify_backup_delay of this BackupScheduleJobJobData.  # noqa: E501


        :return: The verify_backup_delay of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: int
        """
        return self._verify_backup_delay

    @verify_backup_delay.setter
    def verify_backup_delay(self, verify_backup_delay):
        """Sets the verify_backup_delay of this BackupScheduleJobJobData.


        :param verify_backup_delay: The verify_backup_delay of this BackupScheduleJobJobData.  # noqa: E501
        :type verify_backup_delay: int
        """

        self._verify_backup_delay = verify_backup_delay

    @property
    def verify_backup(self):
        """Gets the verify_backup of this BackupScheduleJobJobData.  # noqa: E501


        :return: The verify_backup of this BackupScheduleJobJobData.  # noqa: E501
        :rtype: BackupScheduleJobJobDataVerifyBackup
        """
        return self._verify_backup

    @verify_backup.setter
    def verify_backup(self, verify_backup):
        """Sets the verify_backup of this BackupScheduleJobJobData.


        :param verify_backup: The verify_backup of this BackupScheduleJobJobData.  # noqa: E501
        :type verify_backup: BackupScheduleJobJobDataVerifyBackup
        """

        self._verify_backup = verify_backup

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupScheduleJobJobData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupScheduleJobJobData):
            return True

        return self.to_dict() != other.to_dict()
