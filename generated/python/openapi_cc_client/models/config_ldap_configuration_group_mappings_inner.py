# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class ConfigLdapConfigurationGroupMappingsInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cmon_group_name': 'str',
        'ldap_group_id': 'str',
        'section_name': 'str'
    }

    attribute_map = {
        'cmon_group_name': 'cmonGroupName',
        'ldap_group_id': 'ldapGroupId',
        'section_name': 'sectionName'
    }

    def __init__(self, cmon_group_name=None, ldap_group_id=None, section_name=None, local_vars_configuration=None):  # noqa: E501
        """ConfigLdapConfigurationGroupMappingsInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cmon_group_name = None
        self._ldap_group_id = None
        self._section_name = None
        self.discriminator = None

        if cmon_group_name is not None:
            self.cmon_group_name = cmon_group_name
        if ldap_group_id is not None:
            self.ldap_group_id = ldap_group_id
        if section_name is not None:
            self.section_name = section_name

    @property
    def cmon_group_name(self):
        """Gets the cmon_group_name of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501


        :return: The cmon_group_name of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501
        :rtype: str
        """
        return self._cmon_group_name

    @cmon_group_name.setter
    def cmon_group_name(self, cmon_group_name):
        """Sets the cmon_group_name of this ConfigLdapConfigurationGroupMappingsInner.


        :param cmon_group_name: The cmon_group_name of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501
        :type cmon_group_name: str
        """

        self._cmon_group_name = cmon_group_name

    @property
    def ldap_group_id(self):
        """Gets the ldap_group_id of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501


        :return: The ldap_group_id of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_id

    @ldap_group_id.setter
    def ldap_group_id(self, ldap_group_id):
        """Sets the ldap_group_id of this ConfigLdapConfigurationGroupMappingsInner.


        :param ldap_group_id: The ldap_group_id of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501
        :type ldap_group_id: str
        """

        self._ldap_group_id = ldap_group_id

    @property
    def section_name(self):
        """Gets the section_name of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501


        :return: The section_name of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501
        :rtype: str
        """
        return self._section_name

    @section_name.setter
    def section_name(self, section_name):
        """Sets the section_name of this ConfigLdapConfigurationGroupMappingsInner.


        :param section_name: The section_name of this ConfigLdapConfigurationGroupMappingsInner.  # noqa: E501
        :type section_name: str
        """

        self._section_name = section_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLdapConfigurationGroupMappingsInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigLdapConfigurationGroupMappingsInner):
            return True

        return self.to_dict() != other.to_dict()
