# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_cc_client.models.config_ldap_configuration_group_mappings_inner import ConfigLdapConfigurationGroupMappingsInner
from openapi_cc_client.models.config_ldap_configuration_ldap_settings import ConfigLdapConfigurationLdapSettings
from openapi_cc_client.models.config_ldap_configuration_security import ConfigLdapConfigurationSecurity

class ConfigLdapConfiguration(BaseModel):
    """
    ConfigLdapConfiguration
    """
    enabled: Optional[StrictBool] = None
    ldap_admin_password: Optional[StrictStr] = Field(None, alias="ldapAdminPassword")
    ldap_admin_user: Optional[StrictStr] = Field(None, alias="ldapAdminUser")
    ldap_group_search_root: Optional[StrictStr] = Field(None, alias="ldapGroupSearchRoot")
    ldap_server_uri: Optional[StrictStr] = Field(None, alias="ldapServerUri")
    ldap_user_search_root: Optional[StrictStr] = Field(None, alias="ldapUserSearchRoot")
    group_mappings: Optional[conlist(ConfigLdapConfigurationGroupMappingsInner)] = Field(None, alias="groupMappings")
    ldap_settings: Optional[ConfigLdapConfigurationLdapSettings] = Field(None, alias="ldapSettings")
    security: Optional[ConfigLdapConfigurationSecurity] = None
    __properties = ["enabled", "ldapAdminPassword", "ldapAdminUser", "ldapGroupSearchRoot", "ldapServerUri", "ldapUserSearchRoot", "groupMappings", "ldapSettings", "security"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigLdapConfiguration:
        """Create an instance of ConfigLdapConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in group_mappings (list)
        _items = []
        if self.group_mappings:
            for _item in self.group_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groupMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of ldap_settings
        if self.ldap_settings:
            _dict['ldapSettings'] = self.ldap_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security
        if self.security:
            _dict['security'] = self.security.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigLdapConfiguration:
        """Create an instance of ConfigLdapConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigLdapConfiguration.parse_obj(obj)

        _obj = ConfigLdapConfiguration.parse_obj({
            "enabled": obj.get("enabled"),
            "ldap_admin_password": obj.get("ldapAdminPassword"),
            "ldap_admin_user": obj.get("ldapAdminUser"),
            "ldap_group_search_root": obj.get("ldapGroupSearchRoot"),
            "ldap_server_uri": obj.get("ldapServerUri"),
            "ldap_user_search_root": obj.get("ldapUserSearchRoot"),
            "group_mappings": [ConfigLdapConfigurationGroupMappingsInner.from_dict(_item) for _item in obj.get("groupMappings")] if obj.get("groupMappings") is not None else None,
            "ldap_settings": ConfigLdapConfigurationLdapSettings.from_dict(obj.get("ldapSettings")) if obj.get("ldapSettings") is not None else None,
            "security": ConfigLdapConfigurationSecurity.from_dict(obj.get("security")) if obj.get("security") is not None else None
        })
        return _obj


