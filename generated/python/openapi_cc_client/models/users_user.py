# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator
from openapi_cc_client.models.users_user_groups_inner import UsersUserGroupsInner
from openapi_cc_client.models.users_user_public_keys_inner import UsersUserPublicKeysInner
from openapi_cc_client.models.users_user_timezone import UsersUserTimezone

class UsersUser(BaseModel):
    """
    UsersUser
    """
    class_name: Optional[StrictStr] = None
    user_name: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    email_address: Optional[StrictStr] = None
    new_password: Optional[StrictStr] = None
    old_password: Optional[StrictStr] = None
    groups: Optional[conlist(UsersUserGroupsInner)] = None
    timezone: Optional[UsersUserTimezone] = None
    public_keys: Optional[conlist(UsersUserPublicKeysInner)] = None
    public_key: Optional[conlist(UsersUserPublicKeysInner)] = None
    __properties = ["class_name", "user_name", "user_id", "first_name", "last_name", "email_address", "new_password", "old_password", "groups", "timezone", "public_keys", "public_key"]

    @validator('class_name')
    def class_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CmonUser'):
            raise ValueError("must be one of enum values ('CmonUser')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UsersUser:
        """Create an instance of UsersUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of timezone
        if self.timezone:
            _dict['timezone'] = self.timezone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in public_keys (list)
        _items = []
        if self.public_keys:
            for _item in self.public_keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['public_keys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in public_key (list)
        _items = []
        if self.public_key:
            for _item in self.public_key:
                if _item:
                    _items.append(_item.to_dict())
            _dict['public_key'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UsersUser:
        """Create an instance of UsersUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UsersUser.parse_obj(obj)

        _obj = UsersUser.parse_obj({
            "class_name": obj.get("class_name"),
            "user_name": obj.get("user_name"),
            "user_id": obj.get("user_id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email_address": obj.get("email_address"),
            "new_password": obj.get("new_password"),
            "old_password": obj.get("old_password"),
            "groups": [UsersUserGroupsInner.from_dict(_item) for _item in obj.get("groups")] if obj.get("groups") is not None else None,
            "timezone": UsersUserTimezone.from_dict(obj.get("timezone")) if obj.get("timezone") is not None else None,
            "public_keys": [UsersUserPublicKeysInner.from_dict(_item) for _item in obj.get("public_keys")] if obj.get("public_keys") is not None else None,
            "public_key": [UsersUserPublicKeysInner.from_dict(_item) for _item in obj.get("public_key")] if obj.get("public_key") is not None else None
        })
        return _obj


