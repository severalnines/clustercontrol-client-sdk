# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class ConfigLdapConfigurationSecurity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca_cert_file': 'str',
        'cert_file': 'str',
        'key_file': 'str'
    }

    attribute_map = {
        'ca_cert_file': 'caCertFile',
        'cert_file': 'certFile',
        'key_file': 'keyFile'
    }

    def __init__(self, ca_cert_file=None, cert_file=None, key_file=None, local_vars_configuration=None):  # noqa: E501
        """ConfigLdapConfigurationSecurity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ca_cert_file = None
        self._cert_file = None
        self._key_file = None
        self.discriminator = None

        if ca_cert_file is not None:
            self.ca_cert_file = ca_cert_file
        if cert_file is not None:
            self.cert_file = cert_file
        if key_file is not None:
            self.key_file = key_file

    @property
    def ca_cert_file(self):
        """Gets the ca_cert_file of this ConfigLdapConfigurationSecurity.  # noqa: E501


        :return: The ca_cert_file of this ConfigLdapConfigurationSecurity.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert_file

    @ca_cert_file.setter
    def ca_cert_file(self, ca_cert_file):
        """Sets the ca_cert_file of this ConfigLdapConfigurationSecurity.


        :param ca_cert_file: The ca_cert_file of this ConfigLdapConfigurationSecurity.  # noqa: E501
        :type ca_cert_file: str
        """

        self._ca_cert_file = ca_cert_file

    @property
    def cert_file(self):
        """Gets the cert_file of this ConfigLdapConfigurationSecurity.  # noqa: E501


        :return: The cert_file of this ConfigLdapConfigurationSecurity.  # noqa: E501
        :rtype: str
        """
        return self._cert_file

    @cert_file.setter
    def cert_file(self, cert_file):
        """Sets the cert_file of this ConfigLdapConfigurationSecurity.


        :param cert_file: The cert_file of this ConfigLdapConfigurationSecurity.  # noqa: E501
        :type cert_file: str
        """

        self._cert_file = cert_file

    @property
    def key_file(self):
        """Gets the key_file of this ConfigLdapConfigurationSecurity.  # noqa: E501


        :return: The key_file of this ConfigLdapConfigurationSecurity.  # noqa: E501
        :rtype: str
        """
        return self._key_file

    @key_file.setter
    def key_file(self, key_file):
        """Sets the key_file of this ConfigLdapConfigurationSecurity.


        :param key_file: The key_file of this ConfigLdapConfigurationSecurity.  # noqa: E501
        :type key_file: str
        """

        self._key_file = key_file

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLdapConfigurationSecurity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigLdapConfigurationSecurity):
            return True

        return self.to_dict() != other.to_dict()
