# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from openapi_cc_client.models.stat_prometheus_queries_inner import StatPrometheusQueriesInner

class StatPrometheus(BaseModel):
    """
    StatPrometheus
    """
    operation: StrictStr = Field(...)
    cluster_id: Optional[StrictInt] = None
    cluster_name: Optional[StrictStr] = None
    queries: Optional[conlist(StatPrometheusQueriesInner)] = None
    start: Optional[StrictInt] = Field(None, description="Seconds since 1970. e.g. 1622105617")
    end: Optional[StrictInt] = Field(None, description="Seconds since 1970. e.g. 1622108317")
    step: Optional[StrictInt] = None
    returnfrom: Optional[StrictInt] = None
    __properties = ["operation", "cluster_id", "cluster_name", "queries", "start", "end", "step", "returnfrom"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('/prometheus'):
            raise ValueError("must be one of enum values ('/prometheus')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatPrometheus:
        """Create an instance of StatPrometheus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in queries (list)
        _items = []
        if self.queries:
            for _item in self.queries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['queries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatPrometheus:
        """Create an instance of StatPrometheus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatPrometheus.parse_obj(obj)

        _obj = StatPrometheus.parse_obj({
            "operation": obj.get("operation"),
            "cluster_id": obj.get("cluster_id"),
            "cluster_name": obj.get("cluster_name"),
            "queries": [StatPrometheusQueriesInner.from_dict(_item) for _item in obj.get("queries")] if obj.get("queries") is not None else None,
            "start": obj.get("start"),
            "end": obj.get("end"),
            "step": obj.get("step"),
            "returnfrom": obj.get("returnfrom")
        })
        return _obj


