# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class UsersUserTimezone(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'abbreviation': 'str',
        'name': 'str',
        'offset': 'int',
        'use_dst': 'bool'
    }

    attribute_map = {
        'class_name': 'class_name',
        'abbreviation': 'abbreviation',
        'name': 'name',
        'offset': 'offset',
        'use_dst': 'use_dst'
    }

    def __init__(self, class_name=None, abbreviation=None, name=None, offset=None, use_dst=None, local_vars_configuration=None):  # noqa: E501
        """UsersUserTimezone - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._abbreviation = None
        self._name = None
        self._offset = None
        self._use_dst = None
        self.discriminator = None

        if class_name is not None:
            self.class_name = class_name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if name is not None:
            self.name = name
        if offset is not None:
            self.offset = offset
        if use_dst is not None:
            self.use_dst = use_dst

    @property
    def class_name(self):
        """Gets the class_name of this UsersUserTimezone.  # noqa: E501


        :return: The class_name of this UsersUserTimezone.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this UsersUserTimezone.


        :param class_name: The class_name of this UsersUserTimezone.  # noqa: E501
        :type class_name: str
        """

        self._class_name = class_name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this UsersUserTimezone.  # noqa: E501


        :return: The abbreviation of this UsersUserTimezone.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this UsersUserTimezone.


        :param abbreviation: The abbreviation of this UsersUserTimezone.  # noqa: E501
        :type abbreviation: str
        """

        self._abbreviation = abbreviation

    @property
    def name(self):
        """Gets the name of this UsersUserTimezone.  # noqa: E501


        :return: The name of this UsersUserTimezone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsersUserTimezone.


        :param name: The name of this UsersUserTimezone.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this UsersUserTimezone.  # noqa: E501


        :return: The offset of this UsersUserTimezone.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this UsersUserTimezone.


        :param offset: The offset of this UsersUserTimezone.  # noqa: E501
        :type offset: int
        """

        self._offset = offset

    @property
    def use_dst(self):
        """Gets the use_dst of this UsersUserTimezone.  # noqa: E501


        :return: The use_dst of this UsersUserTimezone.  # noqa: E501
        :rtype: bool
        """
        return self._use_dst

    @use_dst.setter
    def use_dst(self, use_dst):
        """Sets the use_dst of this UsersUserTimezone.


        :param use_dst: The use_dst of this UsersUserTimezone.  # noqa: E501
        :type use_dst: bool
        """

        self._use_dst = use_dst

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersUserTimezone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsersUserTimezone):
            return True

        return self.to_dict() != other.to_dict()
