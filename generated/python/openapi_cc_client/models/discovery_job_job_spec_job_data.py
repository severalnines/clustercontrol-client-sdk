# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist, validator
from openapi_cc_client.models.discovery_job_job_spec_job_data_nodes_inner import DiscoveryJobJobSpecJobDataNodesInner

class DiscoveryJobJobSpecJobData(BaseModel):
    """
    DiscoveryJobJobSpecJobData
    """
    cluster_type: Optional[StrictStr] = None
    mysql_version: Optional[StrictStr] = None
    vendor: Optional[StrictStr] = None
    nodes: Optional[conlist(DiscoveryJobJobSpecJobDataNodesInner)] = None
    __properties = ["cluster_type", "mysql_version", "vendor", "nodes"]

    @validator('cluster_type')
    def cluster_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('group_replication'):
            raise ValueError("must be one of enum values ('group_replication')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscoveryJobJobSpecJobData:
        """Create an instance of DiscoveryJobJobSpecJobData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item in self.nodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscoveryJobJobSpecJobData:
        """Create an instance of DiscoveryJobJobSpecJobData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscoveryJobJobSpecJobData.parse_obj(obj)

        _obj = DiscoveryJobJobSpecJobData.parse_obj({
            "cluster_type": obj.get("cluster_type"),
            "mysql_version": obj.get("mysql_version"),
            "vendor": obj.get("vendor"),
            "nodes": [DiscoveryJobJobSpecJobDataNodesInner.from_dict(_item) for _item in obj.get("nodes")] if obj.get("nodes") is not None else None
        })
        return _obj


