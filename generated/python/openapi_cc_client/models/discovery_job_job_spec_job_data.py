# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class DiscoveryJobJobSpecJobData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_type': 'str',
        'mysql_version': 'str',
        'vendor': 'str',
        'nodes': 'list[DiscoveryJobJobSpecJobDataNodesInner]'
    }

    attribute_map = {
        'cluster_type': 'cluster_type',
        'mysql_version': 'mysql_version',
        'vendor': 'vendor',
        'nodes': 'nodes'
    }

    def __init__(self, cluster_type=None, mysql_version=None, vendor=None, nodes=None, local_vars_configuration=None):  # noqa: E501
        """DiscoveryJobJobSpecJobData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_type = None
        self._mysql_version = None
        self._vendor = None
        self._nodes = None
        self.discriminator = None

        if cluster_type is not None:
            self.cluster_type = cluster_type
        if mysql_version is not None:
            self.mysql_version = mysql_version
        if vendor is not None:
            self.vendor = vendor
        if nodes is not None:
            self.nodes = nodes

    @property
    def cluster_type(self):
        """Gets the cluster_type of this DiscoveryJobJobSpecJobData.  # noqa: E501


        :return: The cluster_type of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this DiscoveryJobJobSpecJobData.


        :param cluster_type: The cluster_type of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :type cluster_type: str
        """
        allowed_values = ["group_replication"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cluster_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def mysql_version(self):
        """Gets the mysql_version of this DiscoveryJobJobSpecJobData.  # noqa: E501


        :return: The mysql_version of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._mysql_version

    @mysql_version.setter
    def mysql_version(self, mysql_version):
        """Sets the mysql_version of this DiscoveryJobJobSpecJobData.


        :param mysql_version: The mysql_version of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :type mysql_version: str
        """

        self._mysql_version = mysql_version

    @property
    def vendor(self):
        """Gets the vendor of this DiscoveryJobJobSpecJobData.  # noqa: E501


        :return: The vendor of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this DiscoveryJobJobSpecJobData.


        :param vendor: The vendor of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def nodes(self):
        """Gets the nodes of this DiscoveryJobJobSpecJobData.  # noqa: E501


        :return: The nodes of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :rtype: list[DiscoveryJobJobSpecJobDataNodesInner]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DiscoveryJobJobSpecJobData.


        :param nodes: The nodes of this DiscoveryJobJobSpecJobData.  # noqa: E501
        :type nodes: list[DiscoveryJobJobSpecJobDataNodesInner]
        """

        self._nodes = nodes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryJobJobSpecJobData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscoveryJobJobSpecJobData):
            return True

        return self.to_dict() != other.to_dict()
