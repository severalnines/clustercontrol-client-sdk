# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class ReportsReport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'recipients': 'str',
        'report_type': 'str',
        'text_format': 'str',
        'report_id': 'int'
    }

    attribute_map = {
        'class_name': 'class_name',
        'recipients': 'recipients',
        'report_type': 'report_type',
        'text_format': 'text_format',
        'report_id': 'report_id'
    }

    def __init__(self, class_name=None, recipients=None, report_type=None, text_format=None, report_id=None, local_vars_configuration=None):  # noqa: E501
        """ReportsReport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._recipients = None
        self._report_type = None
        self._text_format = None
        self._report_id = None
        self.discriminator = None

        if class_name is not None:
            self.class_name = class_name
        if recipients is not None:
            self.recipients = recipients
        if report_type is not None:
            self.report_type = report_type
        if text_format is not None:
            self.text_format = text_format
        if report_id is not None:
            self.report_id = report_id

    @property
    def class_name(self):
        """Gets the class_name of this ReportsReport.  # noqa: E501


        :return: The class_name of this ReportsReport.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ReportsReport.


        :param class_name: The class_name of this ReportsReport.  # noqa: E501
        :type class_name: str
        """
        allowed_values = ["CmonReport"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and class_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `class_name` ({0}), must be one of {1}"  # noqa: E501
                .format(class_name, allowed_values)
            )

        self._class_name = class_name

    @property
    def recipients(self):
        """Gets the recipients of this ReportsReport.  # noqa: E501

        Email of recipient  # noqa: E501

        :return: The recipients of this ReportsReport.  # noqa: E501
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ReportsReport.

        Email of recipient  # noqa: E501

        :param recipients: The recipients of this ReportsReport.  # noqa: E501
        :type recipients: str
        """

        self._recipients = recipients

    @property
    def report_type(self):
        """Gets the report_type of this ReportsReport.  # noqa: E501

        TODO  # noqa: E501

        :return: The report_type of this ReportsReport.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportsReport.

        TODO  # noqa: E501

        :param report_type: The report_type of this ReportsReport.  # noqa: E501
        :type report_type: str
        """

        self._report_type = report_type

    @property
    def text_format(self):
        """Gets the text_format of this ReportsReport.  # noqa: E501


        :return: The text_format of this ReportsReport.  # noqa: E501
        :rtype: str
        """
        return self._text_format

    @text_format.setter
    def text_format(self, text_format):
        """Sets the text_format of this ReportsReport.


        :param text_format: The text_format of this ReportsReport.  # noqa: E501
        :type text_format: str
        """
        allowed_values = ["AnsiTerminal"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and text_format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `text_format` ({0}), must be one of {1}"  # noqa: E501
                .format(text_format, allowed_values)
            )

        self._text_format = text_format

    @property
    def report_id(self):
        """Gets the report_id of this ReportsReport.  # noqa: E501


        :return: The report_id of this ReportsReport.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ReportsReport.


        :param report_id: The report_id of this ReportsReport.  # noqa: E501
        :type report_id: int
        """

        self._report_id = report_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportsReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportsReport):
            return True

        return self.to_dict() != other.to_dict()
