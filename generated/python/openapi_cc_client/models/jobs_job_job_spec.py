# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr, validator
from openapi_cc_client.models.jobs_job_job_spec_job_data import JobsJobJobSpecJobData

class JobsJobJobSpec(BaseModel):
    """
    JobsJobJobSpec
    """
    command: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    job_data: Optional[JobsJobJobSpecJobData] = None
    __properties = ["command", "id", "job_data"]

    @validator('command')
    def command_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('rolling_restart', 'create_cluster', 'remove_cluster', 'backup', 'verify_backup', 'deploy_agents', 'pbmagent', 'addnode', 'pgbouncer', 'promote_replication_slave', 'setup_audit_logging', 'disable_recovery', 'enable_recovery', 'restart', 'enable_db_readonly', 'error_report', 'calculate_db_growth', 'enable_node_recovery', 'disable_node_recovery', 'check_pkg_upgrades', 'upgrade_cluster', 'success', 'add_replication_slave', 'deploy_cmonagents', 'delete_backup'):
            raise ValueError("must be one of enum values ('rolling_restart', 'create_cluster', 'remove_cluster', 'backup', 'verify_backup', 'deploy_agents', 'pbmagent', 'addnode', 'pgbouncer', 'promote_replication_slave', 'setup_audit_logging', 'disable_recovery', 'enable_recovery', 'restart', 'enable_db_readonly', 'error_report', 'calculate_db_growth', 'enable_node_recovery', 'disable_node_recovery', 'check_pkg_upgrades', 'upgrade_cluster', 'success', 'add_replication_slave', 'deploy_cmonagents', 'delete_backup')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobsJobJobSpec:
        """Create an instance of JobsJobJobSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of job_data
        if self.job_data:
            _dict['job_data'] = self.job_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobsJobJobSpec:
        """Create an instance of JobsJobJobSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobsJobJobSpec.parse_obj(obj)

        _obj = JobsJobJobSpec.parse_obj({
            "command": obj.get("command"),
            "id": obj.get("id"),
            "job_data": JobsJobJobSpecJobData.from_dict(obj.get("job_data")) if obj.get("job_data") is not None else None
        })
        return _obj


