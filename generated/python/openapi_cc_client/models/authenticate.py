# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class Authenticate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'user_name': 'str',
        'password': 'str',
        'signature': 'str',
        'new_password': 'str',
        'password_reset_token': 'str'
    }

    attribute_map = {
        'operation': 'operation',
        'user_name': 'user_name',
        'password': 'password',
        'signature': 'signature',
        'new_password': 'new_password',
        'password_reset_token': 'password_reset_token'
    }

    def __init__(self, operation=None, user_name=None, password=None, signature=None, new_password=None, password_reset_token=None, local_vars_configuration=None):  # noqa: E501
        """Authenticate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation = None
        self._user_name = None
        self._password = None
        self._signature = None
        self._new_password = None
        self._password_reset_token = None
        self.discriminator = None

        self.operation = operation
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if signature is not None:
            self.signature = signature
        if new_password is not None:
            self.new_password = new_password
        if password_reset_token is not None:
            self.password_reset_token = password_reset_token

    @property
    def operation(self):
        """Gets the operation of this Authenticate.  # noqa: E501


        :return: The operation of this Authenticate.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Authenticate.


        :param operation: The operation of this Authenticate.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["authenticateWithPassword", "authenticate", "authenticateresponse", "logout", "passwordReset", "newpassword"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def user_name(self):
        """Gets the user_name of this Authenticate.  # noqa: E501


        :return: The user_name of this Authenticate.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Authenticate.


        :param user_name: The user_name of this Authenticate.  # noqa: E501
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this Authenticate.  # noqa: E501


        :return: The password of this Authenticate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Authenticate.


        :param password: The password of this Authenticate.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def signature(self):
        """Gets the signature of this Authenticate.  # noqa: E501


        :return: The signature of this Authenticate.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this Authenticate.


        :param signature: The signature of this Authenticate.  # noqa: E501
        :type signature: str
        """

        self._signature = signature

    @property
    def new_password(self):
        """Gets the new_password of this Authenticate.  # noqa: E501


        :return: The new_password of this Authenticate.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this Authenticate.


        :param new_password: The new_password of this Authenticate.  # noqa: E501
        :type new_password: str
        """

        self._new_password = new_password

    @property
    def password_reset_token(self):
        """Gets the password_reset_token of this Authenticate.  # noqa: E501


        :return: The password_reset_token of this Authenticate.  # noqa: E501
        :rtype: str
        """
        return self._password_reset_token

    @password_reset_token.setter
    def password_reset_token(self, password_reset_token):
        """Sets the password_reset_token of this Authenticate.


        :param password_reset_token: The password_reset_token of this Authenticate.  # noqa: E501
        :type password_reset_token: str
        """

        self._password_reset_token = password_reset_token

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Authenticate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Authenticate):
            return True

        return self.to_dict() != other.to_dict()
