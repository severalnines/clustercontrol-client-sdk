# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from openapi_cc_client.models.config_configuration_inner import ConfigConfigurationInner
from openapi_cc_client.models.config_ldap_configuration import ConfigLdapConfiguration

class Config(BaseModel):
    """
    Config
    """
    operation: StrictStr = Field(...)
    hostname: Optional[StrictStr] = None
    port: Optional[StrictInt] = None
    configuration: Optional[conlist(ConfigConfigurationInner)] = None
    ldap_configuration: Optional[ConfigLdapConfiguration] = None
    licensedata: Optional[StrictStr] = None
    __properties = ["operation", "hostname", "port", "configuration", "ldap_configuration", "licensedata"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('getConfig', 'setConfig', 'unsetConfig', 'getLdapConfig', 'setLdapConfig', 'setLicense', 'getLicense', 'listTemplates'):
            raise ValueError("must be one of enum values ('getConfig', 'setConfig', 'unsetConfig', 'getLdapConfig', 'setLdapConfig', 'setLicense', 'getLicense', 'listTemplates')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Config:
        """Create an instance of Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in configuration (list)
        _items = []
        if self.configuration:
            for _item in self.configuration:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configuration'] = _items
        # override the default output from pydantic by calling `to_dict()` of ldap_configuration
        if self.ldap_configuration:
            _dict['ldap_configuration'] = self.ldap_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Config:
        """Create an instance of Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Config.parse_obj(obj)

        _obj = Config.parse_obj({
            "operation": obj.get("operation"),
            "hostname": obj.get("hostname"),
            "port": obj.get("port"),
            "configuration": [ConfigConfigurationInner.from_dict(_item) for _item in obj.get("configuration")] if obj.get("configuration") is not None else None,
            "ldap_configuration": ConfigLdapConfiguration.from_dict(obj.get("ldap_configuration")) if obj.get("ldap_configuration") is not None else None,
            "licensedata": obj.get("licensedata")
        })
        return _obj


