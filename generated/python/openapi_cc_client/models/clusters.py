# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class Clusters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'cluster_id': 'int',
        'cluster_name': 'str',
        'with_hosts': 'bool',
        'with_sheet_info': 'bool',
        'configuration': 'list[ClustersConfigurationInner]',
        'account': 'ClustersAccount',
        'filter_strings': 'str',
        'limit': 'int',
        'offset': 'int',
        'database': 'ClustersDatabase',
        'nodes': 'list[str]'
    }

    attribute_map = {
        'operation': 'operation',
        'cluster_id': 'cluster_id',
        'cluster_name': 'cluster_name',
        'with_hosts': 'with_hosts',
        'with_sheet_info': 'with_sheet_info',
        'configuration': 'configuration',
        'account': 'account',
        'filter_strings': 'filter_strings',
        'limit': 'limit',
        'offset': 'offset',
        'database': 'database',
        'nodes': 'nodes'
    }

    def __init__(self, operation=None, cluster_id=None, cluster_name=None, with_hosts=None, with_sheet_info=None, configuration=None, account=None, filter_strings=None, limit=None, offset=None, database=None, nodes=None, local_vars_configuration=None):  # noqa: E501
        """Clusters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation = None
        self._cluster_id = None
        self._cluster_name = None
        self._with_hosts = None
        self._with_sheet_info = None
        self._configuration = None
        self._account = None
        self._filter_strings = None
        self._limit = None
        self._offset = None
        self._database = None
        self._nodes = None
        self.discriminator = None

        self.operation = operation
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if with_hosts is not None:
            self.with_hosts = with_hosts
        if with_sheet_info is not None:
            self.with_sheet_info = with_sheet_info
        if configuration is not None:
            self.configuration = configuration
        if account is not None:
            self.account = account
        if filter_strings is not None:
            self.filter_strings = filter_strings
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if database is not None:
            self.database = database
        if nodes is not None:
            self.nodes = nodes

    @property
    def operation(self):
        """Gets the operation of this Clusters.  # noqa: E501


        :return: The operation of this Clusters.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Clusters.


        :param operation: The operation of this Clusters.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["getallclusterinfo", "getclusterinfo", "getConfig", "setConfig", "createAccount", "getAccounts", "deleteAccount", "grantPrivileges", "revokePrivileges", "revokeAllPrivileges", "getSqlProcesses", "getTopQueries", "createDatabase", "ping", "availableUpgrades"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Clusters.  # noqa: E501


        :return: The cluster_id of this Clusters.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Clusters.


        :param cluster_id: The cluster_id of this Clusters.  # noqa: E501
        :type cluster_id: int
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Clusters.  # noqa: E501


        :return: The cluster_name of this Clusters.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Clusters.


        :param cluster_name: The cluster_name of this Clusters.  # noqa: E501
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def with_hosts(self):
        """Gets the with_hosts of this Clusters.  # noqa: E501


        :return: The with_hosts of this Clusters.  # noqa: E501
        :rtype: bool
        """
        return self._with_hosts

    @with_hosts.setter
    def with_hosts(self, with_hosts):
        """Sets the with_hosts of this Clusters.


        :param with_hosts: The with_hosts of this Clusters.  # noqa: E501
        :type with_hosts: bool
        """

        self._with_hosts = with_hosts

    @property
    def with_sheet_info(self):
        """Gets the with_sheet_info of this Clusters.  # noqa: E501


        :return: The with_sheet_info of this Clusters.  # noqa: E501
        :rtype: bool
        """
        return self._with_sheet_info

    @with_sheet_info.setter
    def with_sheet_info(self, with_sheet_info):
        """Sets the with_sheet_info of this Clusters.


        :param with_sheet_info: The with_sheet_info of this Clusters.  # noqa: E501
        :type with_sheet_info: bool
        """

        self._with_sheet_info = with_sheet_info

    @property
    def configuration(self):
        """Gets the configuration of this Clusters.  # noqa: E501


        :return: The configuration of this Clusters.  # noqa: E501
        :rtype: list[ClustersConfigurationInner]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Clusters.


        :param configuration: The configuration of this Clusters.  # noqa: E501
        :type configuration: list[ClustersConfigurationInner]
        """

        self._configuration = configuration

    @property
    def account(self):
        """Gets the account of this Clusters.  # noqa: E501


        :return: The account of this Clusters.  # noqa: E501
        :rtype: ClustersAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Clusters.


        :param account: The account of this Clusters.  # noqa: E501
        :type account: ClustersAccount
        """

        self._account = account

    @property
    def filter_strings(self):
        """Gets the filter_strings of this Clusters.  # noqa: E501


        :return: The filter_strings of this Clusters.  # noqa: E501
        :rtype: str
        """
        return self._filter_strings

    @filter_strings.setter
    def filter_strings(self, filter_strings):
        """Sets the filter_strings of this Clusters.


        :param filter_strings: The filter_strings of this Clusters.  # noqa: E501
        :type filter_strings: str
        """

        self._filter_strings = filter_strings

    @property
    def limit(self):
        """Gets the limit of this Clusters.  # noqa: E501


        :return: The limit of this Clusters.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Clusters.


        :param limit: The limit of this Clusters.  # noqa: E501
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this Clusters.  # noqa: E501


        :return: The offset of this Clusters.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Clusters.


        :param offset: The offset of this Clusters.  # noqa: E501
        :type offset: int
        """

        self._offset = offset

    @property
    def database(self):
        """Gets the database of this Clusters.  # noqa: E501


        :return: The database of this Clusters.  # noqa: E501
        :rtype: ClustersDatabase
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this Clusters.


        :param database: The database of this Clusters.  # noqa: E501
        :type database: ClustersDatabase
        """

        self._database = database

    @property
    def nodes(self):
        """Gets the nodes of this Clusters.  # noqa: E501


        :return: The nodes of this Clusters.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Clusters.


        :param nodes: The nodes of this Clusters.  # noqa: E501
        :type nodes: list[str]
        """

        self._nodes = nodes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Clusters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Clusters):
            return True

        return self.to_dict() != other.to_dict()
