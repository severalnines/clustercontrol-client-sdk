# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from openapi_cc_client.models.discovery_job import DiscoveryJob
from openapi_cc_client.models.discovery_nodes_inner import DiscoveryNodesInner
from openapi_cc_client.models.discovery_ssh_credentials import DiscoverySshCredentials

class Discovery(BaseModel):
    """
    Discovery
    """
    operation: StrictStr = Field(...)
    new_cluster_name: Optional[StrictStr] = None
    check_if_already_registered: Optional[StrictBool] = None
    check_job: Optional[StrictBool] = None
    check_ssh_sudo: Optional[StrictBool] = None
    nodes: Optional[conlist(DiscoveryNodesInner)] = None
    job: Optional[DiscoveryJob] = None
    ssh_credentials: Optional[DiscoverySshCredentials] = None
    __properties = ["operation", "new_cluster_name", "check_if_already_registered", "check_job", "check_ssh_sudo", "nodes", "job", "ssh_credentials"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('checkClusterName', 'getSupportedClusterTypes', 'checkHosts'):
            raise ValueError("must be one of enum values ('checkClusterName', 'getSupportedClusterTypes', 'checkHosts')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Discovery:
        """Create an instance of Discovery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item in self.nodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of job
        if self.job:
            _dict['job'] = self.job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_credentials
        if self.ssh_credentials:
            _dict['ssh_credentials'] = self.ssh_credentials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Discovery:
        """Create an instance of Discovery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Discovery.parse_obj(obj)

        _obj = Discovery.parse_obj({
            "operation": obj.get("operation"),
            "new_cluster_name": obj.get("new_cluster_name"),
            "check_if_already_registered": obj.get("check_if_already_registered"),
            "check_job": obj.get("check_job"),
            "check_ssh_sudo": obj.get("check_ssh_sudo"),
            "nodes": [DiscoveryNodesInner.from_dict(_item) for _item in obj.get("nodes")] if obj.get("nodes") is not None else None,
            "job": DiscoveryJob.from_dict(obj.get("job")) if obj.get("job") is not None else None,
            "ssh_credentials": DiscoverySshCredentials.from_dict(obj.get("ssh_credentials")) if obj.get("ssh_credentials") is not None else None
        })
        return _obj


