=begin
#Severalnines ClusterControl

#This is a ...

The version of the OpenAPI document: 1.0.0
Contact: sales@severalnines.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class JobsJobJobSpecJobDataNodes
    attr_accessor :class_name

    attr_accessor :cdt_path

    attr_accessor :acl

    attr_accessor :clusterid

    attr_accessor :ip

    attr_accessor :maintenance_mode

    attr_accessor :maintenance_mode_active

    attr_accessor :timestamp

    attr_accessor :unique_id

    attr_accessor :hostname

    attr_accessor :hostname_data

    attr_accessor :hostname_internal

    attr_accessor :port

    attr_accessor :nodetype

    attr_accessor :configfile

    attr_accessor :datadir

    attr_accessor :backup_dir

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_name' => :'class_name',
        :'cdt_path' => :'cdt_path',
        :'acl' => :'acl',
        :'clusterid' => :'clusterid',
        :'ip' => :'ip',
        :'maintenance_mode' => :'maintenance_mode',
        :'maintenance_mode_active' => :'maintenance_mode_active',
        :'timestamp' => :'timestamp',
        :'unique_id' => :'unique_id',
        :'hostname' => :'hostname',
        :'hostname_data' => :'hostname_data',
        :'hostname_internal' => :'hostname_internal',
        :'port' => :'port',
        :'nodetype' => :'nodetype',
        :'configfile' => :'configfile',
        :'datadir' => :'datadir',
        :'backup_dir' => :'backup_dir'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'class_name' => :'String',
        :'cdt_path' => :'String',
        :'acl' => :'String',
        :'clusterid' => :'Integer',
        :'ip' => :'String',
        :'maintenance_mode' => :'String',
        :'maintenance_mode_active' => :'Boolean',
        :'timestamp' => :'Integer',
        :'unique_id' => :'Integer',
        :'hostname' => :'String',
        :'hostname_data' => :'String',
        :'hostname_internal' => :'String',
        :'port' => :'String',
        :'nodetype' => :'String',
        :'configfile' => :'String',
        :'datadir' => :'String',
        :'backup_dir' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::JobsJobJobSpecJobDataNodes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::JobsJobJobSpecJobDataNodes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'class_name')
        self.class_name = attributes[:'class_name']
      end

      if attributes.key?(:'cdt_path')
        self.cdt_path = attributes[:'cdt_path']
      end

      if attributes.key?(:'acl')
        self.acl = attributes[:'acl']
      end

      if attributes.key?(:'clusterid')
        self.clusterid = attributes[:'clusterid']
      end

      if attributes.key?(:'ip')
        self.ip = attributes[:'ip']
      end

      if attributes.key?(:'maintenance_mode')
        self.maintenance_mode = attributes[:'maintenance_mode']
      end

      if attributes.key?(:'maintenance_mode_active')
        self.maintenance_mode_active = attributes[:'maintenance_mode_active']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'unique_id')
        self.unique_id = attributes[:'unique_id']
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'hostname_data')
        self.hostname_data = attributes[:'hostname_data']
      end

      if attributes.key?(:'hostname_internal')
        self.hostname_internal = attributes[:'hostname_internal']
      end

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.key?(:'nodetype')
        self.nodetype = attributes[:'nodetype']
      end

      if attributes.key?(:'configfile')
        self.configfile = attributes[:'configfile']
      end

      if attributes.key?(:'datadir')
        self.datadir = attributes[:'datadir']
      end

      if attributes.key?(:'backup_dir')
        self.backup_dir = attributes[:'backup_dir']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      class_name_validator = EnumAttributeValidator.new('String', ["CmonRedisHost", "CmonRedisSentinelHost", "CmonHost", "CmonPBMAgentHost", "CmonPgBouncerHost"])
      return false unless class_name_validator.valid?(@class_name)
      maintenance_mode_validator = EnumAttributeValidator.new('String', ["none"])
      return false unless maintenance_mode_validator.valid?(@maintenance_mode)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] class_name Object to be assigned
    def class_name=(class_name)
      validator = EnumAttributeValidator.new('String', ["CmonRedisHost", "CmonRedisSentinelHost", "CmonHost", "CmonPBMAgentHost", "CmonPgBouncerHost"])
      unless validator.valid?(class_name)
        fail ArgumentError, "invalid value for \"class_name\", must be one of #{validator.allowable_values}."
      end
      @class_name = class_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_mode Object to be assigned
    def maintenance_mode=(maintenance_mode)
      validator = EnumAttributeValidator.new('String', ["none"])
      unless validator.valid?(maintenance_mode)
        fail ArgumentError, "invalid value for \"maintenance_mode\", must be one of #{validator.allowable_values}."
      end
      @maintenance_mode = maintenance_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_name == o.class_name &&
          cdt_path == o.cdt_path &&
          acl == o.acl &&
          clusterid == o.clusterid &&
          ip == o.ip &&
          maintenance_mode == o.maintenance_mode &&
          maintenance_mode_active == o.maintenance_mode_active &&
          timestamp == o.timestamp &&
          unique_id == o.unique_id &&
          hostname == o.hostname &&
          hostname_data == o.hostname_data &&
          hostname_internal == o.hostname_internal &&
          port == o.port &&
          nodetype == o.nodetype &&
          configfile == o.configfile &&
          datadir == o.datadir &&
          backup_dir == o.backup_dir
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [class_name, cdt_path, acl, clusterid, ip, maintenance_mode, maintenance_mode_active, timestamp, unique_id, hostname, hostname_data, hostname_internal, port, nodetype, configfile, datadir, backup_dir].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
