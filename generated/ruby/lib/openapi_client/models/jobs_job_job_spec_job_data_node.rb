=begin
#Severalnines ClusterControl

#This is a ...

The version of the OpenAPI document: 1.0.0
Contact: sales@severalnines.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class JobsJobJobSpecJobDataNode
    attr_accessor :backend_name_ro

    attr_accessor :backend_name_rw

    attr_accessor :data_retention

    attr_accessor :data_retention_size

    attr_accessor :hostname

    attr_accessor :lb_admin

    attr_accessor :lb_password

    attr_accessor :lb_policy

    attr_accessor :max_connection_be

    attr_accessor :max_connection_fe

    attr_accessor :port

    attr_accessor :ro_port

    attr_accessor :rw_port

    attr_accessor :rw_splitting

    attr_accessor :stats_socket

    attr_accessor :timeout_client

    attr_accessor :timeout_server

    attr_accessor :xinetd_allow_from

    attr_accessor :scrape_interval

    attr_accessor :configuration

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'backend_name_ro' => :'backend_name_ro',
        :'backend_name_rw' => :'backend_name_rw',
        :'data_retention' => :'data_retention',
        :'data_retention_size' => :'data_retention_size',
        :'hostname' => :'hostname',
        :'lb_admin' => :'lb_admin',
        :'lb_password' => :'lb_password',
        :'lb_policy' => :'lb_policy',
        :'max_connection_be' => :'max_connection_be',
        :'max_connection_fe' => :'max_connection_fe',
        :'port' => :'port',
        :'ro_port' => :'ro_port',
        :'rw_port' => :'rw_port',
        :'rw_splitting' => :'rw_splitting',
        :'stats_socket' => :'stats_socket',
        :'timeout_client' => :'timeout_client',
        :'timeout_server' => :'timeout_server',
        :'xinetd_allow_from' => :'xinetd_allow_from',
        :'scrape_interval' => :'scrape_interval',
        :'configuration' => :'configuration'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'backend_name_ro' => :'String',
        :'backend_name_rw' => :'String',
        :'data_retention' => :'String',
        :'data_retention_size' => :'Integer',
        :'hostname' => :'String',
        :'lb_admin' => :'String',
        :'lb_password' => :'String',
        :'lb_policy' => :'String',
        :'max_connection_be' => :'Integer',
        :'max_connection_fe' => :'Integer',
        :'port' => :'Integer',
        :'ro_port' => :'Integer',
        :'rw_port' => :'Integer',
        :'rw_splitting' => :'Boolean',
        :'stats_socket' => :'String',
        :'timeout_client' => :'Integer',
        :'timeout_server' => :'Integer',
        :'xinetd_allow_from' => :'String',
        :'scrape_interval' => :'String',
        :'configuration' => :'Array<JobsJobJobSpecJobDataNodeConfiguration>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::JobsJobJobSpecJobDataNode` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::JobsJobJobSpecJobDataNode`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'backend_name_ro')
        self.backend_name_ro = attributes[:'backend_name_ro']
      end

      if attributes.key?(:'backend_name_rw')
        self.backend_name_rw = attributes[:'backend_name_rw']
      end

      if attributes.key?(:'data_retention')
        self.data_retention = attributes[:'data_retention']
      end

      if attributes.key?(:'data_retention_size')
        self.data_retention_size = attributes[:'data_retention_size']
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'lb_admin')
        self.lb_admin = attributes[:'lb_admin']
      end

      if attributes.key?(:'lb_password')
        self.lb_password = attributes[:'lb_password']
      end

      if attributes.key?(:'lb_policy')
        self.lb_policy = attributes[:'lb_policy']
      end

      if attributes.key?(:'max_connection_be')
        self.max_connection_be = attributes[:'max_connection_be']
      end

      if attributes.key?(:'max_connection_fe')
        self.max_connection_fe = attributes[:'max_connection_fe']
      end

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.key?(:'ro_port')
        self.ro_port = attributes[:'ro_port']
      end

      if attributes.key?(:'rw_port')
        self.rw_port = attributes[:'rw_port']
      end

      if attributes.key?(:'rw_splitting')
        self.rw_splitting = attributes[:'rw_splitting']
      end

      if attributes.key?(:'stats_socket')
        self.stats_socket = attributes[:'stats_socket']
      end

      if attributes.key?(:'timeout_client')
        self.timeout_client = attributes[:'timeout_client']
      end

      if attributes.key?(:'timeout_server')
        self.timeout_server = attributes[:'timeout_server']
      end

      if attributes.key?(:'xinetd_allow_from')
        self.xinetd_allow_from = attributes[:'xinetd_allow_from']
      end

      if attributes.key?(:'scrape_interval')
        self.scrape_interval = attributes[:'scrape_interval']
      end

      if attributes.key?(:'configuration')
        if (value = attributes[:'configuration']).is_a?(Array)
          self.configuration = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          backend_name_ro == o.backend_name_ro &&
          backend_name_rw == o.backend_name_rw &&
          data_retention == o.data_retention &&
          data_retention_size == o.data_retention_size &&
          hostname == o.hostname &&
          lb_admin == o.lb_admin &&
          lb_password == o.lb_password &&
          lb_policy == o.lb_policy &&
          max_connection_be == o.max_connection_be &&
          max_connection_fe == o.max_connection_fe &&
          port == o.port &&
          ro_port == o.ro_port &&
          rw_port == o.rw_port &&
          rw_splitting == o.rw_splitting &&
          stats_socket == o.stats_socket &&
          timeout_client == o.timeout_client &&
          timeout_server == o.timeout_server &&
          xinetd_allow_from == o.xinetd_allow_from &&
          scrape_interval == o.scrape_interval &&
          configuration == o.configuration
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [backend_name_ro, backend_name_rw, data_retention, data_retention_size, hostname, lb_admin, lb_password, lb_policy, max_connection_be, max_connection_fe, port, ro_port, rw_port, rw_splitting, stats_socket, timeout_client, timeout_server, xinetd_allow_from, scrape_interval, configuration].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
