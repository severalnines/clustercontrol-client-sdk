=begin
#Severalnines ClusterControl

#This is a ...

The version of the OpenAPI document: 1.0.0
Contact: sales@severalnines.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class JobsJobJobSpecJobData
    attr_accessor :action

    attr_accessor :addnode

    attr_accessor :admin_username

    attr_accessor :admin_user

    attr_accessor :admin_password

    attr_accessor :audit_events

    attr_accessor :backupid

    attr_accessor :backup_id

    attr_accessor :build_from_source

    attr_accessor :cluster_name

    attr_accessor :clusterid

    attr_accessor :cluster_type

    attr_accessor :company_id

    attr_accessor :config_template

    attr_accessor :backup_failover

    attr_accessor :backup_failover_host

    attr_accessor :backup_method

    attr_accessor :backup_mysqldump_type

    attr_accessor :backup_individual_schemas

    attr_accessor :backup_retention

    attr_accessor :extended_insert

    attr_accessor :backup_dir

    attr_accessor :backupsubdir

    attr_accessor :cc_storage

    attr_accessor :compression

    attr_accessor :compression_level

    attr_accessor :db_database

    attr_accessor :db_password

    attr_accessor :db_privs

    attr_accessor :db_username

    attr_accessor :exec_upgrade_script

    attr_accessor :listening_port

    attr_accessor :monitor_password

    attr_accessor :monitor_user

    attr_accessor :use_clustering

    attr_accessor :use_rw_split

    attr_accessor :hostname

    attr_accessor :master_address

    attr_accessor :include_databases

    attr_accessor :install_timescaledb

    attr_accessor :update_lb

    attr_accessor :encrypt_backup

    attr_accessor :throttle_rate_netbw

    attr_accessor :use_pigz

    attr_accessor :use_qpress

    attr_accessor :wsrep_desync

    attr_accessor :xtrabackup_backup_locks

    attr_accessor :xtrabackup_lock_ddl_per_table

    attr_accessor :xtrabackup_parallellism

    attr_accessor :verify_backup_delay

    attr_accessor :data_dir

    attr_accessor :db_user

    attr_accessor :disable_firewall

    attr_accessor :disable_selinux

    attr_accessor :enabl_uninstall

    attr_accessor :generate_token

    attr_accessor :install_software

    attr_accessor :enable_mysql_uninstall

    attr_accessor :mysql_semi_sync

    attr_accessor :enable_ssl

    attr_accessor :mongos_conf_template

    attr_accessor :mongodb_authdb

    attr_accessor :node_type

    attr_accessor :overwrite_mysqlchk

    attr_accessor :port

    attr_accessor :ssh_keyfile

    attr_accessor :ssh_port

    attr_accessor :ssh_user

    attr_accessor :sudo_password

    attr_accessor :user_id

    attr_accessor :vendor

    attr_accessor :version

    attr_accessor :software_package

    attr_accessor :server_address

    attr_accessor :terminate_db_server

    attr_accessor :xtrabackup_use_memory

    attr_accessor :initial

    attr_accessor :reboot

    attr_accessor :slave_address

    attr_accessor :force

    attr_accessor :force_stop

    attr_accessor :stop_timeout

    attr_accessor :verify_backup

    attr_accessor :config_servers

    attr_accessor :mongos_servers2

    attr_accessor :node

    attr_accessor :nodes

    attr_accessor :node_adresses

    attr_accessor :topology

    attr_accessor :replica_sets

    attr_accessor :with_tags

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action' => :'action',
        :'addnode' => :'addnode',
        :'admin_username' => :'admin_username',
        :'admin_user' => :'admin_user',
        :'admin_password' => :'admin_password',
        :'audit_events' => :'audit_events',
        :'backupid' => :'backupid',
        :'backup_id' => :'backup_id',
        :'build_from_source' => :'build_from_source',
        :'cluster_name' => :'cluster_name',
        :'clusterid' => :'clusterid',
        :'cluster_type' => :'cluster_type',
        :'company_id' => :'company_id',
        :'config_template' => :'config_template',
        :'backup_failover' => :'backup_failover',
        :'backup_failover_host' => :'backup_failover_host',
        :'backup_method' => :'backup_method',
        :'backup_mysqldump_type' => :'backup_mysqldump_type',
        :'backup_individual_schemas' => :'backup_individual_schemas',
        :'backup_retention' => :'backup_retention',
        :'extended_insert' => :'extended_insert',
        :'backup_dir' => :'backup_dir',
        :'backupsubdir' => :'backupsubdir',
        :'cc_storage' => :'cc_storage',
        :'compression' => :'compression',
        :'compression_level' => :'compression_level',
        :'db_database' => :'db_database',
        :'db_password' => :'db_password',
        :'db_privs' => :'db_privs',
        :'db_username' => :'db_username',
        :'exec_upgrade_script' => :'exec_upgrade_script',
        :'listening_port' => :'listening_port',
        :'monitor_password' => :'monitor_password',
        :'monitor_user' => :'monitor_user',
        :'use_clustering' => :'use_clustering',
        :'use_rw_split' => :'use_rw_split',
        :'hostname' => :'hostname',
        :'master_address' => :'master_address',
        :'include_databases' => :'include_databases',
        :'install_timescaledb' => :'install_timescaledb',
        :'update_lb' => :'update_lb',
        :'encrypt_backup' => :'encrypt_backup',
        :'throttle_rate_netbw' => :'throttle_rate_netbw',
        :'use_pigz' => :'use_pigz',
        :'use_qpress' => :'use_qpress',
        :'wsrep_desync' => :'wsrep_desync',
        :'xtrabackup_backup_locks' => :'xtrabackup_backup_locks',
        :'xtrabackup_lock_ddl_per_table' => :'xtrabackup_lock_ddl_per_table',
        :'xtrabackup_parallellism' => :'xtrabackup_parallellism',
        :'verify_backup_delay' => :'verify_backup_delay',
        :'data_dir' => :'data_dir',
        :'db_user' => :'db_user',
        :'disable_firewall' => :'disable_firewall',
        :'disable_selinux' => :'disable_selinux',
        :'enabl_uninstall' => :'enabl_uninstall',
        :'generate_token' => :'generate_token',
        :'install_software' => :'install_software',
        :'enable_mysql_uninstall' => :'enable_mysql_uninstall',
        :'mysql_semi_sync' => :'mysql_semi_sync',
        :'enable_ssl' => :'enable_ssl',
        :'mongos_conf_template' => :'mongos_conf_template',
        :'mongodb_authdb' => :'mongodb_authdb',
        :'node_type' => :'node_type',
        :'overwrite_mysqlchk' => :'overwrite_mysqlchk',
        :'port' => :'port',
        :'ssh_keyfile' => :'ssh_keyfile',
        :'ssh_port' => :'ssh_port',
        :'ssh_user' => :'ssh_user',
        :'sudo_password' => :'sudo_password',
        :'user_id' => :'user_id',
        :'vendor' => :'vendor',
        :'version' => :'version',
        :'software_package' => :'software_package',
        :'server_address' => :'server_address',
        :'terminate_db_server' => :'terminate_db_server',
        :'xtrabackup_use_memory' => :'xtrabackup_use_memory',
        :'initial' => :'initial',
        :'reboot' => :'reboot',
        :'slave_address' => :'slave_address',
        :'force' => :'force',
        :'force_stop' => :'force_stop',
        :'stop_timeout' => :'stop_timeout',
        :'verify_backup' => :'verify_backup',
        :'config_servers' => :'config_servers',
        :'mongos_servers2' => :'mongos_servers2',
        :'node' => :'node',
        :'nodes' => :'nodes',
        :'node_adresses' => :'node_adresses',
        :'topology' => :'topology',
        :'replica_sets' => :'replica_sets',
        :'with_tags' => :'with_tags'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'action' => :'String',
        :'addnode' => :'Boolean',
        :'admin_username' => :'String',
        :'admin_user' => :'String',
        :'admin_password' => :'String',
        :'audit_events' => :'String',
        :'backupid' => :'Integer',
        :'backup_id' => :'Integer',
        :'build_from_source' => :'Boolean',
        :'cluster_name' => :'String',
        :'clusterid' => :'Integer',
        :'cluster_type' => :'String',
        :'company_id' => :'String',
        :'config_template' => :'String',
        :'backup_failover' => :'Boolean',
        :'backup_failover_host' => :'String',
        :'backup_method' => :'String',
        :'backup_mysqldump_type' => :'String',
        :'backup_individual_schemas' => :'Boolean',
        :'backup_retention' => :'Integer',
        :'extended_insert' => :'Boolean',
        :'backup_dir' => :'String',
        :'backupsubdir' => :'String',
        :'cc_storage' => :'String',
        :'compression' => :'Boolean',
        :'compression_level' => :'Integer',
        :'db_database' => :'String',
        :'db_password' => :'String',
        :'db_privs' => :'String',
        :'db_username' => :'String',
        :'exec_upgrade_script' => :'Boolean',
        :'listening_port' => :'Integer',
        :'monitor_password' => :'String',
        :'monitor_user' => :'String',
        :'use_clustering' => :'Boolean',
        :'use_rw_split' => :'Boolean',
        :'hostname' => :'String',
        :'master_address' => :'String',
        :'include_databases' => :'String',
        :'install_timescaledb' => :'Boolean',
        :'update_lb' => :'Boolean',
        :'encrypt_backup' => :'Boolean',
        :'throttle_rate_netbw' => :'Integer',
        :'use_pigz' => :'Boolean',
        :'use_qpress' => :'Boolean',
        :'wsrep_desync' => :'Boolean',
        :'xtrabackup_backup_locks' => :'Boolean',
        :'xtrabackup_lock_ddl_per_table' => :'Boolean',
        :'xtrabackup_parallellism' => :'Integer',
        :'verify_backup_delay' => :'Integer',
        :'data_dir' => :'String',
        :'db_user' => :'String',
        :'disable_firewall' => :'Boolean',
        :'disable_selinux' => :'Boolean',
        :'enabl_uninstall' => :'Boolean',
        :'generate_token' => :'Boolean',
        :'install_software' => :'Boolean',
        :'enable_mysql_uninstall' => :'Boolean',
        :'mysql_semi_sync' => :'Boolean',
        :'enable_ssl' => :'Boolean',
        :'mongos_conf_template' => :'String',
        :'mongodb_authdb' => :'String',
        :'node_type' => :'Integer',
        :'overwrite_mysqlchk' => :'Boolean',
        :'port' => :'Integer',
        :'ssh_keyfile' => :'String',
        :'ssh_port' => :'String',
        :'ssh_user' => :'String',
        :'sudo_password' => :'String',
        :'user_id' => :'Integer',
        :'vendor' => :'String',
        :'version' => :'String',
        :'software_package' => :'String',
        :'server_address' => :'String',
        :'terminate_db_server' => :'Boolean',
        :'xtrabackup_use_memory' => :'Integer',
        :'initial' => :'Boolean',
        :'reboot' => :'Boolean',
        :'slave_address' => :'String',
        :'force' => :'Boolean',
        :'force_stop' => :'Boolean',
        :'stop_timeout' => :'Integer',
        :'verify_backup' => :'JobsJobJobSpecJobDataVerifyBackup',
        :'config_servers' => :'JobsJobJobSpecJobDataConfigServers',
        :'mongos_servers2' => :'Array<JobsJobJobSpecJobDataConfigServersMembers>',
        :'node' => :'JobsJobJobSpecJobDataNode',
        :'nodes' => :'Array<JobsJobJobSpecJobDataNodes>',
        :'node_adresses' => :'Array<JobsJobJobSpecJobDataNodeAdresses>',
        :'topology' => :'JobsJobJobSpecJobDataTopology',
        :'replica_sets' => :'Array<JobsJobJobSpecJobDataReplicaSets>',
        :'with_tags' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::JobsJobJobSpecJobData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::JobsJobJobSpecJobData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'addnode')
        self.addnode = attributes[:'addnode']
      end

      if attributes.key?(:'admin_username')
        self.admin_username = attributes[:'admin_username']
      end

      if attributes.key?(:'admin_user')
        self.admin_user = attributes[:'admin_user']
      end

      if attributes.key?(:'admin_password')
        self.admin_password = attributes[:'admin_password']
      end

      if attributes.key?(:'audit_events')
        self.audit_events = attributes[:'audit_events']
      end

      if attributes.key?(:'backupid')
        self.backupid = attributes[:'backupid']
      end

      if attributes.key?(:'backup_id')
        self.backup_id = attributes[:'backup_id']
      end

      if attributes.key?(:'build_from_source')
        self.build_from_source = attributes[:'build_from_source']
      end

      if attributes.key?(:'cluster_name')
        self.cluster_name = attributes[:'cluster_name']
      end

      if attributes.key?(:'clusterid')
        self.clusterid = attributes[:'clusterid']
      end

      if attributes.key?(:'cluster_type')
        self.cluster_type = attributes[:'cluster_type']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'config_template')
        self.config_template = attributes[:'config_template']
      end

      if attributes.key?(:'backup_failover')
        self.backup_failover = attributes[:'backup_failover']
      end

      if attributes.key?(:'backup_failover_host')
        self.backup_failover_host = attributes[:'backup_failover_host']
      end

      if attributes.key?(:'backup_method')
        self.backup_method = attributes[:'backup_method']
      end

      if attributes.key?(:'backup_mysqldump_type')
        self.backup_mysqldump_type = attributes[:'backup_mysqldump_type']
      end

      if attributes.key?(:'backup_individual_schemas')
        self.backup_individual_schemas = attributes[:'backup_individual_schemas']
      end

      if attributes.key?(:'backup_retention')
        self.backup_retention = attributes[:'backup_retention']
      end

      if attributes.key?(:'extended_insert')
        self.extended_insert = attributes[:'extended_insert']
      end

      if attributes.key?(:'backup_dir')
        self.backup_dir = attributes[:'backup_dir']
      end

      if attributes.key?(:'backupsubdir')
        self.backupsubdir = attributes[:'backupsubdir']
      end

      if attributes.key?(:'cc_storage')
        self.cc_storage = attributes[:'cc_storage']
      end

      if attributes.key?(:'compression')
        self.compression = attributes[:'compression']
      end

      if attributes.key?(:'compression_level')
        self.compression_level = attributes[:'compression_level']
      end

      if attributes.key?(:'db_database')
        self.db_database = attributes[:'db_database']
      end

      if attributes.key?(:'db_password')
        self.db_password = attributes[:'db_password']
      end

      if attributes.key?(:'db_privs')
        self.db_privs = attributes[:'db_privs']
      end

      if attributes.key?(:'db_username')
        self.db_username = attributes[:'db_username']
      end

      if attributes.key?(:'exec_upgrade_script')
        self.exec_upgrade_script = attributes[:'exec_upgrade_script']
      end

      if attributes.key?(:'listening_port')
        self.listening_port = attributes[:'listening_port']
      end

      if attributes.key?(:'monitor_password')
        self.monitor_password = attributes[:'monitor_password']
      end

      if attributes.key?(:'monitor_user')
        self.monitor_user = attributes[:'monitor_user']
      end

      if attributes.key?(:'use_clustering')
        self.use_clustering = attributes[:'use_clustering']
      end

      if attributes.key?(:'use_rw_split')
        self.use_rw_split = attributes[:'use_rw_split']
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'master_address')
        self.master_address = attributes[:'master_address']
      end

      if attributes.key?(:'include_databases')
        self.include_databases = attributes[:'include_databases']
      end

      if attributes.key?(:'install_timescaledb')
        self.install_timescaledb = attributes[:'install_timescaledb']
      end

      if attributes.key?(:'update_lb')
        self.update_lb = attributes[:'update_lb']
      end

      if attributes.key?(:'encrypt_backup')
        self.encrypt_backup = attributes[:'encrypt_backup']
      end

      if attributes.key?(:'throttle_rate_netbw')
        self.throttle_rate_netbw = attributes[:'throttle_rate_netbw']
      end

      if attributes.key?(:'use_pigz')
        self.use_pigz = attributes[:'use_pigz']
      end

      if attributes.key?(:'use_qpress')
        self.use_qpress = attributes[:'use_qpress']
      end

      if attributes.key?(:'wsrep_desync')
        self.wsrep_desync = attributes[:'wsrep_desync']
      end

      if attributes.key?(:'xtrabackup_backup_locks')
        self.xtrabackup_backup_locks = attributes[:'xtrabackup_backup_locks']
      end

      if attributes.key?(:'xtrabackup_lock_ddl_per_table')
        self.xtrabackup_lock_ddl_per_table = attributes[:'xtrabackup_lock_ddl_per_table']
      end

      if attributes.key?(:'xtrabackup_parallellism')
        self.xtrabackup_parallellism = attributes[:'xtrabackup_parallellism']
      end

      if attributes.key?(:'verify_backup_delay')
        self.verify_backup_delay = attributes[:'verify_backup_delay']
      end

      if attributes.key?(:'data_dir')
        self.data_dir = attributes[:'data_dir']
      end

      if attributes.key?(:'db_user')
        self.db_user = attributes[:'db_user']
      end

      if attributes.key?(:'disable_firewall')
        self.disable_firewall = attributes[:'disable_firewall']
      end

      if attributes.key?(:'disable_selinux')
        self.disable_selinux = attributes[:'disable_selinux']
      end

      if attributes.key?(:'enabl_uninstall')
        self.enabl_uninstall = attributes[:'enabl_uninstall']
      end

      if attributes.key?(:'generate_token')
        self.generate_token = attributes[:'generate_token']
      end

      if attributes.key?(:'install_software')
        self.install_software = attributes[:'install_software']
      end

      if attributes.key?(:'enable_mysql_uninstall')
        self.enable_mysql_uninstall = attributes[:'enable_mysql_uninstall']
      end

      if attributes.key?(:'mysql_semi_sync')
        self.mysql_semi_sync = attributes[:'mysql_semi_sync']
      end

      if attributes.key?(:'enable_ssl')
        self.enable_ssl = attributes[:'enable_ssl']
      end

      if attributes.key?(:'mongos_conf_template')
        self.mongos_conf_template = attributes[:'mongos_conf_template']
      end

      if attributes.key?(:'mongodb_authdb')
        self.mongodb_authdb = attributes[:'mongodb_authdb']
      end

      if attributes.key?(:'node_type')
        self.node_type = attributes[:'node_type']
      end

      if attributes.key?(:'overwrite_mysqlchk')
        self.overwrite_mysqlchk = attributes[:'overwrite_mysqlchk']
      end

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.key?(:'ssh_keyfile')
        self.ssh_keyfile = attributes[:'ssh_keyfile']
      end

      if attributes.key?(:'ssh_port')
        self.ssh_port = attributes[:'ssh_port']
      end

      if attributes.key?(:'ssh_user')
        self.ssh_user = attributes[:'ssh_user']
      end

      if attributes.key?(:'sudo_password')
        self.sudo_password = attributes[:'sudo_password']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'software_package')
        self.software_package = attributes[:'software_package']
      end

      if attributes.key?(:'server_address')
        self.server_address = attributes[:'server_address']
      end

      if attributes.key?(:'terminate_db_server')
        self.terminate_db_server = attributes[:'terminate_db_server']
      end

      if attributes.key?(:'xtrabackup_use_memory')
        self.xtrabackup_use_memory = attributes[:'xtrabackup_use_memory']
      end

      if attributes.key?(:'initial')
        self.initial = attributes[:'initial']
      end

      if attributes.key?(:'reboot')
        self.reboot = attributes[:'reboot']
      end

      if attributes.key?(:'slave_address')
        self.slave_address = attributes[:'slave_address']
      end

      if attributes.key?(:'force')
        self.force = attributes[:'force']
      end

      if attributes.key?(:'force_stop')
        self.force_stop = attributes[:'force_stop']
      end

      if attributes.key?(:'stop_timeout')
        self.stop_timeout = attributes[:'stop_timeout']
      end

      if attributes.key?(:'verify_backup')
        self.verify_backup = attributes[:'verify_backup']
      end

      if attributes.key?(:'config_servers')
        self.config_servers = attributes[:'config_servers']
      end

      if attributes.key?(:'mongos_servers2')
        if (value = attributes[:'mongos_servers2']).is_a?(Array)
          self.mongos_servers2 = value
        end
      end

      if attributes.key?(:'node')
        self.node = attributes[:'node']
      end

      if attributes.key?(:'nodes')
        if (value = attributes[:'nodes']).is_a?(Array)
          self.nodes = value
        end
      end

      if attributes.key?(:'node_adresses')
        if (value = attributes[:'node_adresses']).is_a?(Array)
          self.node_adresses = value
        end
      end

      if attributes.key?(:'topology')
        self.topology = attributes[:'topology']
      end

      if attributes.key?(:'replica_sets')
        if (value = attributes[:'replica_sets']).is_a?(Array)
          self.replica_sets = value
        end
      end

      if attributes.key?(:'with_tags')
        if (value = attributes[:'with_tags']).is_a?(Array)
          self.with_tags = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      action_validator = EnumAttributeValidator.new('String', ["enable", "setup", "setupHaProxy", "setupProxySql"])
      return false unless action_validator.valid?(@action)
      cluster_type_validator = EnumAttributeValidator.new('String', ["mssql_single", "redis", "mongodb", "mssql_ao_async", "postgresql_single", "replication", "galera"])
      return false unless cluster_type_validator.valid?(@cluster_type)
      backup_failover_host_validator = EnumAttributeValidator.new('String', ["auto"])
      return false unless backup_failover_host_validator.valid?(@backup_failover_host)
      backup_method_validator = EnumAttributeValidator.new('String', ["xtrabackupfull", "xtrabackupincr", "pgbackrestfull", "pgbackrestincr", "pgbackrestdiff", "pg_basebackup", "mysqldump", "percona-backup-mongodb", "mssqlcert"])
      return false unless backup_method_validator.valid?(@backup_method)
      backup_mysqldump_type_validator = EnumAttributeValidator.new('String', ["Complete", "SchemaAndData", "SchemaOnly", "DataOnly", "MySQLDbOnly"])
      return false unless backup_mysqldump_type_validator.valid?(@backup_mysqldump_type)
      vendor_validator = EnumAttributeValidator.new('String', ["defalt", "percona", "microsoft", "redis"])
      return false unless vendor_validator.valid?(@vendor)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["enable", "setup", "setupHaProxy", "setupProxySql"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cluster_type Object to be assigned
    def cluster_type=(cluster_type)
      validator = EnumAttributeValidator.new('String', ["mssql_single", "redis", "mongodb", "mssql_ao_async", "postgresql_single", "replication", "galera"])
      unless validator.valid?(cluster_type)
        fail ArgumentError, "invalid value for \"cluster_type\", must be one of #{validator.allowable_values}."
      end
      @cluster_type = cluster_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] backup_failover_host Object to be assigned
    def backup_failover_host=(backup_failover_host)
      validator = EnumAttributeValidator.new('String', ["auto"])
      unless validator.valid?(backup_failover_host)
        fail ArgumentError, "invalid value for \"backup_failover_host\", must be one of #{validator.allowable_values}."
      end
      @backup_failover_host = backup_failover_host
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] backup_method Object to be assigned
    def backup_method=(backup_method)
      validator = EnumAttributeValidator.new('String', ["xtrabackupfull", "xtrabackupincr", "pgbackrestfull", "pgbackrestincr", "pgbackrestdiff", "pg_basebackup", "mysqldump", "percona-backup-mongodb", "mssqlcert"])
      unless validator.valid?(backup_method)
        fail ArgumentError, "invalid value for \"backup_method\", must be one of #{validator.allowable_values}."
      end
      @backup_method = backup_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] backup_mysqldump_type Object to be assigned
    def backup_mysqldump_type=(backup_mysqldump_type)
      validator = EnumAttributeValidator.new('String', ["Complete", "SchemaAndData", "SchemaOnly", "DataOnly", "MySQLDbOnly"])
      unless validator.valid?(backup_mysqldump_type)
        fail ArgumentError, "invalid value for \"backup_mysqldump_type\", must be one of #{validator.allowable_values}."
      end
      @backup_mysqldump_type = backup_mysqldump_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vendor Object to be assigned
    def vendor=(vendor)
      validator = EnumAttributeValidator.new('String', ["defalt", "percona", "microsoft", "redis"])
      unless validator.valid?(vendor)
        fail ArgumentError, "invalid value for \"vendor\", must be one of #{validator.allowable_values}."
      end
      @vendor = vendor
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          addnode == o.addnode &&
          admin_username == o.admin_username &&
          admin_user == o.admin_user &&
          admin_password == o.admin_password &&
          audit_events == o.audit_events &&
          backupid == o.backupid &&
          backup_id == o.backup_id &&
          build_from_source == o.build_from_source &&
          cluster_name == o.cluster_name &&
          clusterid == o.clusterid &&
          cluster_type == o.cluster_type &&
          company_id == o.company_id &&
          config_template == o.config_template &&
          backup_failover == o.backup_failover &&
          backup_failover_host == o.backup_failover_host &&
          backup_method == o.backup_method &&
          backup_mysqldump_type == o.backup_mysqldump_type &&
          backup_individual_schemas == o.backup_individual_schemas &&
          backup_retention == o.backup_retention &&
          extended_insert == o.extended_insert &&
          backup_dir == o.backup_dir &&
          backupsubdir == o.backupsubdir &&
          cc_storage == o.cc_storage &&
          compression == o.compression &&
          compression_level == o.compression_level &&
          db_database == o.db_database &&
          db_password == o.db_password &&
          db_privs == o.db_privs &&
          db_username == o.db_username &&
          exec_upgrade_script == o.exec_upgrade_script &&
          listening_port == o.listening_port &&
          monitor_password == o.monitor_password &&
          monitor_user == o.monitor_user &&
          use_clustering == o.use_clustering &&
          use_rw_split == o.use_rw_split &&
          hostname == o.hostname &&
          master_address == o.master_address &&
          include_databases == o.include_databases &&
          install_timescaledb == o.install_timescaledb &&
          update_lb == o.update_lb &&
          encrypt_backup == o.encrypt_backup &&
          throttle_rate_netbw == o.throttle_rate_netbw &&
          use_pigz == o.use_pigz &&
          use_qpress == o.use_qpress &&
          wsrep_desync == o.wsrep_desync &&
          xtrabackup_backup_locks == o.xtrabackup_backup_locks &&
          xtrabackup_lock_ddl_per_table == o.xtrabackup_lock_ddl_per_table &&
          xtrabackup_parallellism == o.xtrabackup_parallellism &&
          verify_backup_delay == o.verify_backup_delay &&
          data_dir == o.data_dir &&
          db_user == o.db_user &&
          disable_firewall == o.disable_firewall &&
          disable_selinux == o.disable_selinux &&
          enabl_uninstall == o.enabl_uninstall &&
          generate_token == o.generate_token &&
          install_software == o.install_software &&
          enable_mysql_uninstall == o.enable_mysql_uninstall &&
          mysql_semi_sync == o.mysql_semi_sync &&
          enable_ssl == o.enable_ssl &&
          mongos_conf_template == o.mongos_conf_template &&
          mongodb_authdb == o.mongodb_authdb &&
          node_type == o.node_type &&
          overwrite_mysqlchk == o.overwrite_mysqlchk &&
          port == o.port &&
          ssh_keyfile == o.ssh_keyfile &&
          ssh_port == o.ssh_port &&
          ssh_user == o.ssh_user &&
          sudo_password == o.sudo_password &&
          user_id == o.user_id &&
          vendor == o.vendor &&
          version == o.version &&
          software_package == o.software_package &&
          server_address == o.server_address &&
          terminate_db_server == o.terminate_db_server &&
          xtrabackup_use_memory == o.xtrabackup_use_memory &&
          initial == o.initial &&
          reboot == o.reboot &&
          slave_address == o.slave_address &&
          force == o.force &&
          force_stop == o.force_stop &&
          stop_timeout == o.stop_timeout &&
          verify_backup == o.verify_backup &&
          config_servers == o.config_servers &&
          mongos_servers2 == o.mongos_servers2 &&
          node == o.node &&
          nodes == o.nodes &&
          node_adresses == o.node_adresses &&
          topology == o.topology &&
          replica_sets == o.replica_sets &&
          with_tags == o.with_tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [action, addnode, admin_username, admin_user, admin_password, audit_events, backupid, backup_id, build_from_source, cluster_name, clusterid, cluster_type, company_id, config_template, backup_failover, backup_failover_host, backup_method, backup_mysqldump_type, backup_individual_schemas, backup_retention, extended_insert, backup_dir, backupsubdir, cc_storage, compression, compression_level, db_database, db_password, db_privs, db_username, exec_upgrade_script, listening_port, monitor_password, monitor_user, use_clustering, use_rw_split, hostname, master_address, include_databases, install_timescaledb, update_lb, encrypt_backup, throttle_rate_netbw, use_pigz, use_qpress, wsrep_desync, xtrabackup_backup_locks, xtrabackup_lock_ddl_per_table, xtrabackup_parallellism, verify_backup_delay, data_dir, db_user, disable_firewall, disable_selinux, enabl_uninstall, generate_token, install_software, enable_mysql_uninstall, mysql_semi_sync, enable_ssl, mongos_conf_template, mongodb_authdb, node_type, overwrite_mysqlchk, port, ssh_keyfile, ssh_port, ssh_user, sudo_password, user_id, vendor, version, software_package, server_address, terminate_db_server, xtrabackup_use_memory, initial, reboot, slave_address, force, force_stop, stop_timeout, verify_backup, config_servers, mongos_servers2, node, nodes, node_adresses, topology, replica_sets, with_tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
