/*
 * Severalnines ClusterControl
 * This is a ...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * Stat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-17T17:47:57.934643-04:00[America/New_York]")
public class Stat {
  /**
   * Gets or Sets operation
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    GETINFO("getInfo"),
    
    STATBYNAME("statByName"),
    
    GETCPUPHYSICALINFO("getCpuPhysicalInfo"),
    
    GETDBGROWTH("getDbGrowth");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationEnum operation;

  public static final String SERIALIZED_NAME_CLUSTER_ID = "cluster_id";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private Integer clusterId;

  /**
   * stat name. e.g. cpustat
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    CPUSTAT("cpustat");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  public static final String SERIALIZED_NAME_START_DATETIME = "start_datetime";
  @SerializedName(SERIALIZED_NAME_START_DATETIME)
  private String startDatetime;

  public static final String SERIALIZED_NAME_END_DATETIME = "end_datetime";
  @SerializedName(SERIALIZED_NAME_END_DATETIME)
  private String endDatetime;

  public static final String SERIALIZED_NAME_WITH_HOSTS = "with_hosts";
  @SerializedName(SERIALIZED_NAME_WITH_HOSTS)
  private Boolean withHosts;

  public static final String SERIALIZED_NAME_CALCULATE_PER_SEC = "calculate_per_sec";
  @SerializedName(SERIALIZED_NAME_CALCULATE_PER_SEC)
  private Boolean calculatePerSec;

  public Stat() { 
  }

  public Stat operation(OperationEnum operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OperationEnum getOperation() {
    return operation;
  }


  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  public Stat clusterId(Integer clusterId) {
    
    this.clusterId = clusterId;
    return this;
  }

   /**
   * Get clusterId
   * @return clusterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getClusterId() {
    return clusterId;
  }


  public void setClusterId(Integer clusterId) {
    this.clusterId = clusterId;
  }


  public Stat name(NameEnum name) {
    
    this.name = name;
    return this;
  }

   /**
   * stat name. e.g. cpustat
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "stat name. e.g. cpustat")

  public NameEnum getName() {
    return name;
  }


  public void setName(NameEnum name) {
    this.name = name;
  }


  public Stat startDatetime(String startDatetime) {
    
    this.startDatetime = startDatetime;
    return this;
  }

   /**
   * e.g. \&quot;15:20\&quot;
   * @return startDatetime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "e.g. \"15:20\"")

  public String getStartDatetime() {
    return startDatetime;
  }


  public void setStartDatetime(String startDatetime) {
    this.startDatetime = startDatetime;
  }


  public Stat endDatetime(String endDatetime) {
    
    this.endDatetime = endDatetime;
    return this;
  }

   /**
   * e.g. \&quot;15:21\&quot;
   * @return endDatetime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "e.g. \"15:21\"")

  public String getEndDatetime() {
    return endDatetime;
  }


  public void setEndDatetime(String endDatetime) {
    this.endDatetime = endDatetime;
  }


  public Stat withHosts(Boolean withHosts) {
    
    this.withHosts = withHosts;
    return this;
  }

   /**
   * Get withHosts
   * @return withHosts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getWithHosts() {
    return withHosts;
  }


  public void setWithHosts(Boolean withHosts) {
    this.withHosts = withHosts;
  }


  public Stat calculatePerSec(Boolean calculatePerSec) {
    
    this.calculatePerSec = calculatePerSec;
    return this;
  }

   /**
   * Get calculatePerSec
   * @return calculatePerSec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCalculatePerSec() {
    return calculatePerSec;
  }


  public void setCalculatePerSec(Boolean calculatePerSec) {
    this.calculatePerSec = calculatePerSec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stat stat = (Stat) o;
    return Objects.equals(this.operation, stat.operation) &&
        Objects.equals(this.clusterId, stat.clusterId) &&
        Objects.equals(this.name, stat.name) &&
        Objects.equals(this.startDatetime, stat.startDatetime) &&
        Objects.equals(this.endDatetime, stat.endDatetime) &&
        Objects.equals(this.withHosts, stat.withHosts) &&
        Objects.equals(this.calculatePerSec, stat.calculatePerSec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, clusterId, name, startDatetime, endDatetime, withHosts, calculatePerSec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stat {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDatetime: ").append(toIndentedString(startDatetime)).append("\n");
    sb.append("    endDatetime: ").append(toIndentedString(endDatetime)).append("\n");
    sb.append("    withHosts: ").append(toIndentedString(withHosts)).append("\n");
    sb.append("    calculatePerSec: ").append(toIndentedString(calculatePerSec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operation");
    openapiFields.add("cluster_id");
    openapiFields.add("name");
    openapiFields.add("start_datetime");
    openapiFields.add("end_datetime");
    openapiFields.add("with_hosts");
    openapiFields.add("calculate_per_sec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operation");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Stat
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Stat.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stat is not found in the empty JSON string", Stat.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Stat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stat` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Stat.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("start_datetime") != null && !jsonObj.get("start_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_datetime").toString()));
      }
      if (jsonObj.get("end_datetime") != null && !jsonObj.get("end_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_datetime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stat.class));

       return (TypeAdapter<T>) new TypeAdapter<Stat>() {
           @Override
           public void write(JsonWriter out, Stat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stat read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Stat given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Stat
  * @throws IOException if the JSON string is invalid with respect to Stat
  */
  public static Stat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stat.class);
  }

 /**
  * Convert an instance of Stat to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

