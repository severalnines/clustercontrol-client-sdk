/*
 * Severalnines ClusterControl
 * This is a ...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.ccapi.client.model.ConfigConfigurationInner;
import org.openapitools.ccapi.client.model.ConfigLdapConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * Config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-17T17:47:57.934643-04:00[America/New_York]")
public class Config {
  /**
   * Gets or Sets operation
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    GETCONFIG("getConfig"),
    
    SETCONFIG("setConfig"),
    
    UNSETCONFIG("unsetConfig"),
    
    GETLDAPCONFIG("getLdapConfig"),
    
    SETLDAPCONFIG("setLdapConfig"),
    
    SETLICENSE("setLicense"),
    
    GETLICENSE("getLicense"),
    
    LISTTEMPLATES("listTemplates");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationEnum operation;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private List<ConfigConfigurationInner> _configuration = null;

  public static final String SERIALIZED_NAME_LDAP_CONFIGURATION = "ldap_configuration";
  @SerializedName(SERIALIZED_NAME_LDAP_CONFIGURATION)
  private ConfigLdapConfiguration ldapConfiguration;

  public static final String SERIALIZED_NAME_LICENSEDATA = "licensedata";
  @SerializedName(SERIALIZED_NAME_LICENSEDATA)
  private String licensedata;

  public Config() { 
  }

  public Config operation(OperationEnum operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OperationEnum getOperation() {
    return operation;
  }


  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  public Config hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Config port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public Config _configuration(List<ConfigConfigurationInner> _configuration) {
    
    this._configuration = _configuration;
    return this;
  }

  public Config addConfigurationItem(ConfigConfigurationInner _configurationItem) {
    if (this._configuration == null) {
      this._configuration = new ArrayList<>();
    }
    this._configuration.add(_configurationItem);
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConfigConfigurationInner> getConfiguration() {
    return _configuration;
  }


  public void setConfiguration(List<ConfigConfigurationInner> _configuration) {
    this._configuration = _configuration;
  }


  public Config ldapConfiguration(ConfigLdapConfiguration ldapConfiguration) {
    
    this.ldapConfiguration = ldapConfiguration;
    return this;
  }

   /**
   * Get ldapConfiguration
   * @return ldapConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigLdapConfiguration getLdapConfiguration() {
    return ldapConfiguration;
  }


  public void setLdapConfiguration(ConfigLdapConfiguration ldapConfiguration) {
    this.ldapConfiguration = ldapConfiguration;
  }


  public Config licensedata(String licensedata) {
    
    this.licensedata = licensedata;
    return this;
  }

   /**
   * Get licensedata
   * @return licensedata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLicensedata() {
    return licensedata;
  }


  public void setLicensedata(String licensedata) {
    this.licensedata = licensedata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Config config = (Config) o;
    return Objects.equals(this.operation, config.operation) &&
        Objects.equals(this.hostname, config.hostname) &&
        Objects.equals(this.port, config.port) &&
        Objects.equals(this._configuration, config._configuration) &&
        Objects.equals(this.ldapConfiguration, config.ldapConfiguration) &&
        Objects.equals(this.licensedata, config.licensedata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, hostname, port, _configuration, ldapConfiguration, licensedata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Config {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    ldapConfiguration: ").append(toIndentedString(ldapConfiguration)).append("\n");
    sb.append("    licensedata: ").append(toIndentedString(licensedata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operation");
    openapiFields.add("hostname");
    openapiFields.add("port");
    openapiFields.add("configuration");
    openapiFields.add("ldap_configuration");
    openapiFields.add("licensedata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operation");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Config
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Config.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Config is not found in the empty JSON string", Config.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Config.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Config` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Config.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      JsonArray jsonArray_configuration = jsonObj.getAsJsonArray("configuration");
      if (jsonArray_configuration != null) {
        // ensure the json data is an array
        if (!jsonObj.get("configuration").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `configuration` to be an array in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
        }

        // validate the optional field `configuration` (array)
        for (int i = 0; i < jsonArray_configuration.size(); i++) {
          ConfigConfigurationInner.validateJsonObject(jsonArray_configuration.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `ldap_configuration`
      if (jsonObj.getAsJsonObject("ldap_configuration") != null) {
        ConfigLdapConfiguration.validateJsonObject(jsonObj.getAsJsonObject("ldap_configuration"));
      }
      if (jsonObj.get("licensedata") != null && !jsonObj.get("licensedata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licensedata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licensedata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Config.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Config' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Config> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Config.class));

       return (TypeAdapter<T>) new TypeAdapter<Config>() {
           @Override
           public void write(JsonWriter out, Config value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Config read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Config given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Config
  * @throws IOException if the JSON string is invalid with respect to Config
  */
  public static Config fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Config.class);
  }

 /**
  * Convert an instance of Config to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

