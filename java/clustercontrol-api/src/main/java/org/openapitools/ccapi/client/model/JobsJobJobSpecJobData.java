/*
 * Severalnines ClusterControl
 * This is a ...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.ccapi.client.model.BackupScheduleJobJobDataVerifyBackup;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataConfigServers;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataConfigServersMembersInner;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataNode;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataNodeAdressesInner;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataNodesInner;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataReplicaSetsInner;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataTopology;
import org.openapitools.ccapi.client.model.JobsJobJobSpecJobDataUploadBackupDataToCloudStorage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * JobsJobJobSpecJobData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-17T17:47:57.934643-04:00[America/New_York]")
public class JobsJobJobSpecJobData {
  /**
   * Gets or Sets action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ENABLE("enable"),
    
    SETUP("setup"),
    
    SETUPHAPROXY("setupHaProxy"),
    
    SETUPPROXYSQL("setupProxySql");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_ADDNODE = "addnode";
  @SerializedName(SERIALIZED_NAME_ADDNODE)
  private Boolean addnode;

  public static final String SERIALIZED_NAME_ADMIN_USERNAME = "admin_username";
  @SerializedName(SERIALIZED_NAME_ADMIN_USERNAME)
  private String adminUsername;

  public static final String SERIALIZED_NAME_ADMIN_USER = "admin_user";
  @SerializedName(SERIALIZED_NAME_ADMIN_USER)
  private String adminUser;

  public static final String SERIALIZED_NAME_ADMIN_PASSWORD = "admin_password";
  @SerializedName(SERIALIZED_NAME_ADMIN_PASSWORD)
  private String adminPassword;

  public static final String SERIALIZED_NAME_AUDIT_EVENTS = "audit_events";
  @SerializedName(SERIALIZED_NAME_AUDIT_EVENTS)
  private String auditEvents;

  /**
   * Gets or Sets archiveMode
   */
  @JsonAdapter(ArchiveModeEnum.Adapter.class)
  public enum ArchiveModeEnum {
    ALWAYS("always");

    private String value;

    ArchiveModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArchiveModeEnum fromValue(String value) {
      for (ArchiveModeEnum b : ArchiveModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArchiveModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArchiveModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArchiveModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArchiveModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ARCHIVE_MODE = "archive_mode";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_MODE)
  private ArchiveModeEnum archiveMode;

  public static final String SERIALIZED_NAME_BACKUPID = "backupid";
  @SerializedName(SERIALIZED_NAME_BACKUPID)
  private Integer backupid;

  public static final String SERIALIZED_NAME_BACKUP_ID = "backup_id";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private Integer backupId;

  public static final String SERIALIZED_NAME_BUILD_FROM_SOURCE = "build_from_source";
  @SerializedName(SERIALIZED_NAME_BUILD_FROM_SOURCE)
  private Boolean buildFromSource;

  public static final String SERIALIZED_NAME_CLUSTER_NAME = "cluster_name";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_CLUSTERID = "clusterid";
  @SerializedName(SERIALIZED_NAME_CLUSTERID)
  private Integer clusterid;

  /**
   * Gets or Sets clusterType
   */
  @JsonAdapter(ClusterTypeEnum.Adapter.class)
  public enum ClusterTypeEnum {
    MSSQL_SINGLE("mssql_single"),
    
    REDIS("redis"),
    
    MONGODB("mongodb"),
    
    MSSQL_AO_ASYNC("mssql_ao_async"),
    
    POSTGRESQL_SINGLE("postgresql_single"),
    
    REPLICATION("replication"),
    
    GALERA("galera");

    private String value;

    ClusterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClusterTypeEnum fromValue(String value) {
      for (ClusterTypeEnum b : ClusterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClusterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClusterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClusterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClusterTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLUSTER_TYPE = "cluster_type";
  @SerializedName(SERIALIZED_NAME_CLUSTER_TYPE)
  private ClusterTypeEnum clusterType;

  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_CONFIG_TEMPLATE = "config_template";
  @SerializedName(SERIALIZED_NAME_CONFIG_TEMPLATE)
  private String configTemplate;

  public static final String SERIALIZED_NAME_BACKUP_FAILOVER = "backup_failover";
  @SerializedName(SERIALIZED_NAME_BACKUP_FAILOVER)
  private Boolean backupFailover;

  /**
   * Gets or Sets backupFailoverHost
   */
  @JsonAdapter(BackupFailoverHostEnum.Adapter.class)
  public enum BackupFailoverHostEnum {
    AUTO("auto");

    private String value;

    BackupFailoverHostEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupFailoverHostEnum fromValue(String value) {
      for (BackupFailoverHostEnum b : BackupFailoverHostEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupFailoverHostEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupFailoverHostEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupFailoverHostEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupFailoverHostEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_FAILOVER_HOST = "backup_failover_host";
  @SerializedName(SERIALIZED_NAME_BACKUP_FAILOVER_HOST)
  private BackupFailoverHostEnum backupFailoverHost;

  /**
   * Gets or Sets backupMethod
   */
  @JsonAdapter(BackupMethodEnum.Adapter.class)
  public enum BackupMethodEnum {
    XTRABACKUPFULL("xtrabackupfull"),
    
    XTRABACKUPINCR("xtrabackupincr"),
    
    PGBACKRESTFULL("pgbackrestfull"),
    
    PGBACKRESTINCR("pgbackrestincr"),
    
    PGBACKRESTDIFF("pgbackrestdiff"),
    
    PG_BASEBACKUP("pg_basebackup"),
    
    MYSQLDUMP("mysqldump"),
    
    PERCONA_BACKUP_MONGODB("percona-backup-mongodb"),
    
    MSSQLCERT("mssqlcert");

    private String value;

    BackupMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupMethodEnum fromValue(String value) {
      for (BackupMethodEnum b : BackupMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_METHOD = "backup_method";
  @SerializedName(SERIALIZED_NAME_BACKUP_METHOD)
  private BackupMethodEnum backupMethod;

  /**
   * Gets or Sets backupMysqldumpType
   */
  @JsonAdapter(BackupMysqldumpTypeEnum.Adapter.class)
  public enum BackupMysqldumpTypeEnum {
    COMPLETE("Complete"),
    
    SCHEMAANDDATA("SchemaAndData"),
    
    SCHEMAONLY("SchemaOnly"),
    
    DATAONLY("DataOnly"),
    
    MYSQLDBONLY("MySQLDbOnly");

    private String value;

    BackupMysqldumpTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupMysqldumpTypeEnum fromValue(String value) {
      for (BackupMysqldumpTypeEnum b : BackupMysqldumpTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupMysqldumpTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupMysqldumpTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupMysqldumpTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupMysqldumpTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_MYSQLDUMP_TYPE = "backup_mysqldump_type";
  @SerializedName(SERIALIZED_NAME_BACKUP_MYSQLDUMP_TYPE)
  private BackupMysqldumpTypeEnum backupMysqldumpType;

  public static final String SERIALIZED_NAME_BACKUP_INDIVIDUAL_SCHEMAS = "backup_individual_schemas";
  @SerializedName(SERIALIZED_NAME_BACKUP_INDIVIDUAL_SCHEMAS)
  private Boolean backupIndividualSchemas;

  public static final String SERIALIZED_NAME_BACKUP_RETENTION = "backup_retention";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION)
  private Integer backupRetention;

  public static final String SERIALIZED_NAME_EXTENDED_INSERT = "extended_insert";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INSERT)
  private Boolean extendedInsert;

  public static final String SERIALIZED_NAME_BACKUP_DIR = "backup_dir";
  @SerializedName(SERIALIZED_NAME_BACKUP_DIR)
  private String backupDir;

  public static final String SERIALIZED_NAME_BACKUPSUBDIR = "backupsubdir";
  @SerializedName(SERIALIZED_NAME_BACKUPSUBDIR)
  private String backupsubdir;

  public static final String SERIALIZED_NAME_CC_STORAGE = "cc_storage";
  @SerializedName(SERIALIZED_NAME_CC_STORAGE)
  private String ccStorage;

  public static final String SERIALIZED_NAME_COMPRESSION = "compression";
  @SerializedName(SERIALIZED_NAME_COMPRESSION)
  private Boolean compression;

  public static final String SERIALIZED_NAME_COMPRESSION_LEVEL = "compression_level";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_LEVEL)
  private Integer compressionLevel;

  public static final String SERIALIZED_NAME_DB_DATABASE = "db_database";
  @SerializedName(SERIALIZED_NAME_DB_DATABASE)
  private String dbDatabase;

  public static final String SERIALIZED_NAME_DB_PASSWORD = "db_password";
  @SerializedName(SERIALIZED_NAME_DB_PASSWORD)
  private String dbPassword;

  public static final String SERIALIZED_NAME_DB_PRIVS = "db_privs";
  @SerializedName(SERIALIZED_NAME_DB_PRIVS)
  private String dbPrivs;

  public static final String SERIALIZED_NAME_DB_USERNAME = "db_username";
  @SerializedName(SERIALIZED_NAME_DB_USERNAME)
  private String dbUsername;

  public static final String SERIALIZED_NAME_DATA_CENTER = "data_center";
  @SerializedName(SERIALIZED_NAME_DATA_CENTER)
  private Integer dataCenter;

  public static final String SERIALIZED_NAME_EXEC_UPGRADE_SCRIPT = "exec_upgrade_script";
  @SerializedName(SERIALIZED_NAME_EXEC_UPGRADE_SCRIPT)
  private Boolean execUpgradeScript;

  public static final String SERIALIZED_NAME_EXTENDED = "extended";
  @SerializedName(SERIALIZED_NAME_EXTENDED)
  private Boolean extended;

  public static final String SERIALIZED_NAME_LISTENING_PORT = "listening_port";
  @SerializedName(SERIALIZED_NAME_LISTENING_PORT)
  private Integer listeningPort;

  public static final String SERIALIZED_NAME_MASK_PASSWORDS = "mask_passwords";
  @SerializedName(SERIALIZED_NAME_MASK_PASSWORDS)
  private Boolean maskPasswords;

  public static final String SERIALIZED_NAME_MONITOR_PASSWORD = "monitor_password";
  @SerializedName(SERIALIZED_NAME_MONITOR_PASSWORD)
  private String monitorPassword;

  public static final String SERIALIZED_NAME_MONITOR_USER = "monitor_user";
  @SerializedName(SERIALIZED_NAME_MONITOR_USER)
  private String monitorUser;

  public static final String SERIALIZED_NAME_USE_CLUSTERING = "use_clustering";
  @SerializedName(SERIALIZED_NAME_USE_CLUSTERING)
  private Boolean useClustering;

  public static final String SERIALIZED_NAME_USE_RW_SPLIT = "use_rw_split";
  @SerializedName(SERIALIZED_NAME_USE_RW_SPLIT)
  private Boolean useRwSplit;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_MASTER_ADDRESS = "master_address";
  @SerializedName(SERIALIZED_NAME_MASTER_ADDRESS)
  private String masterAddress;

  public static final String SERIALIZED_NAME_INCLUDE_DATABASES = "include_databases";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DATABASES)
  private String includeDatabases;

  public static final String SERIALIZED_NAME_INSTALL_TIMESCALEDB = "install_timescaledb";
  @SerializedName(SERIALIZED_NAME_INSTALL_TIMESCALEDB)
  private Boolean installTimescaledb;

  public static final String SERIALIZED_NAME_UPDATE_LB = "update_lb";
  @SerializedName(SERIALIZED_NAME_UPDATE_LB)
  private Boolean updateLb;

  public static final String SERIALIZED_NAME_USE_PACKAGE_FOR_DATA_DIR = "usePackageForDataDir";
  @SerializedName(SERIALIZED_NAME_USE_PACKAGE_FOR_DATA_DIR)
  private Boolean usePackageForDataDir;

  public static final String SERIALIZED_NAME_ENCRYPT_BACKUP = "encrypt_backup";
  @SerializedName(SERIALIZED_NAME_ENCRYPT_BACKUP)
  private Boolean encryptBackup;

  public static final String SERIALIZED_NAME_THROTTLE_RATE_NETBW = "throttle_rate_netbw";
  @SerializedName(SERIALIZED_NAME_THROTTLE_RATE_NETBW)
  private Integer throttleRateNetbw;

  public static final String SERIALIZED_NAME_USE_PIGZ = "use_pigz";
  @SerializedName(SERIALIZED_NAME_USE_PIGZ)
  private Boolean usePigz;

  public static final String SERIALIZED_NAME_USE_QPRESS = "use_qpress";
  @SerializedName(SERIALIZED_NAME_USE_QPRESS)
  private Boolean useQpress;

  public static final String SERIALIZED_NAME_WSREP_DESYNC = "wsrep_desync";
  @SerializedName(SERIALIZED_NAME_WSREP_DESYNC)
  private Boolean wsrepDesync;

  public static final String SERIALIZED_NAME_XTRABACKUP_BACKUP_LOCKS = "xtrabackup_backup_locks";
  @SerializedName(SERIALIZED_NAME_XTRABACKUP_BACKUP_LOCKS)
  private Boolean xtrabackupBackupLocks;

  public static final String SERIALIZED_NAME_XTRABACKUP_LOCK_DDL_PER_TABLE = "xtrabackup_lock_ddl_per_table";
  @SerializedName(SERIALIZED_NAME_XTRABACKUP_LOCK_DDL_PER_TABLE)
  private Boolean xtrabackupLockDdlPerTable;

  public static final String SERIALIZED_NAME_XTRABACKUP_PARALLELLISM = "xtrabackup_parallellism";
  @SerializedName(SERIALIZED_NAME_XTRABACKUP_PARALLELLISM)
  private Integer xtrabackupParallellism;

  public static final String SERIALIZED_NAME_VERIFY_BACKUP_DELAY = "verify_backup_delay";
  @SerializedName(SERIALIZED_NAME_VERIFY_BACKUP_DELAY)
  private Integer verifyBackupDelay;

  public static final String SERIALIZED_NAME_DATA_DIR = "data_dir";
  @SerializedName(SERIALIZED_NAME_DATA_DIR)
  private String dataDir;

  public static final String SERIALIZED_NAME_DB_USER = "db_user";
  @SerializedName(SERIALIZED_NAME_DB_USER)
  private String dbUser;

  public static final String SERIALIZED_NAME_DISABLE_FIREWALL = "disable_firewall";
  @SerializedName(SERIALIZED_NAME_DISABLE_FIREWALL)
  private Boolean disableFirewall;

  public static final String SERIALIZED_NAME_DISABLE_SELINUX = "disable_selinux";
  @SerializedName(SERIALIZED_NAME_DISABLE_SELINUX)
  private Boolean disableSelinux;

  public static final String SERIALIZED_NAME_ENABLE_UNINSTALL = "enable_uninstall";
  @SerializedName(SERIALIZED_NAME_ENABLE_UNINSTALL)
  private Boolean enableUninstall;

  public static final String SERIALIZED_NAME_GENERATE_TOKEN = "generate_token";
  @SerializedName(SERIALIZED_NAME_GENERATE_TOKEN)
  private Boolean generateToken;

  public static final String SERIALIZED_NAME_INSTALL_SOFTWARE = "install_software";
  @SerializedName(SERIALIZED_NAME_INSTALL_SOFTWARE)
  private Boolean installSoftware;

  public static final String SERIALIZED_NAME_USE_INTERNAL_REPOS = "use_internal_repos";
  @SerializedName(SERIALIZED_NAME_USE_INTERNAL_REPOS)
  private Boolean useInternalRepos;

  public static final String SERIALIZED_NAME_LOCAL_REPOSITORY = "local_repository";
  @SerializedName(SERIALIZED_NAME_LOCAL_REPOSITORY)
  private String localRepository;

  public static final String SERIALIZED_NAME_ENABLE_MYSQL_UNINSTALL = "enable_mysql_uninstall";
  @SerializedName(SERIALIZED_NAME_ENABLE_MYSQL_UNINSTALL)
  private Boolean enableMysqlUninstall;

  public static final String SERIALIZED_NAME_MYSQL_SEMI_SYNC = "mysql_semi_sync";
  @SerializedName(SERIALIZED_NAME_MYSQL_SEMI_SYNC)
  private Boolean mysqlSemiSync;

  public static final String SERIALIZED_NAME_ENABLE_SSL = "enable_ssl";
  @SerializedName(SERIALIZED_NAME_ENABLE_SSL)
  private Boolean enableSsl;

  public static final String SERIALIZED_NAME_MONGOS_CONF_TEMPLATE = "mongos_conf_template";
  @SerializedName(SERIALIZED_NAME_MONGOS_CONF_TEMPLATE)
  private String mongosConfTemplate;

  public static final String SERIALIZED_NAME_MONGODB_AUTHDB = "mongodb_authdb";
  @SerializedName(SERIALIZED_NAME_MONGODB_AUTHDB)
  private String mongodbAuthdb;

  public static final String SERIALIZED_NAME_NODE_TYPE = "node_type";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private Integer nodeType;

  public static final String SERIALIZED_NAME_OVERWRITE_MYSQLCHK = "overwrite_mysqlchk";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_MYSQLCHK)
  private Boolean overwriteMysqlchk;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_SSH_KEYFILE = "ssh_keyfile";
  @SerializedName(SERIALIZED_NAME_SSH_KEYFILE)
  private String sshKeyfile;

  public static final String SERIALIZED_NAME_SSH_PORT = "ssh_port";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private String sshPort;

  public static final String SERIALIZED_NAME_SSH_USER = "ssh_user";
  @SerializedName(SERIALIZED_NAME_SSH_USER)
  private String sshUser;

  public static final String SERIALIZED_NAME_SUDO_PASSWORD = "sudo_password";
  @SerializedName(SERIALIZED_NAME_SUDO_PASSWORD)
  private String sudoPassword;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  /**
   * Gets or Sets vendor
   */
  @JsonAdapter(VendorEnum.Adapter.class)
  public enum VendorEnum {
    DEFAULT("default"),
    
    PERCONA("percona"),
    
    MICROSOFT("microsoft"),
    
    REDIS("redis");

    private String value;

    VendorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VendorEnum fromValue(String value) {
      for (VendorEnum b : VendorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VendorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VendorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VendorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VendorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private VendorEnum vendor;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_SOFTWARE_PACKAGE = "software_package";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_PACKAGE)
  private String softwarePackage;

  public static final String SERIALIZED_NAME_SERVER_ADDRESS = "server_address";
  @SerializedName(SERIALIZED_NAME_SERVER_ADDRESS)
  private String serverAddress;

  public static final String SERIALIZED_NAME_TERMINATE_DB_SERVER = "terminate_db_server";
  @SerializedName(SERIALIZED_NAME_TERMINATE_DB_SERVER)
  private Boolean terminateDbServer;

  public static final String SERIALIZED_NAME_XTRABACKUP_USE_MEMORY = "xtrabackup_use_memory";
  @SerializedName(SERIALIZED_NAME_XTRABACKUP_USE_MEMORY)
  private Integer xtrabackupUseMemory;

  public static final String SERIALIZED_NAME_INITIAL = "initial";
  @SerializedName(SERIALIZED_NAME_INITIAL)
  private Boolean initial;

  public static final String SERIALIZED_NAME_REBOOT = "reboot";
  @SerializedName(SERIALIZED_NAME_REBOOT)
  private Boolean reboot;

  public static final String SERIALIZED_NAME_SLAVE_ADDRESS = "slave_address";
  @SerializedName(SERIALIZED_NAME_SLAVE_ADDRESS)
  private String slaveAddress;

  public static final String SERIALIZED_NAME_FORCE = "force";
  @SerializedName(SERIALIZED_NAME_FORCE)
  private Boolean force;

  public static final String SERIALIZED_NAME_FORCE_STOP = "force_stop";
  @SerializedName(SERIALIZED_NAME_FORCE_STOP)
  private Boolean forceStop;

  public static final String SERIALIZED_NAME_STOP_TIMEOUT = "stop_timeout";
  @SerializedName(SERIALIZED_NAME_STOP_TIMEOUT)
  private Integer stopTimeout;

  public static final String SERIALIZED_NAME_PITR_STOP_TIME = "pitr_stop_time";
  @SerializedName(SERIALIZED_NAME_PITR_STOP_TIME)
  private String pitrStopTime;

  public static final String SERIALIZED_NAME_PITR_STOP_LOG = "pitr_stop_log";
  @SerializedName(SERIALIZED_NAME_PITR_STOP_LOG)
  private String pitrStopLog;

  public static final String SERIALIZED_NAME_PITR_STOP_POS = "pitr_stop_pos";
  @SerializedName(SERIALIZED_NAME_PITR_STOP_POS)
  private Integer pitrStopPos;

  public static final String SERIALIZED_NAME_HOST_LOCATION_UUID = "host_location_uuid";
  @SerializedName(SERIALIZED_NAME_HOST_LOCATION_UUID)
  private String hostLocationUuid;

  public static final String SERIALIZED_NAME_BOOTSTRAP = "bootstrap";
  @SerializedName(SERIALIZED_NAME_BOOTSTRAP)
  private Boolean bootstrap;

  public static final String SERIALIZED_NAME_UPLOAD_BACKUP_DATA_TO_CLOUD_STORAGE = "upload_backup_data_to_cloud_storage";
  @SerializedName(SERIALIZED_NAME_UPLOAD_BACKUP_DATA_TO_CLOUD_STORAGE)
  private JobsJobJobSpecJobDataUploadBackupDataToCloudStorage uploadBackupDataToCloudStorage;

  public static final String SERIALIZED_NAME_VERIFY_BACKUP = "verify_backup";
  @SerializedName(SERIALIZED_NAME_VERIFY_BACKUP)
  private BackupScheduleJobJobDataVerifyBackup verifyBackup;

  public static final String SERIALIZED_NAME_CONFIG_SERVERS = "config_servers";
  @SerializedName(SERIALIZED_NAME_CONFIG_SERVERS)
  private JobsJobJobSpecJobDataConfigServers configServers;

  public static final String SERIALIZED_NAME_MONGOS_SERVERS = "mongos_servers";
  @SerializedName(SERIALIZED_NAME_MONGOS_SERVERS)
  private List<JobsJobJobSpecJobDataConfigServersMembersInner> mongosServers = null;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private JobsJobJobSpecJobDataNode node;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<JobsJobJobSpecJobDataNodesInner> nodes = null;

  public static final String SERIALIZED_NAME_NODE_ADRESSES = "node_adresses";
  @SerializedName(SERIALIZED_NAME_NODE_ADRESSES)
  private List<JobsJobJobSpecJobDataNodeAdressesInner> nodeAdresses = null;

  public static final String SERIALIZED_NAME_TOPOLOGY = "topology";
  @SerializedName(SERIALIZED_NAME_TOPOLOGY)
  private JobsJobJobSpecJobDataTopology topology;

  public static final String SERIALIZED_NAME_REPLICA_SETS = "replica_sets";
  @SerializedName(SERIALIZED_NAME_REPLICA_SETS)
  private List<JobsJobJobSpecJobDataReplicaSetsInner> replicaSets = null;

  public static final String SERIALIZED_NAME_WITH_TAGS = "with_tags";
  @SerializedName(SERIALIZED_NAME_WITH_TAGS)
  private List<String> withTags = null;

  public JobsJobJobSpecJobData() { 
  }

  public JobsJobJobSpecJobData action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public JobsJobJobSpecJobData addnode(Boolean addnode) {
    
    this.addnode = addnode;
    return this;
  }

   /**
   * Get addnode
   * @return addnode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAddnode() {
    return addnode;
  }


  public void setAddnode(Boolean addnode) {
    this.addnode = addnode;
  }


  public JobsJobJobSpecJobData adminUsername(String adminUsername) {
    
    this.adminUsername = adminUsername;
    return this;
  }

   /**
   * Get adminUsername
   * @return adminUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdminUsername() {
    return adminUsername;
  }


  public void setAdminUsername(String adminUsername) {
    this.adminUsername = adminUsername;
  }


  public JobsJobJobSpecJobData adminUser(String adminUser) {
    
    this.adminUser = adminUser;
    return this;
  }

   /**
   * Get adminUser
   * @return adminUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdminUser() {
    return adminUser;
  }


  public void setAdminUser(String adminUser) {
    this.adminUser = adminUser;
  }


  public JobsJobJobSpecJobData adminPassword(String adminPassword) {
    
    this.adminPassword = adminPassword;
    return this;
  }

   /**
   * Get adminPassword
   * @return adminPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdminPassword() {
    return adminPassword;
  }


  public void setAdminPassword(String adminPassword) {
    this.adminPassword = adminPassword;
  }


  public JobsJobJobSpecJobData auditEvents(String auditEvents) {
    
    this.auditEvents = auditEvents;
    return this;
  }

   /**
   * Get auditEvents
   * @return auditEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuditEvents() {
    return auditEvents;
  }


  public void setAuditEvents(String auditEvents) {
    this.auditEvents = auditEvents;
  }


  public JobsJobJobSpecJobData archiveMode(ArchiveModeEnum archiveMode) {
    
    this.archiveMode = archiveMode;
    return this;
  }

   /**
   * Get archiveMode
   * @return archiveMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ArchiveModeEnum getArchiveMode() {
    return archiveMode;
  }


  public void setArchiveMode(ArchiveModeEnum archiveMode) {
    this.archiveMode = archiveMode;
  }


  public JobsJobJobSpecJobData backupid(Integer backupid) {
    
    this.backupid = backupid;
    return this;
  }

   /**
   * Get backupid
   * @return backupid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBackupid() {
    return backupid;
  }


  public void setBackupid(Integer backupid) {
    this.backupid = backupid;
  }


  public JobsJobJobSpecJobData backupId(Integer backupId) {
    
    this.backupId = backupId;
    return this;
  }

   /**
   * Get backupId
   * @return backupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBackupId() {
    return backupId;
  }


  public void setBackupId(Integer backupId) {
    this.backupId = backupId;
  }


  public JobsJobJobSpecJobData buildFromSource(Boolean buildFromSource) {
    
    this.buildFromSource = buildFromSource;
    return this;
  }

   /**
   * Get buildFromSource
   * @return buildFromSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBuildFromSource() {
    return buildFromSource;
  }


  public void setBuildFromSource(Boolean buildFromSource) {
    this.buildFromSource = buildFromSource;
  }


  public JobsJobJobSpecJobData clusterName(String clusterName) {
    
    this.clusterName = clusterName;
    return this;
  }

   /**
   * Get clusterName
   * @return clusterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClusterName() {
    return clusterName;
  }


  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public JobsJobJobSpecJobData clusterid(Integer clusterid) {
    
    this.clusterid = clusterid;
    return this;
  }

   /**
   * Get clusterid
   * @return clusterid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getClusterid() {
    return clusterid;
  }


  public void setClusterid(Integer clusterid) {
    this.clusterid = clusterid;
  }


  public JobsJobJobSpecJobData clusterType(ClusterTypeEnum clusterType) {
    
    this.clusterType = clusterType;
    return this;
  }

   /**
   * Get clusterType
   * @return clusterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClusterTypeEnum getClusterType() {
    return clusterType;
  }


  public void setClusterType(ClusterTypeEnum clusterType) {
    this.clusterType = clusterType;
  }


  public JobsJobJobSpecJobData companyId(String companyId) {
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Get companyId
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyId() {
    return companyId;
  }


  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }


  public JobsJobJobSpecJobData configTemplate(String configTemplate) {
    
    this.configTemplate = configTemplate;
    return this;
  }

   /**
   * Get configTemplate
   * @return configTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConfigTemplate() {
    return configTemplate;
  }


  public void setConfigTemplate(String configTemplate) {
    this.configTemplate = configTemplate;
  }


  public JobsJobJobSpecJobData backupFailover(Boolean backupFailover) {
    
    this.backupFailover = backupFailover;
    return this;
  }

   /**
   * Get backupFailover
   * @return backupFailover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBackupFailover() {
    return backupFailover;
  }


  public void setBackupFailover(Boolean backupFailover) {
    this.backupFailover = backupFailover;
  }


  public JobsJobJobSpecJobData backupFailoverHost(BackupFailoverHostEnum backupFailoverHost) {
    
    this.backupFailoverHost = backupFailoverHost;
    return this;
  }

   /**
   * Get backupFailoverHost
   * @return backupFailoverHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BackupFailoverHostEnum getBackupFailoverHost() {
    return backupFailoverHost;
  }


  public void setBackupFailoverHost(BackupFailoverHostEnum backupFailoverHost) {
    this.backupFailoverHost = backupFailoverHost;
  }


  public JobsJobJobSpecJobData backupMethod(BackupMethodEnum backupMethod) {
    
    this.backupMethod = backupMethod;
    return this;
  }

   /**
   * Get backupMethod
   * @return backupMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BackupMethodEnum getBackupMethod() {
    return backupMethod;
  }


  public void setBackupMethod(BackupMethodEnum backupMethod) {
    this.backupMethod = backupMethod;
  }


  public JobsJobJobSpecJobData backupMysqldumpType(BackupMysqldumpTypeEnum backupMysqldumpType) {
    
    this.backupMysqldumpType = backupMysqldumpType;
    return this;
  }

   /**
   * Get backupMysqldumpType
   * @return backupMysqldumpType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BackupMysqldumpTypeEnum getBackupMysqldumpType() {
    return backupMysqldumpType;
  }


  public void setBackupMysqldumpType(BackupMysqldumpTypeEnum backupMysqldumpType) {
    this.backupMysqldumpType = backupMysqldumpType;
  }


  public JobsJobJobSpecJobData backupIndividualSchemas(Boolean backupIndividualSchemas) {
    
    this.backupIndividualSchemas = backupIndividualSchemas;
    return this;
  }

   /**
   * Get backupIndividualSchemas
   * @return backupIndividualSchemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBackupIndividualSchemas() {
    return backupIndividualSchemas;
  }


  public void setBackupIndividualSchemas(Boolean backupIndividualSchemas) {
    this.backupIndividualSchemas = backupIndividualSchemas;
  }


  public JobsJobJobSpecJobData backupRetention(Integer backupRetention) {
    
    this.backupRetention = backupRetention;
    return this;
  }

   /**
   * Get backupRetention
   * @return backupRetention
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBackupRetention() {
    return backupRetention;
  }


  public void setBackupRetention(Integer backupRetention) {
    this.backupRetention = backupRetention;
  }


  public JobsJobJobSpecJobData extendedInsert(Boolean extendedInsert) {
    
    this.extendedInsert = extendedInsert;
    return this;
  }

   /**
   * Get extendedInsert
   * @return extendedInsert
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExtendedInsert() {
    return extendedInsert;
  }


  public void setExtendedInsert(Boolean extendedInsert) {
    this.extendedInsert = extendedInsert;
  }


  public JobsJobJobSpecJobData backupDir(String backupDir) {
    
    this.backupDir = backupDir;
    return this;
  }

   /**
   * Get backupDir
   * @return backupDir
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackupDir() {
    return backupDir;
  }


  public void setBackupDir(String backupDir) {
    this.backupDir = backupDir;
  }


  public JobsJobJobSpecJobData backupsubdir(String backupsubdir) {
    
    this.backupsubdir = backupsubdir;
    return this;
  }

   /**
   * Get backupsubdir
   * @return backupsubdir
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackupsubdir() {
    return backupsubdir;
  }


  public void setBackupsubdir(String backupsubdir) {
    this.backupsubdir = backupsubdir;
  }


  public JobsJobJobSpecJobData ccStorage(String ccStorage) {
    
    this.ccStorage = ccStorage;
    return this;
  }

   /**
   * Get ccStorage
   * @return ccStorage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCcStorage() {
    return ccStorage;
  }


  public void setCcStorage(String ccStorage) {
    this.ccStorage = ccStorage;
  }


  public JobsJobJobSpecJobData compression(Boolean compression) {
    
    this.compression = compression;
    return this;
  }

   /**
   * Get compression
   * @return compression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCompression() {
    return compression;
  }


  public void setCompression(Boolean compression) {
    this.compression = compression;
  }


  public JobsJobJobSpecJobData compressionLevel(Integer compressionLevel) {
    
    this.compressionLevel = compressionLevel;
    return this;
  }

   /**
   * Get compressionLevel
   * @return compressionLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCompressionLevel() {
    return compressionLevel;
  }


  public void setCompressionLevel(Integer compressionLevel) {
    this.compressionLevel = compressionLevel;
  }


  public JobsJobJobSpecJobData dbDatabase(String dbDatabase) {
    
    this.dbDatabase = dbDatabase;
    return this;
  }

   /**
   * Get dbDatabase
   * @return dbDatabase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDbDatabase() {
    return dbDatabase;
  }


  public void setDbDatabase(String dbDatabase) {
    this.dbDatabase = dbDatabase;
  }


  public JobsJobJobSpecJobData dbPassword(String dbPassword) {
    
    this.dbPassword = dbPassword;
    return this;
  }

   /**
   * Get dbPassword
   * @return dbPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDbPassword() {
    return dbPassword;
  }


  public void setDbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
  }


  public JobsJobJobSpecJobData dbPrivs(String dbPrivs) {
    
    this.dbPrivs = dbPrivs;
    return this;
  }

   /**
   * Get dbPrivs
   * @return dbPrivs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDbPrivs() {
    return dbPrivs;
  }


  public void setDbPrivs(String dbPrivs) {
    this.dbPrivs = dbPrivs;
  }


  public JobsJobJobSpecJobData dbUsername(String dbUsername) {
    
    this.dbUsername = dbUsername;
    return this;
  }

   /**
   * Get dbUsername
   * @return dbUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDbUsername() {
    return dbUsername;
  }


  public void setDbUsername(String dbUsername) {
    this.dbUsername = dbUsername;
  }


  public JobsJobJobSpecJobData dataCenter(Integer dataCenter) {
    
    this.dataCenter = dataCenter;
    return this;
  }

   /**
   * Get dataCenter
   * @return dataCenter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDataCenter() {
    return dataCenter;
  }


  public void setDataCenter(Integer dataCenter) {
    this.dataCenter = dataCenter;
  }


  public JobsJobJobSpecJobData execUpgradeScript(Boolean execUpgradeScript) {
    
    this.execUpgradeScript = execUpgradeScript;
    return this;
  }

   /**
   * Get execUpgradeScript
   * @return execUpgradeScript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExecUpgradeScript() {
    return execUpgradeScript;
  }


  public void setExecUpgradeScript(Boolean execUpgradeScript) {
    this.execUpgradeScript = execUpgradeScript;
  }


  public JobsJobJobSpecJobData extended(Boolean extended) {
    
    this.extended = extended;
    return this;
  }

   /**
   * Get extended
   * @return extended
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExtended() {
    return extended;
  }


  public void setExtended(Boolean extended) {
    this.extended = extended;
  }


  public JobsJobJobSpecJobData listeningPort(Integer listeningPort) {
    
    this.listeningPort = listeningPort;
    return this;
  }

   /**
   * Get listeningPort
   * @return listeningPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getListeningPort() {
    return listeningPort;
  }


  public void setListeningPort(Integer listeningPort) {
    this.listeningPort = listeningPort;
  }


  public JobsJobJobSpecJobData maskPasswords(Boolean maskPasswords) {
    
    this.maskPasswords = maskPasswords;
    return this;
  }

   /**
   * Get maskPasswords
   * @return maskPasswords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMaskPasswords() {
    return maskPasswords;
  }


  public void setMaskPasswords(Boolean maskPasswords) {
    this.maskPasswords = maskPasswords;
  }


  public JobsJobJobSpecJobData monitorPassword(String monitorPassword) {
    
    this.monitorPassword = monitorPassword;
    return this;
  }

   /**
   * Get monitorPassword
   * @return monitorPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMonitorPassword() {
    return monitorPassword;
  }


  public void setMonitorPassword(String monitorPassword) {
    this.monitorPassword = monitorPassword;
  }


  public JobsJobJobSpecJobData monitorUser(String monitorUser) {
    
    this.monitorUser = monitorUser;
    return this;
  }

   /**
   * Get monitorUser
   * @return monitorUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMonitorUser() {
    return monitorUser;
  }


  public void setMonitorUser(String monitorUser) {
    this.monitorUser = monitorUser;
  }


  public JobsJobJobSpecJobData useClustering(Boolean useClustering) {
    
    this.useClustering = useClustering;
    return this;
  }

   /**
   * Get useClustering
   * @return useClustering
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUseClustering() {
    return useClustering;
  }


  public void setUseClustering(Boolean useClustering) {
    this.useClustering = useClustering;
  }


  public JobsJobJobSpecJobData useRwSplit(Boolean useRwSplit) {
    
    this.useRwSplit = useRwSplit;
    return this;
  }

   /**
   * Get useRwSplit
   * @return useRwSplit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUseRwSplit() {
    return useRwSplit;
  }


  public void setUseRwSplit(Boolean useRwSplit) {
    this.useRwSplit = useRwSplit;
  }


  public JobsJobJobSpecJobData hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public JobsJobJobSpecJobData masterAddress(String masterAddress) {
    
    this.masterAddress = masterAddress;
    return this;
  }

   /**
   * Get masterAddress
   * @return masterAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMasterAddress() {
    return masterAddress;
  }


  public void setMasterAddress(String masterAddress) {
    this.masterAddress = masterAddress;
  }


  public JobsJobJobSpecJobData includeDatabases(String includeDatabases) {
    
    this.includeDatabases = includeDatabases;
    return this;
  }

   /**
   * Get includeDatabases
   * @return includeDatabases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIncludeDatabases() {
    return includeDatabases;
  }


  public void setIncludeDatabases(String includeDatabases) {
    this.includeDatabases = includeDatabases;
  }


  public JobsJobJobSpecJobData installTimescaledb(Boolean installTimescaledb) {
    
    this.installTimescaledb = installTimescaledb;
    return this;
  }

   /**
   * Get installTimescaledb
   * @return installTimescaledb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInstallTimescaledb() {
    return installTimescaledb;
  }


  public void setInstallTimescaledb(Boolean installTimescaledb) {
    this.installTimescaledb = installTimescaledb;
  }


  public JobsJobJobSpecJobData updateLb(Boolean updateLb) {
    
    this.updateLb = updateLb;
    return this;
  }

   /**
   * Get updateLb
   * @return updateLb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUpdateLb() {
    return updateLb;
  }


  public void setUpdateLb(Boolean updateLb) {
    this.updateLb = updateLb;
  }


  public JobsJobJobSpecJobData usePackageForDataDir(Boolean usePackageForDataDir) {
    
    this.usePackageForDataDir = usePackageForDataDir;
    return this;
  }

   /**
   * Get usePackageForDataDir
   * @return usePackageForDataDir
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUsePackageForDataDir() {
    return usePackageForDataDir;
  }


  public void setUsePackageForDataDir(Boolean usePackageForDataDir) {
    this.usePackageForDataDir = usePackageForDataDir;
  }


  public JobsJobJobSpecJobData encryptBackup(Boolean encryptBackup) {
    
    this.encryptBackup = encryptBackup;
    return this;
  }

   /**
   * Get encryptBackup
   * @return encryptBackup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEncryptBackup() {
    return encryptBackup;
  }


  public void setEncryptBackup(Boolean encryptBackup) {
    this.encryptBackup = encryptBackup;
  }


  public JobsJobJobSpecJobData throttleRateNetbw(Integer throttleRateNetbw) {
    
    this.throttleRateNetbw = throttleRateNetbw;
    return this;
  }

   /**
   * Get throttleRateNetbw
   * @return throttleRateNetbw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getThrottleRateNetbw() {
    return throttleRateNetbw;
  }


  public void setThrottleRateNetbw(Integer throttleRateNetbw) {
    this.throttleRateNetbw = throttleRateNetbw;
  }


  public JobsJobJobSpecJobData usePigz(Boolean usePigz) {
    
    this.usePigz = usePigz;
    return this;
  }

   /**
   * Get usePigz
   * @return usePigz
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUsePigz() {
    return usePigz;
  }


  public void setUsePigz(Boolean usePigz) {
    this.usePigz = usePigz;
  }


  public JobsJobJobSpecJobData useQpress(Boolean useQpress) {
    
    this.useQpress = useQpress;
    return this;
  }

   /**
   * Get useQpress
   * @return useQpress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUseQpress() {
    return useQpress;
  }


  public void setUseQpress(Boolean useQpress) {
    this.useQpress = useQpress;
  }


  public JobsJobJobSpecJobData wsrepDesync(Boolean wsrepDesync) {
    
    this.wsrepDesync = wsrepDesync;
    return this;
  }

   /**
   * Get wsrepDesync
   * @return wsrepDesync
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getWsrepDesync() {
    return wsrepDesync;
  }


  public void setWsrepDesync(Boolean wsrepDesync) {
    this.wsrepDesync = wsrepDesync;
  }


  public JobsJobJobSpecJobData xtrabackupBackupLocks(Boolean xtrabackupBackupLocks) {
    
    this.xtrabackupBackupLocks = xtrabackupBackupLocks;
    return this;
  }

   /**
   * Get xtrabackupBackupLocks
   * @return xtrabackupBackupLocks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getXtrabackupBackupLocks() {
    return xtrabackupBackupLocks;
  }


  public void setXtrabackupBackupLocks(Boolean xtrabackupBackupLocks) {
    this.xtrabackupBackupLocks = xtrabackupBackupLocks;
  }


  public JobsJobJobSpecJobData xtrabackupLockDdlPerTable(Boolean xtrabackupLockDdlPerTable) {
    
    this.xtrabackupLockDdlPerTable = xtrabackupLockDdlPerTable;
    return this;
  }

   /**
   * Get xtrabackupLockDdlPerTable
   * @return xtrabackupLockDdlPerTable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getXtrabackupLockDdlPerTable() {
    return xtrabackupLockDdlPerTable;
  }


  public void setXtrabackupLockDdlPerTable(Boolean xtrabackupLockDdlPerTable) {
    this.xtrabackupLockDdlPerTable = xtrabackupLockDdlPerTable;
  }


  public JobsJobJobSpecJobData xtrabackupParallellism(Integer xtrabackupParallellism) {
    
    this.xtrabackupParallellism = xtrabackupParallellism;
    return this;
  }

   /**
   * Get xtrabackupParallellism
   * @return xtrabackupParallellism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getXtrabackupParallellism() {
    return xtrabackupParallellism;
  }


  public void setXtrabackupParallellism(Integer xtrabackupParallellism) {
    this.xtrabackupParallellism = xtrabackupParallellism;
  }


  public JobsJobJobSpecJobData verifyBackupDelay(Integer verifyBackupDelay) {
    
    this.verifyBackupDelay = verifyBackupDelay;
    return this;
  }

   /**
   * Get verifyBackupDelay
   * @return verifyBackupDelay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getVerifyBackupDelay() {
    return verifyBackupDelay;
  }


  public void setVerifyBackupDelay(Integer verifyBackupDelay) {
    this.verifyBackupDelay = verifyBackupDelay;
  }


  public JobsJobJobSpecJobData dataDir(String dataDir) {
    
    this.dataDir = dataDir;
    return this;
  }

   /**
   * Get dataDir
   * @return dataDir
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataDir() {
    return dataDir;
  }


  public void setDataDir(String dataDir) {
    this.dataDir = dataDir;
  }


  public JobsJobJobSpecJobData dbUser(String dbUser) {
    
    this.dbUser = dbUser;
    return this;
  }

   /**
   * Get dbUser
   * @return dbUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDbUser() {
    return dbUser;
  }


  public void setDbUser(String dbUser) {
    this.dbUser = dbUser;
  }


  public JobsJobJobSpecJobData disableFirewall(Boolean disableFirewall) {
    
    this.disableFirewall = disableFirewall;
    return this;
  }

   /**
   * Get disableFirewall
   * @return disableFirewall
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDisableFirewall() {
    return disableFirewall;
  }


  public void setDisableFirewall(Boolean disableFirewall) {
    this.disableFirewall = disableFirewall;
  }


  public JobsJobJobSpecJobData disableSelinux(Boolean disableSelinux) {
    
    this.disableSelinux = disableSelinux;
    return this;
  }

   /**
   * Get disableSelinux
   * @return disableSelinux
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDisableSelinux() {
    return disableSelinux;
  }


  public void setDisableSelinux(Boolean disableSelinux) {
    this.disableSelinux = disableSelinux;
  }


  public JobsJobJobSpecJobData enableUninstall(Boolean enableUninstall) {
    
    this.enableUninstall = enableUninstall;
    return this;
  }

   /**
   * Get enableUninstall
   * @return enableUninstall
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnableUninstall() {
    return enableUninstall;
  }


  public void setEnableUninstall(Boolean enableUninstall) {
    this.enableUninstall = enableUninstall;
  }


  public JobsJobJobSpecJobData generateToken(Boolean generateToken) {
    
    this.generateToken = generateToken;
    return this;
  }

   /**
   * Get generateToken
   * @return generateToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getGenerateToken() {
    return generateToken;
  }


  public void setGenerateToken(Boolean generateToken) {
    this.generateToken = generateToken;
  }


  public JobsJobJobSpecJobData installSoftware(Boolean installSoftware) {
    
    this.installSoftware = installSoftware;
    return this;
  }

   /**
   * Get installSoftware
   * @return installSoftware
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInstallSoftware() {
    return installSoftware;
  }


  public void setInstallSoftware(Boolean installSoftware) {
    this.installSoftware = installSoftware;
  }


  public JobsJobJobSpecJobData useInternalRepos(Boolean useInternalRepos) {
    
    this.useInternalRepos = useInternalRepos;
    return this;
  }

   /**
   * Get useInternalRepos
   * @return useInternalRepos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUseInternalRepos() {
    return useInternalRepos;
  }


  public void setUseInternalRepos(Boolean useInternalRepos) {
    this.useInternalRepos = useInternalRepos;
  }


  public JobsJobJobSpecJobData localRepository(String localRepository) {
    
    this.localRepository = localRepository;
    return this;
  }

   /**
   * Get localRepository
   * @return localRepository
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocalRepository() {
    return localRepository;
  }


  public void setLocalRepository(String localRepository) {
    this.localRepository = localRepository;
  }


  public JobsJobJobSpecJobData enableMysqlUninstall(Boolean enableMysqlUninstall) {
    
    this.enableMysqlUninstall = enableMysqlUninstall;
    return this;
  }

   /**
   * Get enableMysqlUninstall
   * @return enableMysqlUninstall
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnableMysqlUninstall() {
    return enableMysqlUninstall;
  }


  public void setEnableMysqlUninstall(Boolean enableMysqlUninstall) {
    this.enableMysqlUninstall = enableMysqlUninstall;
  }


  public JobsJobJobSpecJobData mysqlSemiSync(Boolean mysqlSemiSync) {
    
    this.mysqlSemiSync = mysqlSemiSync;
    return this;
  }

   /**
   * Get mysqlSemiSync
   * @return mysqlSemiSync
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMysqlSemiSync() {
    return mysqlSemiSync;
  }


  public void setMysqlSemiSync(Boolean mysqlSemiSync) {
    this.mysqlSemiSync = mysqlSemiSync;
  }


  public JobsJobJobSpecJobData enableSsl(Boolean enableSsl) {
    
    this.enableSsl = enableSsl;
    return this;
  }

   /**
   * Get enableSsl
   * @return enableSsl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnableSsl() {
    return enableSsl;
  }


  public void setEnableSsl(Boolean enableSsl) {
    this.enableSsl = enableSsl;
  }


  public JobsJobJobSpecJobData mongosConfTemplate(String mongosConfTemplate) {
    
    this.mongosConfTemplate = mongosConfTemplate;
    return this;
  }

   /**
   * Get mongosConfTemplate
   * @return mongosConfTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMongosConfTemplate() {
    return mongosConfTemplate;
  }


  public void setMongosConfTemplate(String mongosConfTemplate) {
    this.mongosConfTemplate = mongosConfTemplate;
  }


  public JobsJobJobSpecJobData mongodbAuthdb(String mongodbAuthdb) {
    
    this.mongodbAuthdb = mongodbAuthdb;
    return this;
  }

   /**
   * Get mongodbAuthdb
   * @return mongodbAuthdb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMongodbAuthdb() {
    return mongodbAuthdb;
  }


  public void setMongodbAuthdb(String mongodbAuthdb) {
    this.mongodbAuthdb = mongodbAuthdb;
  }


  public JobsJobJobSpecJobData nodeType(Integer nodeType) {
    
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Get nodeType
   * @return nodeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNodeType() {
    return nodeType;
  }


  public void setNodeType(Integer nodeType) {
    this.nodeType = nodeType;
  }


  public JobsJobJobSpecJobData overwriteMysqlchk(Boolean overwriteMysqlchk) {
    
    this.overwriteMysqlchk = overwriteMysqlchk;
    return this;
  }

   /**
   * Get overwriteMysqlchk
   * @return overwriteMysqlchk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getOverwriteMysqlchk() {
    return overwriteMysqlchk;
  }


  public void setOverwriteMysqlchk(Boolean overwriteMysqlchk) {
    this.overwriteMysqlchk = overwriteMysqlchk;
  }


  public JobsJobJobSpecJobData port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public JobsJobJobSpecJobData sshKeyfile(String sshKeyfile) {
    
    this.sshKeyfile = sshKeyfile;
    return this;
  }

   /**
   * Get sshKeyfile
   * @return sshKeyfile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSshKeyfile() {
    return sshKeyfile;
  }


  public void setSshKeyfile(String sshKeyfile) {
    this.sshKeyfile = sshKeyfile;
  }


  public JobsJobJobSpecJobData sshPort(String sshPort) {
    
    this.sshPort = sshPort;
    return this;
  }

   /**
   * Get sshPort
   * @return sshPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSshPort() {
    return sshPort;
  }


  public void setSshPort(String sshPort) {
    this.sshPort = sshPort;
  }


  public JobsJobJobSpecJobData sshUser(String sshUser) {
    
    this.sshUser = sshUser;
    return this;
  }

   /**
   * Get sshUser
   * @return sshUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSshUser() {
    return sshUser;
  }


  public void setSshUser(String sshUser) {
    this.sshUser = sshUser;
  }


  public JobsJobJobSpecJobData sudoPassword(String sudoPassword) {
    
    this.sudoPassword = sudoPassword;
    return this;
  }

   /**
   * Get sudoPassword
   * @return sudoPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSudoPassword() {
    return sudoPassword;
  }


  public void setSudoPassword(String sudoPassword) {
    this.sudoPassword = sudoPassword;
  }


  public JobsJobJobSpecJobData type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public JobsJobJobSpecJobData userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public JobsJobJobSpecJobData vendor(VendorEnum vendor) {
    
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VendorEnum getVendor() {
    return vendor;
  }


  public void setVendor(VendorEnum vendor) {
    this.vendor = vendor;
  }


  public JobsJobJobSpecJobData version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public JobsJobJobSpecJobData softwarePackage(String softwarePackage) {
    
    this.softwarePackage = softwarePackage;
    return this;
  }

   /**
   * Get softwarePackage
   * @return softwarePackage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSoftwarePackage() {
    return softwarePackage;
  }


  public void setSoftwarePackage(String softwarePackage) {
    this.softwarePackage = softwarePackage;
  }


  public JobsJobJobSpecJobData serverAddress(String serverAddress) {
    
    this.serverAddress = serverAddress;
    return this;
  }

   /**
   * Get serverAddress
   * @return serverAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getServerAddress() {
    return serverAddress;
  }


  public void setServerAddress(String serverAddress) {
    this.serverAddress = serverAddress;
  }


  public JobsJobJobSpecJobData terminateDbServer(Boolean terminateDbServer) {
    
    this.terminateDbServer = terminateDbServer;
    return this;
  }

   /**
   * Get terminateDbServer
   * @return terminateDbServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTerminateDbServer() {
    return terminateDbServer;
  }


  public void setTerminateDbServer(Boolean terminateDbServer) {
    this.terminateDbServer = terminateDbServer;
  }


  public JobsJobJobSpecJobData xtrabackupUseMemory(Integer xtrabackupUseMemory) {
    
    this.xtrabackupUseMemory = xtrabackupUseMemory;
    return this;
  }

   /**
   * Get xtrabackupUseMemory
   * @return xtrabackupUseMemory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getXtrabackupUseMemory() {
    return xtrabackupUseMemory;
  }


  public void setXtrabackupUseMemory(Integer xtrabackupUseMemory) {
    this.xtrabackupUseMemory = xtrabackupUseMemory;
  }


  public JobsJobJobSpecJobData initial(Boolean initial) {
    
    this.initial = initial;
    return this;
  }

   /**
   * Get initial
   * @return initial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInitial() {
    return initial;
  }


  public void setInitial(Boolean initial) {
    this.initial = initial;
  }


  public JobsJobJobSpecJobData reboot(Boolean reboot) {
    
    this.reboot = reboot;
    return this;
  }

   /**
   * Get reboot
   * @return reboot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getReboot() {
    return reboot;
  }


  public void setReboot(Boolean reboot) {
    this.reboot = reboot;
  }


  public JobsJobJobSpecJobData slaveAddress(String slaveAddress) {
    
    this.slaveAddress = slaveAddress;
    return this;
  }

   /**
   * Get slaveAddress
   * @return slaveAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSlaveAddress() {
    return slaveAddress;
  }


  public void setSlaveAddress(String slaveAddress) {
    this.slaveAddress = slaveAddress;
  }


  public JobsJobJobSpecJobData force(Boolean force) {
    
    this.force = force;
    return this;
  }

   /**
   * Get force
   * @return force
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getForce() {
    return force;
  }


  public void setForce(Boolean force) {
    this.force = force;
  }


  public JobsJobJobSpecJobData forceStop(Boolean forceStop) {
    
    this.forceStop = forceStop;
    return this;
  }

   /**
   * Get forceStop
   * @return forceStop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getForceStop() {
    return forceStop;
  }


  public void setForceStop(Boolean forceStop) {
    this.forceStop = forceStop;
  }


  public JobsJobJobSpecJobData stopTimeout(Integer stopTimeout) {
    
    this.stopTimeout = stopTimeout;
    return this;
  }

   /**
   * Get stopTimeout
   * @return stopTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStopTimeout() {
    return stopTimeout;
  }


  public void setStopTimeout(Integer stopTimeout) {
    this.stopTimeout = stopTimeout;
  }


  public JobsJobJobSpecJobData pitrStopTime(String pitrStopTime) {
    
    this.pitrStopTime = pitrStopTime;
    return this;
  }

   /**
   * Get pitrStopTime
   * @return pitrStopTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPitrStopTime() {
    return pitrStopTime;
  }


  public void setPitrStopTime(String pitrStopTime) {
    this.pitrStopTime = pitrStopTime;
  }


  public JobsJobJobSpecJobData pitrStopLog(String pitrStopLog) {
    
    this.pitrStopLog = pitrStopLog;
    return this;
  }

   /**
   * Get pitrStopLog
   * @return pitrStopLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPitrStopLog() {
    return pitrStopLog;
  }


  public void setPitrStopLog(String pitrStopLog) {
    this.pitrStopLog = pitrStopLog;
  }


  public JobsJobJobSpecJobData pitrStopPos(Integer pitrStopPos) {
    
    this.pitrStopPos = pitrStopPos;
    return this;
  }

   /**
   * Get pitrStopPos
   * @return pitrStopPos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPitrStopPos() {
    return pitrStopPos;
  }


  public void setPitrStopPos(Integer pitrStopPos) {
    this.pitrStopPos = pitrStopPos;
  }


  public JobsJobJobSpecJobData hostLocationUuid(String hostLocationUuid) {
    
    this.hostLocationUuid = hostLocationUuid;
    return this;
  }

   /**
   * Get hostLocationUuid
   * @return hostLocationUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostLocationUuid() {
    return hostLocationUuid;
  }


  public void setHostLocationUuid(String hostLocationUuid) {
    this.hostLocationUuid = hostLocationUuid;
  }


  public JobsJobJobSpecJobData bootstrap(Boolean bootstrap) {
    
    this.bootstrap = bootstrap;
    return this;
  }

   /**
   * Get bootstrap
   * @return bootstrap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBootstrap() {
    return bootstrap;
  }


  public void setBootstrap(Boolean bootstrap) {
    this.bootstrap = bootstrap;
  }


  public JobsJobJobSpecJobData uploadBackupDataToCloudStorage(JobsJobJobSpecJobDataUploadBackupDataToCloudStorage uploadBackupDataToCloudStorage) {
    
    this.uploadBackupDataToCloudStorage = uploadBackupDataToCloudStorage;
    return this;
  }

   /**
   * Get uploadBackupDataToCloudStorage
   * @return uploadBackupDataToCloudStorage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsJobJobSpecJobDataUploadBackupDataToCloudStorage getUploadBackupDataToCloudStorage() {
    return uploadBackupDataToCloudStorage;
  }


  public void setUploadBackupDataToCloudStorage(JobsJobJobSpecJobDataUploadBackupDataToCloudStorage uploadBackupDataToCloudStorage) {
    this.uploadBackupDataToCloudStorage = uploadBackupDataToCloudStorage;
  }


  public JobsJobJobSpecJobData verifyBackup(BackupScheduleJobJobDataVerifyBackup verifyBackup) {
    
    this.verifyBackup = verifyBackup;
    return this;
  }

   /**
   * Get verifyBackup
   * @return verifyBackup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BackupScheduleJobJobDataVerifyBackup getVerifyBackup() {
    return verifyBackup;
  }


  public void setVerifyBackup(BackupScheduleJobJobDataVerifyBackup verifyBackup) {
    this.verifyBackup = verifyBackup;
  }


  public JobsJobJobSpecJobData configServers(JobsJobJobSpecJobDataConfigServers configServers) {
    
    this.configServers = configServers;
    return this;
  }

   /**
   * Get configServers
   * @return configServers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsJobJobSpecJobDataConfigServers getConfigServers() {
    return configServers;
  }


  public void setConfigServers(JobsJobJobSpecJobDataConfigServers configServers) {
    this.configServers = configServers;
  }


  public JobsJobJobSpecJobData mongosServers(List<JobsJobJobSpecJobDataConfigServersMembersInner> mongosServers) {
    
    this.mongosServers = mongosServers;
    return this;
  }

  public JobsJobJobSpecJobData addMongosServersItem(JobsJobJobSpecJobDataConfigServersMembersInner mongosServersItem) {
    if (this.mongosServers == null) {
      this.mongosServers = new ArrayList<>();
    }
    this.mongosServers.add(mongosServersItem);
    return this;
  }

   /**
   * Get mongosServers
   * @return mongosServers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobsJobJobSpecJobDataConfigServersMembersInner> getMongosServers() {
    return mongosServers;
  }


  public void setMongosServers(List<JobsJobJobSpecJobDataConfigServersMembersInner> mongosServers) {
    this.mongosServers = mongosServers;
  }


  public JobsJobJobSpecJobData node(JobsJobJobSpecJobDataNode node) {
    
    this.node = node;
    return this;
  }

   /**
   * Get node
   * @return node
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsJobJobSpecJobDataNode getNode() {
    return node;
  }


  public void setNode(JobsJobJobSpecJobDataNode node) {
    this.node = node;
  }


  public JobsJobJobSpecJobData nodes(List<JobsJobJobSpecJobDataNodesInner> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public JobsJobJobSpecJobData addNodesItem(JobsJobJobSpecJobDataNodesInner nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Get nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobsJobJobSpecJobDataNodesInner> getNodes() {
    return nodes;
  }


  public void setNodes(List<JobsJobJobSpecJobDataNodesInner> nodes) {
    this.nodes = nodes;
  }


  public JobsJobJobSpecJobData nodeAdresses(List<JobsJobJobSpecJobDataNodeAdressesInner> nodeAdresses) {
    
    this.nodeAdresses = nodeAdresses;
    return this;
  }

  public JobsJobJobSpecJobData addNodeAdressesItem(JobsJobJobSpecJobDataNodeAdressesInner nodeAdressesItem) {
    if (this.nodeAdresses == null) {
      this.nodeAdresses = new ArrayList<>();
    }
    this.nodeAdresses.add(nodeAdressesItem);
    return this;
  }

   /**
   * Get nodeAdresses
   * @return nodeAdresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobsJobJobSpecJobDataNodeAdressesInner> getNodeAdresses() {
    return nodeAdresses;
  }


  public void setNodeAdresses(List<JobsJobJobSpecJobDataNodeAdressesInner> nodeAdresses) {
    this.nodeAdresses = nodeAdresses;
  }


  public JobsJobJobSpecJobData topology(JobsJobJobSpecJobDataTopology topology) {
    
    this.topology = topology;
    return this;
  }

   /**
   * Get topology
   * @return topology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsJobJobSpecJobDataTopology getTopology() {
    return topology;
  }


  public void setTopology(JobsJobJobSpecJobDataTopology topology) {
    this.topology = topology;
  }


  public JobsJobJobSpecJobData replicaSets(List<JobsJobJobSpecJobDataReplicaSetsInner> replicaSets) {
    
    this.replicaSets = replicaSets;
    return this;
  }

  public JobsJobJobSpecJobData addReplicaSetsItem(JobsJobJobSpecJobDataReplicaSetsInner replicaSetsItem) {
    if (this.replicaSets == null) {
      this.replicaSets = new ArrayList<>();
    }
    this.replicaSets.add(replicaSetsItem);
    return this;
  }

   /**
   * Get replicaSets
   * @return replicaSets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobsJobJobSpecJobDataReplicaSetsInner> getReplicaSets() {
    return replicaSets;
  }


  public void setReplicaSets(List<JobsJobJobSpecJobDataReplicaSetsInner> replicaSets) {
    this.replicaSets = replicaSets;
  }


  public JobsJobJobSpecJobData withTags(List<String> withTags) {
    
    this.withTags = withTags;
    return this;
  }

  public JobsJobJobSpecJobData addWithTagsItem(String withTagsItem) {
    if (this.withTags == null) {
      this.withTags = new ArrayList<>();
    }
    this.withTags.add(withTagsItem);
    return this;
  }

   /**
   * Get withTags
   * @return withTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getWithTags() {
    return withTags;
  }


  public void setWithTags(List<String> withTags) {
    this.withTags = withTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsJobJobSpecJobData jobsJobJobSpecJobData = (JobsJobJobSpecJobData) o;
    return Objects.equals(this.action, jobsJobJobSpecJobData.action) &&
        Objects.equals(this.addnode, jobsJobJobSpecJobData.addnode) &&
        Objects.equals(this.adminUsername, jobsJobJobSpecJobData.adminUsername) &&
        Objects.equals(this.adminUser, jobsJobJobSpecJobData.adminUser) &&
        Objects.equals(this.adminPassword, jobsJobJobSpecJobData.adminPassword) &&
        Objects.equals(this.auditEvents, jobsJobJobSpecJobData.auditEvents) &&
        Objects.equals(this.archiveMode, jobsJobJobSpecJobData.archiveMode) &&
        Objects.equals(this.backupid, jobsJobJobSpecJobData.backupid) &&
        Objects.equals(this.backupId, jobsJobJobSpecJobData.backupId) &&
        Objects.equals(this.buildFromSource, jobsJobJobSpecJobData.buildFromSource) &&
        Objects.equals(this.clusterName, jobsJobJobSpecJobData.clusterName) &&
        Objects.equals(this.clusterid, jobsJobJobSpecJobData.clusterid) &&
        Objects.equals(this.clusterType, jobsJobJobSpecJobData.clusterType) &&
        Objects.equals(this.companyId, jobsJobJobSpecJobData.companyId) &&
        Objects.equals(this.configTemplate, jobsJobJobSpecJobData.configTemplate) &&
        Objects.equals(this.backupFailover, jobsJobJobSpecJobData.backupFailover) &&
        Objects.equals(this.backupFailoverHost, jobsJobJobSpecJobData.backupFailoverHost) &&
        Objects.equals(this.backupMethod, jobsJobJobSpecJobData.backupMethod) &&
        Objects.equals(this.backupMysqldumpType, jobsJobJobSpecJobData.backupMysqldumpType) &&
        Objects.equals(this.backupIndividualSchemas, jobsJobJobSpecJobData.backupIndividualSchemas) &&
        Objects.equals(this.backupRetention, jobsJobJobSpecJobData.backupRetention) &&
        Objects.equals(this.extendedInsert, jobsJobJobSpecJobData.extendedInsert) &&
        Objects.equals(this.backupDir, jobsJobJobSpecJobData.backupDir) &&
        Objects.equals(this.backupsubdir, jobsJobJobSpecJobData.backupsubdir) &&
        Objects.equals(this.ccStorage, jobsJobJobSpecJobData.ccStorage) &&
        Objects.equals(this.compression, jobsJobJobSpecJobData.compression) &&
        Objects.equals(this.compressionLevel, jobsJobJobSpecJobData.compressionLevel) &&
        Objects.equals(this.dbDatabase, jobsJobJobSpecJobData.dbDatabase) &&
        Objects.equals(this.dbPassword, jobsJobJobSpecJobData.dbPassword) &&
        Objects.equals(this.dbPrivs, jobsJobJobSpecJobData.dbPrivs) &&
        Objects.equals(this.dbUsername, jobsJobJobSpecJobData.dbUsername) &&
        Objects.equals(this.dataCenter, jobsJobJobSpecJobData.dataCenter) &&
        Objects.equals(this.execUpgradeScript, jobsJobJobSpecJobData.execUpgradeScript) &&
        Objects.equals(this.extended, jobsJobJobSpecJobData.extended) &&
        Objects.equals(this.listeningPort, jobsJobJobSpecJobData.listeningPort) &&
        Objects.equals(this.maskPasswords, jobsJobJobSpecJobData.maskPasswords) &&
        Objects.equals(this.monitorPassword, jobsJobJobSpecJobData.monitorPassword) &&
        Objects.equals(this.monitorUser, jobsJobJobSpecJobData.monitorUser) &&
        Objects.equals(this.useClustering, jobsJobJobSpecJobData.useClustering) &&
        Objects.equals(this.useRwSplit, jobsJobJobSpecJobData.useRwSplit) &&
        Objects.equals(this.hostname, jobsJobJobSpecJobData.hostname) &&
        Objects.equals(this.masterAddress, jobsJobJobSpecJobData.masterAddress) &&
        Objects.equals(this.includeDatabases, jobsJobJobSpecJobData.includeDatabases) &&
        Objects.equals(this.installTimescaledb, jobsJobJobSpecJobData.installTimescaledb) &&
        Objects.equals(this.updateLb, jobsJobJobSpecJobData.updateLb) &&
        Objects.equals(this.usePackageForDataDir, jobsJobJobSpecJobData.usePackageForDataDir) &&
        Objects.equals(this.encryptBackup, jobsJobJobSpecJobData.encryptBackup) &&
        Objects.equals(this.throttleRateNetbw, jobsJobJobSpecJobData.throttleRateNetbw) &&
        Objects.equals(this.usePigz, jobsJobJobSpecJobData.usePigz) &&
        Objects.equals(this.useQpress, jobsJobJobSpecJobData.useQpress) &&
        Objects.equals(this.wsrepDesync, jobsJobJobSpecJobData.wsrepDesync) &&
        Objects.equals(this.xtrabackupBackupLocks, jobsJobJobSpecJobData.xtrabackupBackupLocks) &&
        Objects.equals(this.xtrabackupLockDdlPerTable, jobsJobJobSpecJobData.xtrabackupLockDdlPerTable) &&
        Objects.equals(this.xtrabackupParallellism, jobsJobJobSpecJobData.xtrabackupParallellism) &&
        Objects.equals(this.verifyBackupDelay, jobsJobJobSpecJobData.verifyBackupDelay) &&
        Objects.equals(this.dataDir, jobsJobJobSpecJobData.dataDir) &&
        Objects.equals(this.dbUser, jobsJobJobSpecJobData.dbUser) &&
        Objects.equals(this.disableFirewall, jobsJobJobSpecJobData.disableFirewall) &&
        Objects.equals(this.disableSelinux, jobsJobJobSpecJobData.disableSelinux) &&
        Objects.equals(this.enableUninstall, jobsJobJobSpecJobData.enableUninstall) &&
        Objects.equals(this.generateToken, jobsJobJobSpecJobData.generateToken) &&
        Objects.equals(this.installSoftware, jobsJobJobSpecJobData.installSoftware) &&
        Objects.equals(this.useInternalRepos, jobsJobJobSpecJobData.useInternalRepos) &&
        Objects.equals(this.localRepository, jobsJobJobSpecJobData.localRepository) &&
        Objects.equals(this.enableMysqlUninstall, jobsJobJobSpecJobData.enableMysqlUninstall) &&
        Objects.equals(this.mysqlSemiSync, jobsJobJobSpecJobData.mysqlSemiSync) &&
        Objects.equals(this.enableSsl, jobsJobJobSpecJobData.enableSsl) &&
        Objects.equals(this.mongosConfTemplate, jobsJobJobSpecJobData.mongosConfTemplate) &&
        Objects.equals(this.mongodbAuthdb, jobsJobJobSpecJobData.mongodbAuthdb) &&
        Objects.equals(this.nodeType, jobsJobJobSpecJobData.nodeType) &&
        Objects.equals(this.overwriteMysqlchk, jobsJobJobSpecJobData.overwriteMysqlchk) &&
        Objects.equals(this.port, jobsJobJobSpecJobData.port) &&
        Objects.equals(this.sshKeyfile, jobsJobJobSpecJobData.sshKeyfile) &&
        Objects.equals(this.sshPort, jobsJobJobSpecJobData.sshPort) &&
        Objects.equals(this.sshUser, jobsJobJobSpecJobData.sshUser) &&
        Objects.equals(this.sudoPassword, jobsJobJobSpecJobData.sudoPassword) &&
        Objects.equals(this.type, jobsJobJobSpecJobData.type) &&
        Objects.equals(this.userId, jobsJobJobSpecJobData.userId) &&
        Objects.equals(this.vendor, jobsJobJobSpecJobData.vendor) &&
        Objects.equals(this.version, jobsJobJobSpecJobData.version) &&
        Objects.equals(this.softwarePackage, jobsJobJobSpecJobData.softwarePackage) &&
        Objects.equals(this.serverAddress, jobsJobJobSpecJobData.serverAddress) &&
        Objects.equals(this.terminateDbServer, jobsJobJobSpecJobData.terminateDbServer) &&
        Objects.equals(this.xtrabackupUseMemory, jobsJobJobSpecJobData.xtrabackupUseMemory) &&
        Objects.equals(this.initial, jobsJobJobSpecJobData.initial) &&
        Objects.equals(this.reboot, jobsJobJobSpecJobData.reboot) &&
        Objects.equals(this.slaveAddress, jobsJobJobSpecJobData.slaveAddress) &&
        Objects.equals(this.force, jobsJobJobSpecJobData.force) &&
        Objects.equals(this.forceStop, jobsJobJobSpecJobData.forceStop) &&
        Objects.equals(this.stopTimeout, jobsJobJobSpecJobData.stopTimeout) &&
        Objects.equals(this.pitrStopTime, jobsJobJobSpecJobData.pitrStopTime) &&
        Objects.equals(this.pitrStopLog, jobsJobJobSpecJobData.pitrStopLog) &&
        Objects.equals(this.pitrStopPos, jobsJobJobSpecJobData.pitrStopPos) &&
        Objects.equals(this.hostLocationUuid, jobsJobJobSpecJobData.hostLocationUuid) &&
        Objects.equals(this.bootstrap, jobsJobJobSpecJobData.bootstrap) &&
        Objects.equals(this.uploadBackupDataToCloudStorage, jobsJobJobSpecJobData.uploadBackupDataToCloudStorage) &&
        Objects.equals(this.verifyBackup, jobsJobJobSpecJobData.verifyBackup) &&
        Objects.equals(this.configServers, jobsJobJobSpecJobData.configServers) &&
        Objects.equals(this.mongosServers, jobsJobJobSpecJobData.mongosServers) &&
        Objects.equals(this.node, jobsJobJobSpecJobData.node) &&
        Objects.equals(this.nodes, jobsJobJobSpecJobData.nodes) &&
        Objects.equals(this.nodeAdresses, jobsJobJobSpecJobData.nodeAdresses) &&
        Objects.equals(this.topology, jobsJobJobSpecJobData.topology) &&
        Objects.equals(this.replicaSets, jobsJobJobSpecJobData.replicaSets) &&
        Objects.equals(this.withTags, jobsJobJobSpecJobData.withTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, addnode, adminUsername, adminUser, adminPassword, auditEvents, archiveMode, backupid, backupId, buildFromSource, clusterName, clusterid, clusterType, companyId, configTemplate, backupFailover, backupFailoverHost, backupMethod, backupMysqldumpType, backupIndividualSchemas, backupRetention, extendedInsert, backupDir, backupsubdir, ccStorage, compression, compressionLevel, dbDatabase, dbPassword, dbPrivs, dbUsername, dataCenter, execUpgradeScript, extended, listeningPort, maskPasswords, monitorPassword, monitorUser, useClustering, useRwSplit, hostname, masterAddress, includeDatabases, installTimescaledb, updateLb, usePackageForDataDir, encryptBackup, throttleRateNetbw, usePigz, useQpress, wsrepDesync, xtrabackupBackupLocks, xtrabackupLockDdlPerTable, xtrabackupParallellism, verifyBackupDelay, dataDir, dbUser, disableFirewall, disableSelinux, enableUninstall, generateToken, installSoftware, useInternalRepos, localRepository, enableMysqlUninstall, mysqlSemiSync, enableSsl, mongosConfTemplate, mongodbAuthdb, nodeType, overwriteMysqlchk, port, sshKeyfile, sshPort, sshUser, sudoPassword, type, userId, vendor, version, softwarePackage, serverAddress, terminateDbServer, xtrabackupUseMemory, initial, reboot, slaveAddress, force, forceStop, stopTimeout, pitrStopTime, pitrStopLog, pitrStopPos, hostLocationUuid, bootstrap, uploadBackupDataToCloudStorage, verifyBackup, configServers, mongosServers, node, nodes, nodeAdresses, topology, replicaSets, withTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsJobJobSpecJobData {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    addnode: ").append(toIndentedString(addnode)).append("\n");
    sb.append("    adminUsername: ").append(toIndentedString(adminUsername)).append("\n");
    sb.append("    adminUser: ").append(toIndentedString(adminUser)).append("\n");
    sb.append("    adminPassword: ").append(toIndentedString(adminPassword)).append("\n");
    sb.append("    auditEvents: ").append(toIndentedString(auditEvents)).append("\n");
    sb.append("    archiveMode: ").append(toIndentedString(archiveMode)).append("\n");
    sb.append("    backupid: ").append(toIndentedString(backupid)).append("\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    buildFromSource: ").append(toIndentedString(buildFromSource)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    clusterid: ").append(toIndentedString(clusterid)).append("\n");
    sb.append("    clusterType: ").append(toIndentedString(clusterType)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    configTemplate: ").append(toIndentedString(configTemplate)).append("\n");
    sb.append("    backupFailover: ").append(toIndentedString(backupFailover)).append("\n");
    sb.append("    backupFailoverHost: ").append(toIndentedString(backupFailoverHost)).append("\n");
    sb.append("    backupMethod: ").append(toIndentedString(backupMethod)).append("\n");
    sb.append("    backupMysqldumpType: ").append(toIndentedString(backupMysqldumpType)).append("\n");
    sb.append("    backupIndividualSchemas: ").append(toIndentedString(backupIndividualSchemas)).append("\n");
    sb.append("    backupRetention: ").append(toIndentedString(backupRetention)).append("\n");
    sb.append("    extendedInsert: ").append(toIndentedString(extendedInsert)).append("\n");
    sb.append("    backupDir: ").append(toIndentedString(backupDir)).append("\n");
    sb.append("    backupsubdir: ").append(toIndentedString(backupsubdir)).append("\n");
    sb.append("    ccStorage: ").append(toIndentedString(ccStorage)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    compressionLevel: ").append(toIndentedString(compressionLevel)).append("\n");
    sb.append("    dbDatabase: ").append(toIndentedString(dbDatabase)).append("\n");
    sb.append("    dbPassword: ").append(toIndentedString(dbPassword)).append("\n");
    sb.append("    dbPrivs: ").append(toIndentedString(dbPrivs)).append("\n");
    sb.append("    dbUsername: ").append(toIndentedString(dbUsername)).append("\n");
    sb.append("    dataCenter: ").append(toIndentedString(dataCenter)).append("\n");
    sb.append("    execUpgradeScript: ").append(toIndentedString(execUpgradeScript)).append("\n");
    sb.append("    extended: ").append(toIndentedString(extended)).append("\n");
    sb.append("    listeningPort: ").append(toIndentedString(listeningPort)).append("\n");
    sb.append("    maskPasswords: ").append(toIndentedString(maskPasswords)).append("\n");
    sb.append("    monitorPassword: ").append(toIndentedString(monitorPassword)).append("\n");
    sb.append("    monitorUser: ").append(toIndentedString(monitorUser)).append("\n");
    sb.append("    useClustering: ").append(toIndentedString(useClustering)).append("\n");
    sb.append("    useRwSplit: ").append(toIndentedString(useRwSplit)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    masterAddress: ").append(toIndentedString(masterAddress)).append("\n");
    sb.append("    includeDatabases: ").append(toIndentedString(includeDatabases)).append("\n");
    sb.append("    installTimescaledb: ").append(toIndentedString(installTimescaledb)).append("\n");
    sb.append("    updateLb: ").append(toIndentedString(updateLb)).append("\n");
    sb.append("    usePackageForDataDir: ").append(toIndentedString(usePackageForDataDir)).append("\n");
    sb.append("    encryptBackup: ").append(toIndentedString(encryptBackup)).append("\n");
    sb.append("    throttleRateNetbw: ").append(toIndentedString(throttleRateNetbw)).append("\n");
    sb.append("    usePigz: ").append(toIndentedString(usePigz)).append("\n");
    sb.append("    useQpress: ").append(toIndentedString(useQpress)).append("\n");
    sb.append("    wsrepDesync: ").append(toIndentedString(wsrepDesync)).append("\n");
    sb.append("    xtrabackupBackupLocks: ").append(toIndentedString(xtrabackupBackupLocks)).append("\n");
    sb.append("    xtrabackupLockDdlPerTable: ").append(toIndentedString(xtrabackupLockDdlPerTable)).append("\n");
    sb.append("    xtrabackupParallellism: ").append(toIndentedString(xtrabackupParallellism)).append("\n");
    sb.append("    verifyBackupDelay: ").append(toIndentedString(verifyBackupDelay)).append("\n");
    sb.append("    dataDir: ").append(toIndentedString(dataDir)).append("\n");
    sb.append("    dbUser: ").append(toIndentedString(dbUser)).append("\n");
    sb.append("    disableFirewall: ").append(toIndentedString(disableFirewall)).append("\n");
    sb.append("    disableSelinux: ").append(toIndentedString(disableSelinux)).append("\n");
    sb.append("    enableUninstall: ").append(toIndentedString(enableUninstall)).append("\n");
    sb.append("    generateToken: ").append(toIndentedString(generateToken)).append("\n");
    sb.append("    installSoftware: ").append(toIndentedString(installSoftware)).append("\n");
    sb.append("    useInternalRepos: ").append(toIndentedString(useInternalRepos)).append("\n");
    sb.append("    localRepository: ").append(toIndentedString(localRepository)).append("\n");
    sb.append("    enableMysqlUninstall: ").append(toIndentedString(enableMysqlUninstall)).append("\n");
    sb.append("    mysqlSemiSync: ").append(toIndentedString(mysqlSemiSync)).append("\n");
    sb.append("    enableSsl: ").append(toIndentedString(enableSsl)).append("\n");
    sb.append("    mongosConfTemplate: ").append(toIndentedString(mongosConfTemplate)).append("\n");
    sb.append("    mongodbAuthdb: ").append(toIndentedString(mongodbAuthdb)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    overwriteMysqlchk: ").append(toIndentedString(overwriteMysqlchk)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    sshKeyfile: ").append(toIndentedString(sshKeyfile)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    sshUser: ").append(toIndentedString(sshUser)).append("\n");
    sb.append("    sudoPassword: ").append(toIndentedString(sudoPassword)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    softwarePackage: ").append(toIndentedString(softwarePackage)).append("\n");
    sb.append("    serverAddress: ").append(toIndentedString(serverAddress)).append("\n");
    sb.append("    terminateDbServer: ").append(toIndentedString(terminateDbServer)).append("\n");
    sb.append("    xtrabackupUseMemory: ").append(toIndentedString(xtrabackupUseMemory)).append("\n");
    sb.append("    initial: ").append(toIndentedString(initial)).append("\n");
    sb.append("    reboot: ").append(toIndentedString(reboot)).append("\n");
    sb.append("    slaveAddress: ").append(toIndentedString(slaveAddress)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    forceStop: ").append(toIndentedString(forceStop)).append("\n");
    sb.append("    stopTimeout: ").append(toIndentedString(stopTimeout)).append("\n");
    sb.append("    pitrStopTime: ").append(toIndentedString(pitrStopTime)).append("\n");
    sb.append("    pitrStopLog: ").append(toIndentedString(pitrStopLog)).append("\n");
    sb.append("    pitrStopPos: ").append(toIndentedString(pitrStopPos)).append("\n");
    sb.append("    hostLocationUuid: ").append(toIndentedString(hostLocationUuid)).append("\n");
    sb.append("    bootstrap: ").append(toIndentedString(bootstrap)).append("\n");
    sb.append("    uploadBackupDataToCloudStorage: ").append(toIndentedString(uploadBackupDataToCloudStorage)).append("\n");
    sb.append("    verifyBackup: ").append(toIndentedString(verifyBackup)).append("\n");
    sb.append("    configServers: ").append(toIndentedString(configServers)).append("\n");
    sb.append("    mongosServers: ").append(toIndentedString(mongosServers)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    nodeAdresses: ").append(toIndentedString(nodeAdresses)).append("\n");
    sb.append("    topology: ").append(toIndentedString(topology)).append("\n");
    sb.append("    replicaSets: ").append(toIndentedString(replicaSets)).append("\n");
    sb.append("    withTags: ").append(toIndentedString(withTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("addnode");
    openapiFields.add("admin_username");
    openapiFields.add("admin_user");
    openapiFields.add("admin_password");
    openapiFields.add("audit_events");
    openapiFields.add("archive_mode");
    openapiFields.add("backupid");
    openapiFields.add("backup_id");
    openapiFields.add("build_from_source");
    openapiFields.add("cluster_name");
    openapiFields.add("clusterid");
    openapiFields.add("cluster_type");
    openapiFields.add("company_id");
    openapiFields.add("config_template");
    openapiFields.add("backup_failover");
    openapiFields.add("backup_failover_host");
    openapiFields.add("backup_method");
    openapiFields.add("backup_mysqldump_type");
    openapiFields.add("backup_individual_schemas");
    openapiFields.add("backup_retention");
    openapiFields.add("extended_insert");
    openapiFields.add("backup_dir");
    openapiFields.add("backupsubdir");
    openapiFields.add("cc_storage");
    openapiFields.add("compression");
    openapiFields.add("compression_level");
    openapiFields.add("db_database");
    openapiFields.add("db_password");
    openapiFields.add("db_privs");
    openapiFields.add("db_username");
    openapiFields.add("data_center");
    openapiFields.add("exec_upgrade_script");
    openapiFields.add("extended");
    openapiFields.add("listening_port");
    openapiFields.add("mask_passwords");
    openapiFields.add("monitor_password");
    openapiFields.add("monitor_user");
    openapiFields.add("use_clustering");
    openapiFields.add("use_rw_split");
    openapiFields.add("hostname");
    openapiFields.add("master_address");
    openapiFields.add("include_databases");
    openapiFields.add("install_timescaledb");
    openapiFields.add("update_lb");
    openapiFields.add("usePackageForDataDir");
    openapiFields.add("encrypt_backup");
    openapiFields.add("throttle_rate_netbw");
    openapiFields.add("use_pigz");
    openapiFields.add("use_qpress");
    openapiFields.add("wsrep_desync");
    openapiFields.add("xtrabackup_backup_locks");
    openapiFields.add("xtrabackup_lock_ddl_per_table");
    openapiFields.add("xtrabackup_parallellism");
    openapiFields.add("verify_backup_delay");
    openapiFields.add("data_dir");
    openapiFields.add("db_user");
    openapiFields.add("disable_firewall");
    openapiFields.add("disable_selinux");
    openapiFields.add("enable_uninstall");
    openapiFields.add("generate_token");
    openapiFields.add("install_software");
    openapiFields.add("use_internal_repos");
    openapiFields.add("local_repository");
    openapiFields.add("enable_mysql_uninstall");
    openapiFields.add("mysql_semi_sync");
    openapiFields.add("enable_ssl");
    openapiFields.add("mongos_conf_template");
    openapiFields.add("mongodb_authdb");
    openapiFields.add("node_type");
    openapiFields.add("overwrite_mysqlchk");
    openapiFields.add("port");
    openapiFields.add("ssh_keyfile");
    openapiFields.add("ssh_port");
    openapiFields.add("ssh_user");
    openapiFields.add("sudo_password");
    openapiFields.add("type");
    openapiFields.add("user_id");
    openapiFields.add("vendor");
    openapiFields.add("version");
    openapiFields.add("software_package");
    openapiFields.add("server_address");
    openapiFields.add("terminate_db_server");
    openapiFields.add("xtrabackup_use_memory");
    openapiFields.add("initial");
    openapiFields.add("reboot");
    openapiFields.add("slave_address");
    openapiFields.add("force");
    openapiFields.add("force_stop");
    openapiFields.add("stop_timeout");
    openapiFields.add("pitr_stop_time");
    openapiFields.add("pitr_stop_log");
    openapiFields.add("pitr_stop_pos");
    openapiFields.add("host_location_uuid");
    openapiFields.add("bootstrap");
    openapiFields.add("upload_backup_data_to_cloud_storage");
    openapiFields.add("verify_backup");
    openapiFields.add("config_servers");
    openapiFields.add("mongos_servers");
    openapiFields.add("node");
    openapiFields.add("nodes");
    openapiFields.add("node_adresses");
    openapiFields.add("topology");
    openapiFields.add("replica_sets");
    openapiFields.add("with_tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobsJobJobSpecJobData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (JobsJobJobSpecJobData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobsJobJobSpecJobData is not found in the empty JSON string", JobsJobJobSpecJobData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JobsJobJobSpecJobData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsJobJobSpecJobData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("admin_username") != null && !jsonObj.get("admin_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_username").toString()));
      }
      if (jsonObj.get("admin_user") != null && !jsonObj.get("admin_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_user").toString()));
      }
      if (jsonObj.get("admin_password") != null && !jsonObj.get("admin_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_password").toString()));
      }
      if (jsonObj.get("audit_events") != null && !jsonObj.get("audit_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audit_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audit_events").toString()));
      }
      if (jsonObj.get("archive_mode") != null && !jsonObj.get("archive_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_mode").toString()));
      }
      if (jsonObj.get("cluster_name") != null && !jsonObj.get("cluster_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_name").toString()));
      }
      if (jsonObj.get("cluster_type") != null && !jsonObj.get("cluster_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_type").toString()));
      }
      if (jsonObj.get("company_id") != null && !jsonObj.get("company_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_id").toString()));
      }
      if (jsonObj.get("config_template") != null && !jsonObj.get("config_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_template").toString()));
      }
      if (jsonObj.get("backup_failover_host") != null && !jsonObj.get("backup_failover_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup_failover_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup_failover_host").toString()));
      }
      if (jsonObj.get("backup_method") != null && !jsonObj.get("backup_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup_method").toString()));
      }
      if (jsonObj.get("backup_mysqldump_type") != null && !jsonObj.get("backup_mysqldump_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup_mysqldump_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup_mysqldump_type").toString()));
      }
      if (jsonObj.get("backup_dir") != null && !jsonObj.get("backup_dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup_dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup_dir").toString()));
      }
      if (jsonObj.get("backupsubdir") != null && !jsonObj.get("backupsubdir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupsubdir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupsubdir").toString()));
      }
      if (jsonObj.get("cc_storage") != null && !jsonObj.get("cc_storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc_storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cc_storage").toString()));
      }
      if (jsonObj.get("db_database") != null && !jsonObj.get("db_database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_database").toString()));
      }
      if (jsonObj.get("db_password") != null && !jsonObj.get("db_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_password").toString()));
      }
      if (jsonObj.get("db_privs") != null && !jsonObj.get("db_privs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_privs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_privs").toString()));
      }
      if (jsonObj.get("db_username") != null && !jsonObj.get("db_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_username").toString()));
      }
      if (jsonObj.get("monitor_password") != null && !jsonObj.get("monitor_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitor_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitor_password").toString()));
      }
      if (jsonObj.get("monitor_user") != null && !jsonObj.get("monitor_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitor_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitor_user").toString()));
      }
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (jsonObj.get("master_address") != null && !jsonObj.get("master_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `master_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("master_address").toString()));
      }
      if (jsonObj.get("include_databases") != null && !jsonObj.get("include_databases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `include_databases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("include_databases").toString()));
      }
      if (jsonObj.get("data_dir") != null && !jsonObj.get("data_dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_dir").toString()));
      }
      if (jsonObj.get("db_user") != null && !jsonObj.get("db_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_user").toString()));
      }
      if (jsonObj.get("local_repository") != null && !jsonObj.get("local_repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_repository").toString()));
      }
      if (jsonObj.get("mongos_conf_template") != null && !jsonObj.get("mongos_conf_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongos_conf_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongos_conf_template").toString()));
      }
      if (jsonObj.get("mongodb_authdb") != null && !jsonObj.get("mongodb_authdb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_authdb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_authdb").toString()));
      }
      if (jsonObj.get("ssh_keyfile") != null && !jsonObj.get("ssh_keyfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_keyfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_keyfile").toString()));
      }
      if (jsonObj.get("ssh_port") != null && !jsonObj.get("ssh_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_port").toString()));
      }
      if (jsonObj.get("ssh_user") != null && !jsonObj.get("ssh_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_user").toString()));
      }
      if (jsonObj.get("sudo_password") != null && !jsonObj.get("sudo_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sudo_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sudo_password").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("software_package") != null && !jsonObj.get("software_package").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `software_package` to be a primitive type in the JSON string but got `%s`", jsonObj.get("software_package").toString()));
      }
      if (jsonObj.get("server_address") != null && !jsonObj.get("server_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_address").toString()));
      }
      if (jsonObj.get("slave_address") != null && !jsonObj.get("slave_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slave_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slave_address").toString()));
      }
      if (jsonObj.get("pitr_stop_time") != null && !jsonObj.get("pitr_stop_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pitr_stop_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pitr_stop_time").toString()));
      }
      if (jsonObj.get("pitr_stop_log") != null && !jsonObj.get("pitr_stop_log").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pitr_stop_log` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pitr_stop_log").toString()));
      }
      if (jsonObj.get("host_location_uuid") != null && !jsonObj.get("host_location_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_location_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_location_uuid").toString()));
      }
      // validate the optional field `upload_backup_data_to_cloud_storage`
      if (jsonObj.getAsJsonObject("upload_backup_data_to_cloud_storage") != null) {
        JobsJobJobSpecJobDataUploadBackupDataToCloudStorage.validateJsonObject(jsonObj.getAsJsonObject("upload_backup_data_to_cloud_storage"));
      }
      // validate the optional field `verify_backup`
      if (jsonObj.getAsJsonObject("verify_backup") != null) {
        BackupScheduleJobJobDataVerifyBackup.validateJsonObject(jsonObj.getAsJsonObject("verify_backup"));
      }
      // validate the optional field `config_servers`
      if (jsonObj.getAsJsonObject("config_servers") != null) {
        JobsJobJobSpecJobDataConfigServers.validateJsonObject(jsonObj.getAsJsonObject("config_servers"));
      }
      JsonArray jsonArraymongosServers = jsonObj.getAsJsonArray("mongos_servers");
      if (jsonArraymongosServers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("mongos_servers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `mongos_servers` to be an array in the JSON string but got `%s`", jsonObj.get("mongos_servers").toString()));
        }

        // validate the optional field `mongos_servers` (array)
        for (int i = 0; i < jsonArraymongosServers.size(); i++) {
          JobsJobJobSpecJobDataConfigServersMembersInner.validateJsonObject(jsonArraymongosServers.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `node`
      if (jsonObj.getAsJsonObject("node") != null) {
        JobsJobJobSpecJobDataNode.validateJsonObject(jsonObj.getAsJsonObject("node"));
      }
      JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
      if (jsonArraynodes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("nodes").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
        }

        // validate the optional field `nodes` (array)
        for (int i = 0; i < jsonArraynodes.size(); i++) {
          JobsJobJobSpecJobDataNodesInner.validateJsonObject(jsonArraynodes.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraynodeAdresses = jsonObj.getAsJsonArray("node_adresses");
      if (jsonArraynodeAdresses != null) {
        // ensure the json data is an array
        if (!jsonObj.get("node_adresses").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `node_adresses` to be an array in the JSON string but got `%s`", jsonObj.get("node_adresses").toString()));
        }

        // validate the optional field `node_adresses` (array)
        for (int i = 0; i < jsonArraynodeAdresses.size(); i++) {
          JobsJobJobSpecJobDataNodeAdressesInner.validateJsonObject(jsonArraynodeAdresses.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `topology`
      if (jsonObj.getAsJsonObject("topology") != null) {
        JobsJobJobSpecJobDataTopology.validateJsonObject(jsonObj.getAsJsonObject("topology"));
      }
      JsonArray jsonArrayreplicaSets = jsonObj.getAsJsonArray("replica_sets");
      if (jsonArrayreplicaSets != null) {
        // ensure the json data is an array
        if (!jsonObj.get("replica_sets").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `replica_sets` to be an array in the JSON string but got `%s`", jsonObj.get("replica_sets").toString()));
        }

        // validate the optional field `replica_sets` (array)
        for (int i = 0; i < jsonArrayreplicaSets.size(); i++) {
          JobsJobJobSpecJobDataReplicaSetsInner.validateJsonObject(jsonArrayreplicaSets.get(i).getAsJsonObject());
        };
      }
      // ensure the json data is an array
      if (jsonObj.get("with_tags") != null && !jsonObj.get("with_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `with_tags` to be an array in the JSON string but got `%s`", jsonObj.get("with_tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobsJobJobSpecJobData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobsJobJobSpecJobData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobsJobJobSpecJobData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobsJobJobSpecJobData.class));

       return (TypeAdapter<T>) new TypeAdapter<JobsJobJobSpecJobData>() {
           @Override
           public void write(JsonWriter out, JobsJobJobSpecJobData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobsJobJobSpecJobData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobsJobJobSpecJobData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobsJobJobSpecJobData
  * @throws IOException if the JSON string is invalid with respect to JobsJobJobSpecJobData
  */
  public static JobsJobJobSpecJobData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobsJobJobSpecJobData.class);
  }

 /**
  * Convert an instance of JobsJobJobSpecJobData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

