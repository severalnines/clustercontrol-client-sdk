/*
 * Severalnines ClusterControl REST API (V2)
 * REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.
 *
 * The version of the OpenAPI document: OpenAPI specification v1.0.0
 * Contact: sales@severalnines.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.ccapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.ccapi.client.JSON;

/**
 * ConfigLdapConfigurationGroupMappingsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-28T20:03:34.941519-05:00[America/New_York]")
public class ConfigLdapConfigurationGroupMappingsInner {
  public static final String SERIALIZED_NAME_CMON_GROUP_NAME = "cmonGroupName";
  @SerializedName(SERIALIZED_NAME_CMON_GROUP_NAME)
  private String cmonGroupName;

  public static final String SERIALIZED_NAME_LDAP_GROUP_ID = "ldapGroupId";
  @SerializedName(SERIALIZED_NAME_LDAP_GROUP_ID)
  private String ldapGroupId;

  public static final String SERIALIZED_NAME_SECTION_NAME = "sectionName";
  @SerializedName(SERIALIZED_NAME_SECTION_NAME)
  private String sectionName;

  public ConfigLdapConfigurationGroupMappingsInner() {
  }

  public ConfigLdapConfigurationGroupMappingsInner cmonGroupName(String cmonGroupName) {
    
    this.cmonGroupName = cmonGroupName;
    return this;
  }

   /**
   * Get cmonGroupName
   * @return cmonGroupName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCmonGroupName() {
    return cmonGroupName;
  }


  public void setCmonGroupName(String cmonGroupName) {
    this.cmonGroupName = cmonGroupName;
  }


  public ConfigLdapConfigurationGroupMappingsInner ldapGroupId(String ldapGroupId) {
    
    this.ldapGroupId = ldapGroupId;
    return this;
  }

   /**
   * Get ldapGroupId
   * @return ldapGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLdapGroupId() {
    return ldapGroupId;
  }


  public void setLdapGroupId(String ldapGroupId) {
    this.ldapGroupId = ldapGroupId;
  }


  public ConfigLdapConfigurationGroupMappingsInner sectionName(String sectionName) {
    
    this.sectionName = sectionName;
    return this;
  }

   /**
   * Get sectionName
   * @return sectionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSectionName() {
    return sectionName;
  }


  public void setSectionName(String sectionName) {
    this.sectionName = sectionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigLdapConfigurationGroupMappingsInner configLdapConfigurationGroupMappingsInner = (ConfigLdapConfigurationGroupMappingsInner) o;
    return Objects.equals(this.cmonGroupName, configLdapConfigurationGroupMappingsInner.cmonGroupName) &&
        Objects.equals(this.ldapGroupId, configLdapConfigurationGroupMappingsInner.ldapGroupId) &&
        Objects.equals(this.sectionName, configLdapConfigurationGroupMappingsInner.sectionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmonGroupName, ldapGroupId, sectionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigLdapConfigurationGroupMappingsInner {\n");
    sb.append("    cmonGroupName: ").append(toIndentedString(cmonGroupName)).append("\n");
    sb.append("    ldapGroupId: ").append(toIndentedString(ldapGroupId)).append("\n");
    sb.append("    sectionName: ").append(toIndentedString(sectionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cmonGroupName");
    openapiFields.add("ldapGroupId");
    openapiFields.add("sectionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfigLdapConfigurationGroupMappingsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConfigLdapConfigurationGroupMappingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigLdapConfigurationGroupMappingsInner is not found in the empty JSON string", ConfigLdapConfigurationGroupMappingsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConfigLdapConfigurationGroupMappingsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigLdapConfigurationGroupMappingsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("cmonGroupName") != null && !jsonObj.get("cmonGroupName").isJsonNull()) && !jsonObj.get("cmonGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmonGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmonGroupName").toString()));
      }
      if ((jsonObj.get("ldapGroupId") != null && !jsonObj.get("ldapGroupId").isJsonNull()) && !jsonObj.get("ldapGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapGroupId").toString()));
      }
      if ((jsonObj.get("sectionName") != null && !jsonObj.get("sectionName").isJsonNull()) && !jsonObj.get("sectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigLdapConfigurationGroupMappingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigLdapConfigurationGroupMappingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigLdapConfigurationGroupMappingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigLdapConfigurationGroupMappingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigLdapConfigurationGroupMappingsInner>() {
           @Override
           public void write(JsonWriter out, ConfigLdapConfigurationGroupMappingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigLdapConfigurationGroupMappingsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigLdapConfigurationGroupMappingsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigLdapConfigurationGroupMappingsInner
  * @throws IOException if the JSON string is invalid with respect to ConfigLdapConfigurationGroupMappingsInner
  */
  public static ConfigLdapConfigurationGroupMappingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigLdapConfigurationGroupMappingsInner.class);
  }

 /**
  * Convert an instance of ConfigLdapConfigurationGroupMappingsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

