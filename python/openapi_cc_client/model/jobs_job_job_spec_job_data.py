"""
    Severalnines ClusterControl

    This is a ...  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_cc_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_cc_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_cc_client.model.backup_schedule_job_job_data_verify_backup import BackupScheduleJobJobDataVerifyBackup
    from openapi_cc_client.model.jobs_job_job_spec_job_data_config_servers import JobsJobJobSpecJobDataConfigServers
    from openapi_cc_client.model.jobs_job_job_spec_job_data_config_servers_members_inner import JobsJobJobSpecJobDataConfigServersMembersInner
    from openapi_cc_client.model.jobs_job_job_spec_job_data_node import JobsJobJobSpecJobDataNode
    from openapi_cc_client.model.jobs_job_job_spec_job_data_node_adresses_inner import JobsJobJobSpecJobDataNodeAdressesInner
    from openapi_cc_client.model.jobs_job_job_spec_job_data_nodes_inner import JobsJobJobSpecJobDataNodesInner
    from openapi_cc_client.model.jobs_job_job_spec_job_data_replica_sets_inner import JobsJobJobSpecJobDataReplicaSetsInner
    from openapi_cc_client.model.jobs_job_job_spec_job_data_topology import JobsJobJobSpecJobDataTopology
    from openapi_cc_client.model.jobs_job_job_spec_job_data_upload_backup_data_to_cloud_storage import JobsJobJobSpecJobDataUploadBackupDataToCloudStorage
    globals()['BackupScheduleJobJobDataVerifyBackup'] = BackupScheduleJobJobDataVerifyBackup
    globals()['JobsJobJobSpecJobDataConfigServers'] = JobsJobJobSpecJobDataConfigServers
    globals()['JobsJobJobSpecJobDataConfigServersMembersInner'] = JobsJobJobSpecJobDataConfigServersMembersInner
    globals()['JobsJobJobSpecJobDataNode'] = JobsJobJobSpecJobDataNode
    globals()['JobsJobJobSpecJobDataNodeAdressesInner'] = JobsJobJobSpecJobDataNodeAdressesInner
    globals()['JobsJobJobSpecJobDataNodesInner'] = JobsJobJobSpecJobDataNodesInner
    globals()['JobsJobJobSpecJobDataReplicaSetsInner'] = JobsJobJobSpecJobDataReplicaSetsInner
    globals()['JobsJobJobSpecJobDataTopology'] = JobsJobJobSpecJobDataTopology
    globals()['JobsJobJobSpecJobDataUploadBackupDataToCloudStorage'] = JobsJobJobSpecJobDataUploadBackupDataToCloudStorage


class JobsJobJobSpecJobData(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('action',): {
            'ENABLE': "enable",
            'SETUP': "setup",
            'SETUPHAPROXY': "setupHaProxy",
            'SETUPPROXYSQL': "setupProxySql",
        },
        ('archive_mode',): {
            'ALWAYS': "always",
        },
        ('cluster_type',): {
            'MSSQL_SINGLE': "mssql_single",
            'REDIS': "redis",
            'MONGODB': "mongodb",
            'MSSQL_AO_ASYNC': "mssql_ao_async",
            'POSTGRESQL_SINGLE': "postgresql_single",
            'REPLICATION': "replication",
            'GALERA': "galera",
        },
        ('backup_failover_host',): {
            'AUTO': "auto",
        },
        ('backup_method',): {
            'XTRABACKUPFULL': "xtrabackupfull",
            'XTRABACKUPINCR': "xtrabackupincr",
            'PGBACKRESTFULL': "pgbackrestfull",
            'PGBACKRESTINCR': "pgbackrestincr",
            'PGBACKRESTDIFF': "pgbackrestdiff",
            'PG_BASEBACKUP': "pg_basebackup",
            'MYSQLDUMP': "mysqldump",
            'PERCONA-BACKUP-MONGODB': "percona-backup-mongodb",
            'MSSQLCERT': "mssqlcert",
        },
        ('backup_mysqldump_type',): {
            'COMPLETE': "Complete",
            'SCHEMAANDDATA': "SchemaAndData",
            'SCHEMAONLY': "SchemaOnly",
            'DATAONLY': "DataOnly",
            'MYSQLDBONLY': "MySQLDbOnly",
        },
        ('vendor',): {
            'DEFAULT': "default",
            'PERCONA': "percona",
            'MICROSOFT': "microsoft",
            'REDIS': "redis",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'action': (str,),  # noqa: E501
            'addnode': (bool,),  # noqa: E501
            'admin_username': (str,),  # noqa: E501
            'admin_user': (str,),  # noqa: E501
            'admin_password': (str,),  # noqa: E501
            'audit_events': (str,),  # noqa: E501
            'archive_mode': (str,),  # noqa: E501
            'backupid': (int,),  # noqa: E501
            'backup_id': (int,),  # noqa: E501
            'build_from_source': (bool,),  # noqa: E501
            'cluster_name': (str,),  # noqa: E501
            'clusterid': (int,),  # noqa: E501
            'cluster_type': (str,),  # noqa: E501
            'company_id': (str,),  # noqa: E501
            'config_template': (str,),  # noqa: E501
            'backup_failover': (bool,),  # noqa: E501
            'backup_failover_host': (str,),  # noqa: E501
            'backup_method': (str,),  # noqa: E501
            'backup_mysqldump_type': (str,),  # noqa: E501
            'backup_individual_schemas': (bool,),  # noqa: E501
            'backup_retention': (int,),  # noqa: E501
            'extended_insert': (bool,),  # noqa: E501
            'backup_dir': (str,),  # noqa: E501
            'backupsubdir': (str,),  # noqa: E501
            'cc_storage': (str,),  # noqa: E501
            'compression': (bool,),  # noqa: E501
            'compression_level': (int,),  # noqa: E501
            'db_database': (str,),  # noqa: E501
            'db_password': (str,),  # noqa: E501
            'db_privs': (str,),  # noqa: E501
            'db_username': (str,),  # noqa: E501
            'data_center': (int,),  # noqa: E501
            'exec_upgrade_script': (bool,),  # noqa: E501
            'extended': (bool,),  # noqa: E501
            'listening_port': (int,),  # noqa: E501
            'mask_passwords': (bool,),  # noqa: E501
            'monitor_password': (str,),  # noqa: E501
            'monitor_user': (str,),  # noqa: E501
            'use_clustering': (bool,),  # noqa: E501
            'use_rw_split': (bool,),  # noqa: E501
            'hostname': (str,),  # noqa: E501
            'master_address': (str,),  # noqa: E501
            'include_databases': (str,),  # noqa: E501
            'install_timescaledb': (bool,),  # noqa: E501
            'update_lb': (bool,),  # noqa: E501
            'use_package_for_data_dir': (bool,),  # noqa: E501
            'encrypt_backup': (bool,),  # noqa: E501
            'throttle_rate_netbw': (int,),  # noqa: E501
            'use_pigz': (bool,),  # noqa: E501
            'use_qpress': (bool,),  # noqa: E501
            'wsrep_desync': (bool,),  # noqa: E501
            'xtrabackup_backup_locks': (bool,),  # noqa: E501
            'xtrabackup_lock_ddl_per_table': (bool,),  # noqa: E501
            'xtrabackup_parallellism': (int,),  # noqa: E501
            'verify_backup_delay': (int,),  # noqa: E501
            'data_dir': (str,),  # noqa: E501
            'db_user': (str,),  # noqa: E501
            'disable_firewall': (bool,),  # noqa: E501
            'disable_selinux': (bool,),  # noqa: E501
            'enable_uninstall': (bool,),  # noqa: E501
            'generate_token': (bool,),  # noqa: E501
            'install_software': (bool,),  # noqa: E501
            'use_internal_repos': (bool,),  # noqa: E501
            'local_repository': (str,),  # noqa: E501
            'enable_mysql_uninstall': (bool,),  # noqa: E501
            'mysql_semi_sync': (bool,),  # noqa: E501
            'enable_ssl': (bool,),  # noqa: E501
            'mongos_conf_template': (str,),  # noqa: E501
            'mongodb_authdb': (str,),  # noqa: E501
            'node_type': (int,),  # noqa: E501
            'overwrite_mysqlchk': (bool,),  # noqa: E501
            'port': (int,),  # noqa: E501
            'ssh_keyfile': (str,),  # noqa: E501
            'ssh_port': (str,),  # noqa: E501
            'ssh_user': (str,),  # noqa: E501
            'sudo_password': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'user_id': (int,),  # noqa: E501
            'vendor': (str,),  # noqa: E501
            'version': (str,),  # noqa: E501
            'software_package': (str,),  # noqa: E501
            'server_address': (str,),  # noqa: E501
            'terminate_db_server': (bool,),  # noqa: E501
            'xtrabackup_use_memory': (int,),  # noqa: E501
            'initial': (bool,),  # noqa: E501
            'reboot': (bool,),  # noqa: E501
            'slave_address': (str,),  # noqa: E501
            'force': (bool,),  # noqa: E501
            'force_stop': (bool,),  # noqa: E501
            'stop_timeout': (int,),  # noqa: E501
            'pitr_stop_time': (str,),  # noqa: E501
            'pitr_stop_log': (str,),  # noqa: E501
            'pitr_stop_pos': (int,),  # noqa: E501
            'host_location_uuid': (str,),  # noqa: E501
            'bootstrap': (bool,),  # noqa: E501
            'upload_backup_data_to_cloud_storage': (JobsJobJobSpecJobDataUploadBackupDataToCloudStorage,),  # noqa: E501
            'verify_backup': (BackupScheduleJobJobDataVerifyBackup,),  # noqa: E501
            'config_servers': (JobsJobJobSpecJobDataConfigServers,),  # noqa: E501
            'mongos_servers': ([JobsJobJobSpecJobDataConfigServersMembersInner],),  # noqa: E501
            'node': (JobsJobJobSpecJobDataNode,),  # noqa: E501
            'nodes': ([JobsJobJobSpecJobDataNodesInner],),  # noqa: E501
            'node_adresses': ([JobsJobJobSpecJobDataNodeAdressesInner],),  # noqa: E501
            'topology': (JobsJobJobSpecJobDataTopology,),  # noqa: E501
            'replica_sets': ([JobsJobJobSpecJobDataReplicaSetsInner],),  # noqa: E501
            'with_tags': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'action': 'action',  # noqa: E501
        'addnode': 'addnode',  # noqa: E501
        'admin_username': 'admin_username',  # noqa: E501
        'admin_user': 'admin_user',  # noqa: E501
        'admin_password': 'admin_password',  # noqa: E501
        'audit_events': 'audit_events',  # noqa: E501
        'archive_mode': 'archive_mode',  # noqa: E501
        'backupid': 'backupid',  # noqa: E501
        'backup_id': 'backup_id',  # noqa: E501
        'build_from_source': 'build_from_source',  # noqa: E501
        'cluster_name': 'cluster_name',  # noqa: E501
        'clusterid': 'clusterid',  # noqa: E501
        'cluster_type': 'cluster_type',  # noqa: E501
        'company_id': 'company_id',  # noqa: E501
        'config_template': 'config_template',  # noqa: E501
        'backup_failover': 'backup_failover',  # noqa: E501
        'backup_failover_host': 'backup_failover_host',  # noqa: E501
        'backup_method': 'backup_method',  # noqa: E501
        'backup_mysqldump_type': 'backup_mysqldump_type',  # noqa: E501
        'backup_individual_schemas': 'backup_individual_schemas',  # noqa: E501
        'backup_retention': 'backup_retention',  # noqa: E501
        'extended_insert': 'extended_insert',  # noqa: E501
        'backup_dir': 'backup_dir',  # noqa: E501
        'backupsubdir': 'backupsubdir',  # noqa: E501
        'cc_storage': 'cc_storage',  # noqa: E501
        'compression': 'compression',  # noqa: E501
        'compression_level': 'compression_level',  # noqa: E501
        'db_database': 'db_database',  # noqa: E501
        'db_password': 'db_password',  # noqa: E501
        'db_privs': 'db_privs',  # noqa: E501
        'db_username': 'db_username',  # noqa: E501
        'data_center': 'data_center',  # noqa: E501
        'exec_upgrade_script': 'exec_upgrade_script',  # noqa: E501
        'extended': 'extended',  # noqa: E501
        'listening_port': 'listening_port',  # noqa: E501
        'mask_passwords': 'mask_passwords',  # noqa: E501
        'monitor_password': 'monitor_password',  # noqa: E501
        'monitor_user': 'monitor_user',  # noqa: E501
        'use_clustering': 'use_clustering',  # noqa: E501
        'use_rw_split': 'use_rw_split',  # noqa: E501
        'hostname': 'hostname',  # noqa: E501
        'master_address': 'master_address',  # noqa: E501
        'include_databases': 'include_databases',  # noqa: E501
        'install_timescaledb': 'install_timescaledb',  # noqa: E501
        'update_lb': 'update_lb',  # noqa: E501
        'use_package_for_data_dir': 'usePackageForDataDir',  # noqa: E501
        'encrypt_backup': 'encrypt_backup',  # noqa: E501
        'throttle_rate_netbw': 'throttle_rate_netbw',  # noqa: E501
        'use_pigz': 'use_pigz',  # noqa: E501
        'use_qpress': 'use_qpress',  # noqa: E501
        'wsrep_desync': 'wsrep_desync',  # noqa: E501
        'xtrabackup_backup_locks': 'xtrabackup_backup_locks',  # noqa: E501
        'xtrabackup_lock_ddl_per_table': 'xtrabackup_lock_ddl_per_table',  # noqa: E501
        'xtrabackup_parallellism': 'xtrabackup_parallellism',  # noqa: E501
        'verify_backup_delay': 'verify_backup_delay',  # noqa: E501
        'data_dir': 'data_dir',  # noqa: E501
        'db_user': 'db_user',  # noqa: E501
        'disable_firewall': 'disable_firewall',  # noqa: E501
        'disable_selinux': 'disable_selinux',  # noqa: E501
        'enable_uninstall': 'enable_uninstall',  # noqa: E501
        'generate_token': 'generate_token',  # noqa: E501
        'install_software': 'install_software',  # noqa: E501
        'use_internal_repos': 'use_internal_repos',  # noqa: E501
        'local_repository': 'local_repository',  # noqa: E501
        'enable_mysql_uninstall': 'enable_mysql_uninstall',  # noqa: E501
        'mysql_semi_sync': 'mysql_semi_sync',  # noqa: E501
        'enable_ssl': 'enable_ssl',  # noqa: E501
        'mongos_conf_template': 'mongos_conf_template',  # noqa: E501
        'mongodb_authdb': 'mongodb_authdb',  # noqa: E501
        'node_type': 'node_type',  # noqa: E501
        'overwrite_mysqlchk': 'overwrite_mysqlchk',  # noqa: E501
        'port': 'port',  # noqa: E501
        'ssh_keyfile': 'ssh_keyfile',  # noqa: E501
        'ssh_port': 'ssh_port',  # noqa: E501
        'ssh_user': 'ssh_user',  # noqa: E501
        'sudo_password': 'sudo_password',  # noqa: E501
        'type': 'type',  # noqa: E501
        'user_id': 'user_id',  # noqa: E501
        'vendor': 'vendor',  # noqa: E501
        'version': 'version',  # noqa: E501
        'software_package': 'software_package',  # noqa: E501
        'server_address': 'server_address',  # noqa: E501
        'terminate_db_server': 'terminate_db_server',  # noqa: E501
        'xtrabackup_use_memory': 'xtrabackup_use_memory',  # noqa: E501
        'initial': 'initial',  # noqa: E501
        'reboot': 'reboot',  # noqa: E501
        'slave_address': 'slave_address',  # noqa: E501
        'force': 'force',  # noqa: E501
        'force_stop': 'force_stop',  # noqa: E501
        'stop_timeout': 'stop_timeout',  # noqa: E501
        'pitr_stop_time': 'pitr_stop_time',  # noqa: E501
        'pitr_stop_log': 'pitr_stop_log',  # noqa: E501
        'pitr_stop_pos': 'pitr_stop_pos',  # noqa: E501
        'host_location_uuid': 'host_location_uuid',  # noqa: E501
        'bootstrap': 'bootstrap',  # noqa: E501
        'upload_backup_data_to_cloud_storage': 'upload_backup_data_to_cloud_storage',  # noqa: E501
        'verify_backup': 'verify_backup',  # noqa: E501
        'config_servers': 'config_servers',  # noqa: E501
        'mongos_servers': 'mongos_servers',  # noqa: E501
        'node': 'node',  # noqa: E501
        'nodes': 'nodes',  # noqa: E501
        'node_adresses': 'node_adresses',  # noqa: E501
        'topology': 'topology',  # noqa: E501
        'replica_sets': 'replica_sets',  # noqa: E501
        'with_tags': 'with_tags',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """JobsJobJobSpecJobData - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            action (str): [optional]  # noqa: E501
            addnode (bool): [optional]  # noqa: E501
            admin_username (str): [optional]  # noqa: E501
            admin_user (str): [optional]  # noqa: E501
            admin_password (str): [optional]  # noqa: E501
            audit_events (str): [optional]  # noqa: E501
            archive_mode (str): [optional] if omitted the server will use the default value of "always"  # noqa: E501
            backupid (int): [optional]  # noqa: E501
            backup_id (int): [optional]  # noqa: E501
            build_from_source (bool): [optional]  # noqa: E501
            cluster_name (str): [optional]  # noqa: E501
            clusterid (int): [optional]  # noqa: E501
            cluster_type (str): [optional]  # noqa: E501
            company_id (str): [optional]  # noqa: E501
            config_template (str): [optional]  # noqa: E501
            backup_failover (bool): [optional]  # noqa: E501
            backup_failover_host (str): [optional] if omitted the server will use the default value of "auto"  # noqa: E501
            backup_method (str): [optional]  # noqa: E501
            backup_mysqldump_type (str): [optional]  # noqa: E501
            backup_individual_schemas (bool): [optional]  # noqa: E501
            backup_retention (int): [optional]  # noqa: E501
            extended_insert (bool): [optional]  # noqa: E501
            backup_dir (str): [optional]  # noqa: E501
            backupsubdir (str): [optional]  # noqa: E501
            cc_storage (str): [optional]  # noqa: E501
            compression (bool): [optional]  # noqa: E501
            compression_level (int): [optional]  # noqa: E501
            db_database (str): [optional]  # noqa: E501
            db_password (str): [optional]  # noqa: E501
            db_privs (str): [optional]  # noqa: E501
            db_username (str): [optional]  # noqa: E501
            data_center (int): [optional]  # noqa: E501
            exec_upgrade_script (bool): [optional]  # noqa: E501
            extended (bool): [optional]  # noqa: E501
            listening_port (int): [optional]  # noqa: E501
            mask_passwords (bool): [optional]  # noqa: E501
            monitor_password (str): [optional]  # noqa: E501
            monitor_user (str): [optional]  # noqa: E501
            use_clustering (bool): [optional]  # noqa: E501
            use_rw_split (bool): [optional]  # noqa: E501
            hostname (str): [optional]  # noqa: E501
            master_address (str): [optional]  # noqa: E501
            include_databases (str): [optional]  # noqa: E501
            install_timescaledb (bool): [optional]  # noqa: E501
            update_lb (bool): [optional]  # noqa: E501
            use_package_for_data_dir (bool): [optional]  # noqa: E501
            encrypt_backup (bool): [optional]  # noqa: E501
            throttle_rate_netbw (int): [optional]  # noqa: E501
            use_pigz (bool): [optional]  # noqa: E501
            use_qpress (bool): [optional]  # noqa: E501
            wsrep_desync (bool): [optional]  # noqa: E501
            xtrabackup_backup_locks (bool): [optional]  # noqa: E501
            xtrabackup_lock_ddl_per_table (bool): [optional]  # noqa: E501
            xtrabackup_parallellism (int): [optional]  # noqa: E501
            verify_backup_delay (int): [optional]  # noqa: E501
            data_dir (str): [optional]  # noqa: E501
            db_user (str): [optional]  # noqa: E501
            disable_firewall (bool): [optional]  # noqa: E501
            disable_selinux (bool): [optional]  # noqa: E501
            enable_uninstall (bool): [optional]  # noqa: E501
            generate_token (bool): [optional]  # noqa: E501
            install_software (bool): [optional]  # noqa: E501
            use_internal_repos (bool): [optional]  # noqa: E501
            local_repository (str): [optional]  # noqa: E501
            enable_mysql_uninstall (bool): [optional]  # noqa: E501
            mysql_semi_sync (bool): [optional]  # noqa: E501
            enable_ssl (bool): [optional]  # noqa: E501
            mongos_conf_template (str): [optional]  # noqa: E501
            mongodb_authdb (str): [optional]  # noqa: E501
            node_type (int): [optional]  # noqa: E501
            overwrite_mysqlchk (bool): [optional]  # noqa: E501
            port (int): [optional]  # noqa: E501
            ssh_keyfile (str): [optional]  # noqa: E501
            ssh_port (str): [optional]  # noqa: E501
            ssh_user (str): [optional]  # noqa: E501
            sudo_password (str): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            user_id (int): [optional]  # noqa: E501
            vendor (str): [optional]  # noqa: E501
            version (str): [optional]  # noqa: E501
            software_package (str): [optional]  # noqa: E501
            server_address (str): [optional]  # noqa: E501
            terminate_db_server (bool): [optional]  # noqa: E501
            xtrabackup_use_memory (int): [optional]  # noqa: E501
            initial (bool): [optional]  # noqa: E501
            reboot (bool): [optional]  # noqa: E501
            slave_address (str): [optional]  # noqa: E501
            force (bool): [optional]  # noqa: E501
            force_stop (bool): [optional]  # noqa: E501
            stop_timeout (int): [optional]  # noqa: E501
            pitr_stop_time (str): [optional]  # noqa: E501
            pitr_stop_log (str): [optional]  # noqa: E501
            pitr_stop_pos (int): [optional]  # noqa: E501
            host_location_uuid (str): [optional]  # noqa: E501
            bootstrap (bool): [optional]  # noqa: E501
            upload_backup_data_to_cloud_storage (JobsJobJobSpecJobDataUploadBackupDataToCloudStorage): [optional]  # noqa: E501
            verify_backup (BackupScheduleJobJobDataVerifyBackup): [optional]  # noqa: E501
            config_servers (JobsJobJobSpecJobDataConfigServers): [optional]  # noqa: E501
            mongos_servers ([JobsJobJobSpecJobDataConfigServersMembersInner]): [optional]  # noqa: E501
            node (JobsJobJobSpecJobDataNode): [optional]  # noqa: E501
            nodes ([JobsJobJobSpecJobDataNodesInner]): [optional]  # noqa: E501
            node_adresses ([JobsJobJobSpecJobDataNodeAdressesInner]): [optional]  # noqa: E501
            topology (JobsJobJobSpecJobDataTopology): [optional]  # noqa: E501
            replica_sets ([JobsJobJobSpecJobDataReplicaSetsInner]): [optional]  # noqa: E501
            with_tags ([str]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """JobsJobJobSpecJobData - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            action (str): [optional]  # noqa: E501
            addnode (bool): [optional]  # noqa: E501
            admin_username (str): [optional]  # noqa: E501
            admin_user (str): [optional]  # noqa: E501
            admin_password (str): [optional]  # noqa: E501
            audit_events (str): [optional]  # noqa: E501
            archive_mode (str): [optional] if omitted the server will use the default value of "always"  # noqa: E501
            backupid (int): [optional]  # noqa: E501
            backup_id (int): [optional]  # noqa: E501
            build_from_source (bool): [optional]  # noqa: E501
            cluster_name (str): [optional]  # noqa: E501
            clusterid (int): [optional]  # noqa: E501
            cluster_type (str): [optional]  # noqa: E501
            company_id (str): [optional]  # noqa: E501
            config_template (str): [optional]  # noqa: E501
            backup_failover (bool): [optional]  # noqa: E501
            backup_failover_host (str): [optional] if omitted the server will use the default value of "auto"  # noqa: E501
            backup_method (str): [optional]  # noqa: E501
            backup_mysqldump_type (str): [optional]  # noqa: E501
            backup_individual_schemas (bool): [optional]  # noqa: E501
            backup_retention (int): [optional]  # noqa: E501
            extended_insert (bool): [optional]  # noqa: E501
            backup_dir (str): [optional]  # noqa: E501
            backupsubdir (str): [optional]  # noqa: E501
            cc_storage (str): [optional]  # noqa: E501
            compression (bool): [optional]  # noqa: E501
            compression_level (int): [optional]  # noqa: E501
            db_database (str): [optional]  # noqa: E501
            db_password (str): [optional]  # noqa: E501
            db_privs (str): [optional]  # noqa: E501
            db_username (str): [optional]  # noqa: E501
            data_center (int): [optional]  # noqa: E501
            exec_upgrade_script (bool): [optional]  # noqa: E501
            extended (bool): [optional]  # noqa: E501
            listening_port (int): [optional]  # noqa: E501
            mask_passwords (bool): [optional]  # noqa: E501
            monitor_password (str): [optional]  # noqa: E501
            monitor_user (str): [optional]  # noqa: E501
            use_clustering (bool): [optional]  # noqa: E501
            use_rw_split (bool): [optional]  # noqa: E501
            hostname (str): [optional]  # noqa: E501
            master_address (str): [optional]  # noqa: E501
            include_databases (str): [optional]  # noqa: E501
            install_timescaledb (bool): [optional]  # noqa: E501
            update_lb (bool): [optional]  # noqa: E501
            use_package_for_data_dir (bool): [optional]  # noqa: E501
            encrypt_backup (bool): [optional]  # noqa: E501
            throttle_rate_netbw (int): [optional]  # noqa: E501
            use_pigz (bool): [optional]  # noqa: E501
            use_qpress (bool): [optional]  # noqa: E501
            wsrep_desync (bool): [optional]  # noqa: E501
            xtrabackup_backup_locks (bool): [optional]  # noqa: E501
            xtrabackup_lock_ddl_per_table (bool): [optional]  # noqa: E501
            xtrabackup_parallellism (int): [optional]  # noqa: E501
            verify_backup_delay (int): [optional]  # noqa: E501
            data_dir (str): [optional]  # noqa: E501
            db_user (str): [optional]  # noqa: E501
            disable_firewall (bool): [optional]  # noqa: E501
            disable_selinux (bool): [optional]  # noqa: E501
            enable_uninstall (bool): [optional]  # noqa: E501
            generate_token (bool): [optional]  # noqa: E501
            install_software (bool): [optional]  # noqa: E501
            use_internal_repos (bool): [optional]  # noqa: E501
            local_repository (str): [optional]  # noqa: E501
            enable_mysql_uninstall (bool): [optional]  # noqa: E501
            mysql_semi_sync (bool): [optional]  # noqa: E501
            enable_ssl (bool): [optional]  # noqa: E501
            mongos_conf_template (str): [optional]  # noqa: E501
            mongodb_authdb (str): [optional]  # noqa: E501
            node_type (int): [optional]  # noqa: E501
            overwrite_mysqlchk (bool): [optional]  # noqa: E501
            port (int): [optional]  # noqa: E501
            ssh_keyfile (str): [optional]  # noqa: E501
            ssh_port (str): [optional]  # noqa: E501
            ssh_user (str): [optional]  # noqa: E501
            sudo_password (str): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            user_id (int): [optional]  # noqa: E501
            vendor (str): [optional]  # noqa: E501
            version (str): [optional]  # noqa: E501
            software_package (str): [optional]  # noqa: E501
            server_address (str): [optional]  # noqa: E501
            terminate_db_server (bool): [optional]  # noqa: E501
            xtrabackup_use_memory (int): [optional]  # noqa: E501
            initial (bool): [optional]  # noqa: E501
            reboot (bool): [optional]  # noqa: E501
            slave_address (str): [optional]  # noqa: E501
            force (bool): [optional]  # noqa: E501
            force_stop (bool): [optional]  # noqa: E501
            stop_timeout (int): [optional]  # noqa: E501
            pitr_stop_time (str): [optional]  # noqa: E501
            pitr_stop_log (str): [optional]  # noqa: E501
            pitr_stop_pos (int): [optional]  # noqa: E501
            host_location_uuid (str): [optional]  # noqa: E501
            bootstrap (bool): [optional]  # noqa: E501
            upload_backup_data_to_cloud_storage (JobsJobJobSpecJobDataUploadBackupDataToCloudStorage): [optional]  # noqa: E501
            verify_backup (BackupScheduleJobJobDataVerifyBackup): [optional]  # noqa: E501
            config_servers (JobsJobJobSpecJobDataConfigServers): [optional]  # noqa: E501
            mongos_servers ([JobsJobJobSpecJobDataConfigServersMembersInner]): [optional]  # noqa: E501
            node (JobsJobJobSpecJobDataNode): [optional]  # noqa: E501
            nodes ([JobsJobJobSpecJobDataNodesInner]): [optional]  # noqa: E501
            node_adresses ([JobsJobJobSpecJobDataNodeAdressesInner]): [optional]  # noqa: E501
            topology (JobsJobJobSpecJobDataTopology): [optional]  # noqa: E501
            replica_sets ([JobsJobJobSpecJobDataReplicaSetsInner]): [optional]  # noqa: E501
            with_tags ([str]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
