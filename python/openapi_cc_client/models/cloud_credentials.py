# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class CloudCredentials(BaseModel):
    """
    CloudCredentials
    """
    access_key_id: Optional[StrictStr] = None
    access_key_secret: Optional[StrictStr] = None
    access_key_region: Optional[StrictStr] = None
    __properties = ["access_key_id", "access_key_secret", "access_key_region"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CloudCredentials:
        """Create an instance of CloudCredentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CloudCredentials:
        """Create an instance of CloudCredentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CloudCredentials.parse_obj(obj)

        _obj = CloudCredentials.parse_obj({
            "access_key_id": obj.get("access_key_id"),
            "access_key_secret": obj.get("access_key_secret"),
            "access_key_region": obj.get("access_key_region")
        })
        return _obj


