# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class StatCmonAgentRequestData(BaseModel):
    """
    StatCmonAgentRequestData
    """
    begin: Optional[StrictStr] = Field(None, description="e.g. \"2021-06-07T09:41:43.636Z\"")
    class_name: Optional[StrictStr] = Field(None, alias="className")
    end: Optional[StrictStr] = Field(None, description="e.g. \"2021-06-07T09:41:43.636Z\"")
    limit: Optional[StrictInt] = None
    mime_type: Optional[StrictStr] = Field(None, alias="mimeType")
    object_name: Optional[StrictStr] = Field(None, alias="objectName")
    origin: Optional[StrictStr] = None
    __properties = ["begin", "className", "end", "limit", "mimeType", "objectName", "origin"]

    @validator('class_name')
    def class_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CmnReadParam'):
            raise ValueError("must be one of enum values ('CmnReadParam')")
        return value

    @validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('timeline'):
            raise ValueError("must be one of enum values ('timeline')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatCmonAgentRequestData:
        """Create an instance of StatCmonAgentRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatCmonAgentRequestData:
        """Create an instance of StatCmonAgentRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatCmonAgentRequestData.parse_obj(obj)

        _obj = StatCmonAgentRequestData.parse_obj({
            "begin": obj.get("begin"),
            "class_name": obj.get("className"),
            "end": obj.get("end"),
            "limit": obj.get("limit"),
            "mime_type": obj.get("mimeType"),
            "object_name": obj.get("objectName"),
            "origin": obj.get("origin")
        })
        return _obj


