# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from openapi_cc_client.models.jobs_job_job_spec_job_data_node_configuration_inner import JobsJobJobSpecJobDataNodeConfigurationInner

class JobsJobJobSpecJobDataNode(BaseModel):
    """
    JobsJobJobSpecJobDataNode
    """
    backend_name_ro: Optional[StrictStr] = None
    backend_name_rw: Optional[StrictStr] = None
    data_retention: Optional[StrictStr] = None
    data_retention_size: Optional[StrictInt] = None
    hostname: Optional[StrictStr] = None
    lb_admin: Optional[StrictStr] = None
    lb_password: Optional[StrictStr] = None
    lb_policy: Optional[StrictStr] = None
    max_connection_be: Optional[StrictInt] = None
    max_connection_fe: Optional[StrictInt] = None
    port: Optional[StrictInt] = None
    ro_port: Optional[StrictInt] = None
    rw_port: Optional[StrictInt] = None
    rw_splitting: Optional[StrictBool] = None
    stats_socket: Optional[StrictStr] = None
    timeout_client: Optional[StrictInt] = None
    timeout_server: Optional[StrictInt] = None
    xinetd_allow_from: Optional[StrictStr] = None
    scrape_interval: Optional[StrictStr] = None
    configuration: Optional[conlist(JobsJobJobSpecJobDataNodeConfigurationInner)] = None
    __properties = ["backend_name_ro", "backend_name_rw", "data_retention", "data_retention_size", "hostname", "lb_admin", "lb_password", "lb_policy", "max_connection_be", "max_connection_fe", "port", "ro_port", "rw_port", "rw_splitting", "stats_socket", "timeout_client", "timeout_server", "xinetd_allow_from", "scrape_interval", "configuration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobsJobJobSpecJobDataNode:
        """Create an instance of JobsJobJobSpecJobDataNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in configuration (list)
        _items = []
        if self.configuration:
            for _item in self.configuration:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configuration'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobsJobJobSpecJobDataNode:
        """Create an instance of JobsJobJobSpecJobDataNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobsJobJobSpecJobDataNode.parse_obj(obj)

        _obj = JobsJobJobSpecJobDataNode.parse_obj({
            "backend_name_ro": obj.get("backend_name_ro"),
            "backend_name_rw": obj.get("backend_name_rw"),
            "data_retention": obj.get("data_retention"),
            "data_retention_size": obj.get("data_retention_size"),
            "hostname": obj.get("hostname"),
            "lb_admin": obj.get("lb_admin"),
            "lb_password": obj.get("lb_password"),
            "lb_policy": obj.get("lb_policy"),
            "max_connection_be": obj.get("max_connection_be"),
            "max_connection_fe": obj.get("max_connection_fe"),
            "port": obj.get("port"),
            "ro_port": obj.get("ro_port"),
            "rw_port": obj.get("rw_port"),
            "rw_splitting": obj.get("rw_splitting"),
            "stats_socket": obj.get("stats_socket"),
            "timeout_client": obj.get("timeout_client"),
            "timeout_server": obj.get("timeout_server"),
            "xinetd_allow_from": obj.get("xinetd_allow_from"),
            "scrape_interval": obj.get("scrape_interval"),
            "configuration": [JobsJobJobSpecJobDataNodeConfigurationInner.from_dict(_item) for _item in obj.get("configuration")] if obj.get("configuration") is not None else None
        })
        return _obj


