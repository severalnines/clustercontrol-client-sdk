# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, validator

class JobsJobJobSpecJobDataNodesInner(BaseModel):
    """
    JobsJobJobSpecJobDataNodesInner
    """
    class_name: Optional[StrictStr] = None
    cdt_path: Optional[StrictStr] = None
    acl: Optional[StrictStr] = None
    clusterid: Optional[StrictInt] = None
    ip: Optional[StrictStr] = None
    maintenance_mode: Optional[StrictStr] = None
    maintenance_mode_active: Optional[StrictBool] = None
    timestamp: Optional[StrictInt] = None
    unique_id: Optional[StrictInt] = None
    hostname: Optional[StrictStr] = None
    hostname_data: Optional[StrictStr] = None
    hostname_internal: Optional[StrictStr] = None
    port: Optional[StrictStr] = None
    nodetype: Optional[StrictStr] = None
    configfile: Optional[StrictStr] = None
    datadir: Optional[StrictStr] = None
    backup_dir: Optional[StrictStr] = None
    synchronous: Optional[StrictBool] = None
    protocol: Optional[StrictStr] = None
    roles: Optional[StrictStr] = None
    __properties = ["class_name", "cdt_path", "acl", "clusterid", "ip", "maintenance_mode", "maintenance_mode_active", "timestamp", "unique_id", "hostname", "hostname_data", "hostname_internal", "port", "nodetype", "configfile", "datadir", "backup_dir", "synchronous", "protocol", "roles"]

    @validator('class_name')
    def class_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CmonRedisHost', 'CmonRedisSentinelHost', 'CmonHost', 'CmonPBMAgentHost', 'CmonPgBouncerHost', 'CmonMsSqlHost', 'CmonElasticHost'):
            raise ValueError("must be one of enum values ('CmonRedisHost', 'CmonRedisSentinelHost', 'CmonHost', 'CmonPBMAgentHost', 'CmonPgBouncerHost', 'CmonMsSqlHost', 'CmonElasticHost')")
        return value

    @validator('maintenance_mode')
    def maintenance_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('none'):
            raise ValueError("must be one of enum values ('none')")
        return value

    @validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('elastic'):
            raise ValueError("must be one of enum values ('elastic')")
        return value

    @validator('roles')
    def roles_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('master', 'data', 'master-data'):
            raise ValueError("must be one of enum values ('master', 'data', 'master-data')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobsJobJobSpecJobDataNodesInner:
        """Create an instance of JobsJobJobSpecJobDataNodesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobsJobJobSpecJobDataNodesInner:
        """Create an instance of JobsJobJobSpecJobDataNodesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobsJobJobSpecJobDataNodesInner.parse_obj(obj)

        _obj = JobsJobJobSpecJobDataNodesInner.parse_obj({
            "class_name": obj.get("class_name"),
            "cdt_path": obj.get("cdt_path"),
            "acl": obj.get("acl"),
            "clusterid": obj.get("clusterid"),
            "ip": obj.get("ip"),
            "maintenance_mode": obj.get("maintenance_mode"),
            "maintenance_mode_active": obj.get("maintenance_mode_active"),
            "timestamp": obj.get("timestamp"),
            "unique_id": obj.get("unique_id"),
            "hostname": obj.get("hostname"),
            "hostname_data": obj.get("hostname_data"),
            "hostname_internal": obj.get("hostname_internal"),
            "port": obj.get("port"),
            "nodetype": obj.get("nodetype"),
            "configfile": obj.get("configfile"),
            "datadir": obj.get("datadir"),
            "backup_dir": obj.get("backup_dir"),
            "synchronous": obj.get("synchronous"),
            "protocol": obj.get("protocol"),
            "roles": obj.get("roles")
        })
        return _obj


