# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class JobsJobJobSpecJobDataNodesInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'cdt_path': 'str',
        'acl': 'str',
        'clusterid': 'int',
        'ip': 'str',
        'maintenance_mode': 'str',
        'maintenance_mode_active': 'bool',
        'timestamp': 'int',
        'unique_id': 'int',
        'hostname': 'str',
        'hostname_data': 'str',
        'hostname_internal': 'str',
        'port': 'str',
        'nodetype': 'str',
        'configfile': 'str',
        'datadir': 'str',
        'backup_dir': 'str',
        'synchronous': 'bool',
        'protocol': 'str',
        'roles': 'str'
    }

    attribute_map = {
        'class_name': 'class_name',
        'cdt_path': 'cdt_path',
        'acl': 'acl',
        'clusterid': 'clusterid',
        'ip': 'ip',
        'maintenance_mode': 'maintenance_mode',
        'maintenance_mode_active': 'maintenance_mode_active',
        'timestamp': 'timestamp',
        'unique_id': 'unique_id',
        'hostname': 'hostname',
        'hostname_data': 'hostname_data',
        'hostname_internal': 'hostname_internal',
        'port': 'port',
        'nodetype': 'nodetype',
        'configfile': 'configfile',
        'datadir': 'datadir',
        'backup_dir': 'backup_dir',
        'synchronous': 'synchronous',
        'protocol': 'protocol',
        'roles': 'roles'
    }

    def __init__(self, class_name=None, cdt_path=None, acl=None, clusterid=None, ip=None, maintenance_mode=None, maintenance_mode_active=None, timestamp=None, unique_id=None, hostname=None, hostname_data=None, hostname_internal=None, port=None, nodetype=None, configfile=None, datadir=None, backup_dir=None, synchronous=None, protocol=None, roles=None, local_vars_configuration=None):  # noqa: E501
        """JobsJobJobSpecJobDataNodesInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._cdt_path = None
        self._acl = None
        self._clusterid = None
        self._ip = None
        self._maintenance_mode = None
        self._maintenance_mode_active = None
        self._timestamp = None
        self._unique_id = None
        self._hostname = None
        self._hostname_data = None
        self._hostname_internal = None
        self._port = None
        self._nodetype = None
        self._configfile = None
        self._datadir = None
        self._backup_dir = None
        self._synchronous = None
        self._protocol = None
        self._roles = None
        self.discriminator = None

        if class_name is not None:
            self.class_name = class_name
        if cdt_path is not None:
            self.cdt_path = cdt_path
        if acl is not None:
            self.acl = acl
        if clusterid is not None:
            self.clusterid = clusterid
        if ip is not None:
            self.ip = ip
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if maintenance_mode_active is not None:
            self.maintenance_mode_active = maintenance_mode_active
        if timestamp is not None:
            self.timestamp = timestamp
        if unique_id is not None:
            self.unique_id = unique_id
        if hostname is not None:
            self.hostname = hostname
        if hostname_data is not None:
            self.hostname_data = hostname_data
        if hostname_internal is not None:
            self.hostname_internal = hostname_internal
        if port is not None:
            self.port = port
        if nodetype is not None:
            self.nodetype = nodetype
        if configfile is not None:
            self.configfile = configfile
        if datadir is not None:
            self.datadir = datadir
        if backup_dir is not None:
            self.backup_dir = backup_dir
        if synchronous is not None:
            self.synchronous = synchronous
        if protocol is not None:
            self.protocol = protocol
        if roles is not None:
            self.roles = roles

    @property
    def class_name(self):
        """Gets the class_name of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The class_name of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this JobsJobJobSpecJobDataNodesInner.


        :param class_name: The class_name of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type class_name: str
        """
        allowed_values = ["CmonRedisHost", "CmonRedisSentinelHost", "CmonHost", "CmonPBMAgentHost", "CmonPgBouncerHost", "CmonMsSqlHost", "CmonElasticHost"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and class_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `class_name` ({0}), must be one of {1}"  # noqa: E501
                .format(class_name, allowed_values)
            )

        self._class_name = class_name

    @property
    def cdt_path(self):
        """Gets the cdt_path of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The cdt_path of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._cdt_path

    @cdt_path.setter
    def cdt_path(self, cdt_path):
        """Sets the cdt_path of this JobsJobJobSpecJobDataNodesInner.


        :param cdt_path: The cdt_path of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type cdt_path: str
        """

        self._cdt_path = cdt_path

    @property
    def acl(self):
        """Gets the acl of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The acl of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this JobsJobJobSpecJobDataNodesInner.


        :param acl: The acl of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type acl: str
        """

        self._acl = acl

    @property
    def clusterid(self):
        """Gets the clusterid of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The clusterid of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: int
        """
        return self._clusterid

    @clusterid.setter
    def clusterid(self, clusterid):
        """Sets the clusterid of this JobsJobJobSpecJobDataNodesInner.


        :param clusterid: The clusterid of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type clusterid: int
        """

        self._clusterid = clusterid

    @property
    def ip(self):
        """Gets the ip of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The ip of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this JobsJobJobSpecJobDataNodesInner.


        :param ip: The ip of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type ip: str
        """

        self._ip = ip

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The maintenance_mode of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this JobsJobJobSpecJobDataNodesInner.


        :param maintenance_mode: The maintenance_mode of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type maintenance_mode: str
        """
        allowed_values = ["none"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and maintenance_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `maintenance_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_mode, allowed_values)
            )

        self._maintenance_mode = maintenance_mode

    @property
    def maintenance_mode_active(self):
        """Gets the maintenance_mode_active of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The maintenance_mode_active of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: bool
        """
        return self._maintenance_mode_active

    @maintenance_mode_active.setter
    def maintenance_mode_active(self, maintenance_mode_active):
        """Sets the maintenance_mode_active of this JobsJobJobSpecJobDataNodesInner.


        :param maintenance_mode_active: The maintenance_mode_active of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type maintenance_mode_active: bool
        """

        self._maintenance_mode_active = maintenance_mode_active

    @property
    def timestamp(self):
        """Gets the timestamp of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The timestamp of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this JobsJobJobSpecJobDataNodesInner.


        :param timestamp: The timestamp of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def unique_id(self):
        """Gets the unique_id of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The unique_id of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this JobsJobJobSpecJobDataNodesInner.


        :param unique_id: The unique_id of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type unique_id: int
        """

        self._unique_id = unique_id

    @property
    def hostname(self):
        """Gets the hostname of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The hostname of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this JobsJobJobSpecJobDataNodesInner.


        :param hostname: The hostname of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def hostname_data(self):
        """Gets the hostname_data of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The hostname_data of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._hostname_data

    @hostname_data.setter
    def hostname_data(self, hostname_data):
        """Sets the hostname_data of this JobsJobJobSpecJobDataNodesInner.


        :param hostname_data: The hostname_data of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type hostname_data: str
        """

        self._hostname_data = hostname_data

    @property
    def hostname_internal(self):
        """Gets the hostname_internal of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The hostname_internal of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._hostname_internal

    @hostname_internal.setter
    def hostname_internal(self, hostname_internal):
        """Sets the hostname_internal of this JobsJobJobSpecJobDataNodesInner.


        :param hostname_internal: The hostname_internal of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type hostname_internal: str
        """

        self._hostname_internal = hostname_internal

    @property
    def port(self):
        """Gets the port of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The port of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this JobsJobJobSpecJobDataNodesInner.


        :param port: The port of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type port: str
        """

        self._port = port

    @property
    def nodetype(self):
        """Gets the nodetype of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The nodetype of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._nodetype

    @nodetype.setter
    def nodetype(self, nodetype):
        """Sets the nodetype of this JobsJobJobSpecJobDataNodesInner.


        :param nodetype: The nodetype of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type nodetype: str
        """

        self._nodetype = nodetype

    @property
    def configfile(self):
        """Gets the configfile of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The configfile of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._configfile

    @configfile.setter
    def configfile(self, configfile):
        """Sets the configfile of this JobsJobJobSpecJobDataNodesInner.


        :param configfile: The configfile of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type configfile: str
        """

        self._configfile = configfile

    @property
    def datadir(self):
        """Gets the datadir of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The datadir of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._datadir

    @datadir.setter
    def datadir(self, datadir):
        """Sets the datadir of this JobsJobJobSpecJobDataNodesInner.


        :param datadir: The datadir of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type datadir: str
        """

        self._datadir = datadir

    @property
    def backup_dir(self):
        """Gets the backup_dir of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The backup_dir of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._backup_dir

    @backup_dir.setter
    def backup_dir(self, backup_dir):
        """Sets the backup_dir of this JobsJobJobSpecJobDataNodesInner.


        :param backup_dir: The backup_dir of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type backup_dir: str
        """

        self._backup_dir = backup_dir

    @property
    def synchronous(self):
        """Gets the synchronous of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The synchronous of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: bool
        """
        return self._synchronous

    @synchronous.setter
    def synchronous(self, synchronous):
        """Sets the synchronous of this JobsJobJobSpecJobDataNodesInner.


        :param synchronous: The synchronous of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type synchronous: bool
        """

        self._synchronous = synchronous

    @property
    def protocol(self):
        """Gets the protocol of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The protocol of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this JobsJobJobSpecJobDataNodesInner.


        :param protocol: The protocol of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type protocol: str
        """
        allowed_values = ["elastic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def roles(self):
        """Gets the roles of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501


        :return: The roles of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :rtype: str
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this JobsJobJobSpecJobDataNodesInner.


        :param roles: The roles of this JobsJobJobSpecJobDataNodesInner.  # noqa: E501
        :type roles: str
        """
        allowed_values = ["master", "data", "master-data"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and roles not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `roles` ({0}), must be one of {1}"  # noqa: E501
                .format(roles, allowed_values)
            )

        self._roles = roles

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsJobJobSpecJobDataNodesInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsJobJobSpecJobDataNodesInner):
            return True

        return self.to_dict() != other.to_dict()
