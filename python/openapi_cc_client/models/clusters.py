# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from openapi_cc_client.models.clusters_account import ClustersAccount
from openapi_cc_client.models.clusters_configuration_inner import ClustersConfigurationInner
from openapi_cc_client.models.clusters_database import ClustersDatabase

class Clusters(BaseModel):
    """
    Clusters
    """
    operation: StrictStr = Field(...)
    cluster_id: Optional[StrictInt] = None
    cluster_name: Optional[StrictStr] = None
    with_hosts: Optional[StrictBool] = None
    with_sheet_info: Optional[StrictBool] = None
    configuration: Optional[conlist(ClustersConfigurationInner)] = None
    account: Optional[ClustersAccount] = None
    filter_strings: Optional[StrictStr] = None
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    database: Optional[ClustersDatabase] = None
    nodes: Optional[conlist(StrictStr)] = None
    __properties = ["operation", "cluster_id", "cluster_name", "with_hosts", "with_sheet_info", "configuration", "account", "filter_strings", "limit", "offset", "database", "nodes"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('getallclusterinfo', 'getclusterinfo', 'getConfig', 'setConfig', 'createAccount', 'getAccounts', 'deleteAccount', 'grantPrivileges', 'revokePrivileges', 'revokeAllPrivileges', 'getSqlProcesses', 'getTopQueries', 'createDatabase', 'ping', 'availableUpgrades'):
            raise ValueError("must be one of enum values ('getallclusterinfo', 'getclusterinfo', 'getConfig', 'setConfig', 'createAccount', 'getAccounts', 'deleteAccount', 'grantPrivileges', 'revokePrivileges', 'revokeAllPrivileges', 'getSqlProcesses', 'getTopQueries', 'createDatabase', 'ping', 'availableUpgrades')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Clusters:
        """Create an instance of Clusters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in configuration (list)
        _items = []
        if self.configuration:
            for _item in self.configuration:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configuration'] = _items
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of database
        if self.database:
            _dict['database'] = self.database.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Clusters:
        """Create an instance of Clusters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Clusters.parse_obj(obj)

        _obj = Clusters.parse_obj({
            "operation": obj.get("operation"),
            "cluster_id": obj.get("cluster_id"),
            "cluster_name": obj.get("cluster_name"),
            "with_hosts": obj.get("with_hosts"),
            "with_sheet_info": obj.get("with_sheet_info"),
            "configuration": [ClustersConfigurationInner.from_dict(_item) for _item in obj.get("configuration")] if obj.get("configuration") is not None else None,
            "account": ClustersAccount.from_dict(obj.get("account")) if obj.get("account") is not None else None,
            "filter_strings": obj.get("filter_strings"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "database": ClustersDatabase.from_dict(obj.get("database")) if obj.get("database") is not None else None,
            "nodes": obj.get("nodes")
        })
        return _obj


