# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class JobsJobJobSpecJobDataUploadBackupDataToCloudStorage(BaseModel):
    """
    JobsJobJobSpecJobDataUploadBackupDataToCloudStorage
    """
    backup_retention: Optional[StrictInt] = None
    bucket: Optional[StrictStr] = None
    cloud_storage_credentials_id: Optional[StrictInt] = None
    cloud_storage_provider: Optional[StrictStr] = None
    cloud_storage_service: Optional[StrictStr] = None
    delete_after_upload: Optional[StrictBool] = None
    __properties = ["backup_retention", "bucket", "cloud_storage_credentials_id", "cloud_storage_provider", "cloud_storage_service", "delete_after_upload"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobsJobJobSpecJobDataUploadBackupDataToCloudStorage:
        """Create an instance of JobsJobJobSpecJobDataUploadBackupDataToCloudStorage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobsJobJobSpecJobDataUploadBackupDataToCloudStorage:
        """Create an instance of JobsJobJobSpecJobDataUploadBackupDataToCloudStorage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobsJobJobSpecJobDataUploadBackupDataToCloudStorage.parse_obj(obj)

        _obj = JobsJobJobSpecJobDataUploadBackupDataToCloudStorage.parse_obj({
            "backup_retention": obj.get("backup_retention"),
            "bucket": obj.get("bucket"),
            "cloud_storage_credentials_id": obj.get("cloud_storage_credentials_id"),
            "cloud_storage_provider": obj.get("cloud_storage_provider"),
            "cloud_storage_service": obj.get("cloud_storage_service"),
            "delete_after_upload": obj.get("delete_after_upload")
        })
        return _obj


