# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class Stat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'cluster_id': 'int',
        'name': 'str',
        'start_datetime': 'str',
        'end_datetime': 'str',
        'with_hosts': 'bool',
        'calculate_per_sec': 'bool'
    }

    attribute_map = {
        'operation': 'operation',
        'cluster_id': 'cluster_id',
        'name': 'name',
        'start_datetime': 'start_datetime',
        'end_datetime': 'end_datetime',
        'with_hosts': 'with_hosts',
        'calculate_per_sec': 'calculate_per_sec'
    }

    def __init__(self, operation=None, cluster_id=None, name=None, start_datetime=None, end_datetime=None, with_hosts=None, calculate_per_sec=None, local_vars_configuration=None):  # noqa: E501
        """Stat - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation = None
        self._cluster_id = None
        self._name = None
        self._start_datetime = None
        self._end_datetime = None
        self._with_hosts = None
        self._calculate_per_sec = None
        self.discriminator = None

        self.operation = operation
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if name is not None:
            self.name = name
        if start_datetime is not None:
            self.start_datetime = start_datetime
        if end_datetime is not None:
            self.end_datetime = end_datetime
        if with_hosts is not None:
            self.with_hosts = with_hosts
        if calculate_per_sec is not None:
            self.calculate_per_sec = calculate_per_sec

    @property
    def operation(self):
        """Gets the operation of this Stat.  # noqa: E501


        :return: The operation of this Stat.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Stat.


        :param operation: The operation of this Stat.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["getInfo", "statByName", "getCpuPhysicalInfo", "getDbGrowth"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Stat.  # noqa: E501


        :return: The cluster_id of this Stat.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Stat.


        :param cluster_id: The cluster_id of this Stat.  # noqa: E501
        :type cluster_id: int
        """

        self._cluster_id = cluster_id

    @property
    def name(self):
        """Gets the name of this Stat.  # noqa: E501

        stat name. e.g. cpustat  # noqa: E501

        :return: The name of this Stat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stat.

        stat name. e.g. cpustat  # noqa: E501

        :param name: The name of this Stat.  # noqa: E501
        :type name: str
        """
        allowed_values = ["cpustat"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def start_datetime(self):
        """Gets the start_datetime of this Stat.  # noqa: E501

        e.g. \"15:20\"  # noqa: E501

        :return: The start_datetime of this Stat.  # noqa: E501
        :rtype: str
        """
        return self._start_datetime

    @start_datetime.setter
    def start_datetime(self, start_datetime):
        """Sets the start_datetime of this Stat.

        e.g. \"15:20\"  # noqa: E501

        :param start_datetime: The start_datetime of this Stat.  # noqa: E501
        :type start_datetime: str
        """

        self._start_datetime = start_datetime

    @property
    def end_datetime(self):
        """Gets the end_datetime of this Stat.  # noqa: E501

        e.g. \"15:21\"  # noqa: E501

        :return: The end_datetime of this Stat.  # noqa: E501
        :rtype: str
        """
        return self._end_datetime

    @end_datetime.setter
    def end_datetime(self, end_datetime):
        """Sets the end_datetime of this Stat.

        e.g. \"15:21\"  # noqa: E501

        :param end_datetime: The end_datetime of this Stat.  # noqa: E501
        :type end_datetime: str
        """

        self._end_datetime = end_datetime

    @property
    def with_hosts(self):
        """Gets the with_hosts of this Stat.  # noqa: E501


        :return: The with_hosts of this Stat.  # noqa: E501
        :rtype: bool
        """
        return self._with_hosts

    @with_hosts.setter
    def with_hosts(self, with_hosts):
        """Sets the with_hosts of this Stat.


        :param with_hosts: The with_hosts of this Stat.  # noqa: E501
        :type with_hosts: bool
        """

        self._with_hosts = with_hosts

    @property
    def calculate_per_sec(self):
        """Gets the calculate_per_sec of this Stat.  # noqa: E501


        :return: The calculate_per_sec of this Stat.  # noqa: E501
        :rtype: bool
        """
        return self._calculate_per_sec

    @calculate_per_sec.setter
    def calculate_per_sec(self, calculate_per_sec):
        """Sets the calculate_per_sec of this Stat.


        :param calculate_per_sec: The calculate_per_sec of this Stat.  # noqa: E501
        :type calculate_per_sec: bool
        """

        self._calculate_per_sec = calculate_per_sec

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Stat):
            return True

        return self.to_dict() != other.to_dict()
