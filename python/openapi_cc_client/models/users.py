# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class Users(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'create_group': 'bool',
        'new_password': 'str',
        'old_password': 'str',
        'group_name': 'str',
        'replace_primary_group': 'bool',
        'with_tags': 'list[str]',
        'user': 'UsersUser',
        'group': 'UsersGroup'
    }

    attribute_map = {
        'operation': 'operation',
        'create_group': 'create_group',
        'new_password': 'new_password',
        'old_password': 'old_password',
        'group_name': 'group_name',
        'replace_primary_group': 'replace_primary_group',
        'with_tags': 'with_tags',
        'user': 'user',
        'group': 'group'
    }

    def __init__(self, operation=None, create_group=None, new_password=None, old_password=None, group_name=None, replace_primary_group=None, with_tags=None, user=None, group=None, local_vars_configuration=None):  # noqa: E501
        """Users - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation = None
        self._create_group = None
        self._new_password = None
        self._old_password = None
        self._group_name = None
        self._replace_primary_group = None
        self._with_tags = None
        self._user = None
        self._group = None
        self.discriminator = None

        self.operation = operation
        if create_group is not None:
            self.create_group = create_group
        if new_password is not None:
            self.new_password = new_password
        if old_password is not None:
            self.old_password = old_password
        if group_name is not None:
            self.group_name = group_name
        if replace_primary_group is not None:
            self.replace_primary_group = replace_primary_group
        if with_tags is not None:
            self.with_tags = with_tags
        if user is not None:
            self.user = user
        if group is not None:
            self.group = group

    @property
    def operation(self):
        """Gets the operation of this Users.  # noqa: E501


        :return: The operation of this Users.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Users.


        :param operation: The operation of this Users.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["createUser", "getUsers", "setUser", "disable", "deleteUser", "enable", "changePassword", "getKeys", "addKey", "deleteKey", "createGroup", "deleteGroup", "getGroups", "addToGroup", "removeFromGroup", "canCreateUser", "canCreateGroup"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def create_group(self):
        """Gets the create_group of this Users.  # noqa: E501


        :return: The create_group of this Users.  # noqa: E501
        :rtype: bool
        """
        return self._create_group

    @create_group.setter
    def create_group(self, create_group):
        """Sets the create_group of this Users.


        :param create_group: The create_group of this Users.  # noqa: E501
        :type create_group: bool
        """

        self._create_group = create_group

    @property
    def new_password(self):
        """Gets the new_password of this Users.  # noqa: E501


        :return: The new_password of this Users.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this Users.


        :param new_password: The new_password of this Users.  # noqa: E501
        :type new_password: str
        """

        self._new_password = new_password

    @property
    def old_password(self):
        """Gets the old_password of this Users.  # noqa: E501


        :return: The old_password of this Users.  # noqa: E501
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this Users.


        :param old_password: The old_password of this Users.  # noqa: E501
        :type old_password: str
        """

        self._old_password = old_password

    @property
    def group_name(self):
        """Gets the group_name of this Users.  # noqa: E501


        :return: The group_name of this Users.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this Users.


        :param group_name: The group_name of this Users.  # noqa: E501
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def replace_primary_group(self):
        """Gets the replace_primary_group of this Users.  # noqa: E501


        :return: The replace_primary_group of this Users.  # noqa: E501
        :rtype: bool
        """
        return self._replace_primary_group

    @replace_primary_group.setter
    def replace_primary_group(self, replace_primary_group):
        """Sets the replace_primary_group of this Users.


        :param replace_primary_group: The replace_primary_group of this Users.  # noqa: E501
        :type replace_primary_group: bool
        """

        self._replace_primary_group = replace_primary_group

    @property
    def with_tags(self):
        """Gets the with_tags of this Users.  # noqa: E501


        :return: The with_tags of this Users.  # noqa: E501
        :rtype: list[str]
        """
        return self._with_tags

    @with_tags.setter
    def with_tags(self, with_tags):
        """Sets the with_tags of this Users.


        :param with_tags: The with_tags of this Users.  # noqa: E501
        :type with_tags: list[str]
        """

        self._with_tags = with_tags

    @property
    def user(self):
        """Gets the user of this Users.  # noqa: E501


        :return: The user of this Users.  # noqa: E501
        :rtype: UsersUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Users.


        :param user: The user of this Users.  # noqa: E501
        :type user: UsersUser
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this Users.  # noqa: E501


        :return: The group of this Users.  # noqa: E501
        :rtype: UsersGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Users.


        :param group: The group of this Users.  # noqa: E501
        :type group: UsersGroup
        """

        self._group = group

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Users):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Users):
            return True

        return self.to_dict() != other.to_dict()
