# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class ConfigLdapConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'ldap_admin_password': 'str',
        'ldap_admin_user': 'str',
        'ldap_group_search_root': 'str',
        'ldap_server_uri': 'str',
        'ldap_user_search_root': 'str',
        'group_mappings': 'list[ConfigLdapConfigurationGroupMappingsInner]',
        'ldap_settings': 'ConfigLdapConfigurationLdapSettings',
        'security': 'ConfigLdapConfigurationSecurity'
    }

    attribute_map = {
        'enabled': 'enabled',
        'ldap_admin_password': 'ldapAdminPassword',
        'ldap_admin_user': 'ldapAdminUser',
        'ldap_group_search_root': 'ldapGroupSearchRoot',
        'ldap_server_uri': 'ldapServerUri',
        'ldap_user_search_root': 'ldapUserSearchRoot',
        'group_mappings': 'groupMappings',
        'ldap_settings': 'ldapSettings',
        'security': 'security'
    }

    def __init__(self, enabled=None, ldap_admin_password=None, ldap_admin_user=None, ldap_group_search_root=None, ldap_server_uri=None, ldap_user_search_root=None, group_mappings=None, ldap_settings=None, security=None, local_vars_configuration=None):  # noqa: E501
        """ConfigLdapConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._ldap_admin_password = None
        self._ldap_admin_user = None
        self._ldap_group_search_root = None
        self._ldap_server_uri = None
        self._ldap_user_search_root = None
        self._group_mappings = None
        self._ldap_settings = None
        self._security = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if ldap_admin_password is not None:
            self.ldap_admin_password = ldap_admin_password
        if ldap_admin_user is not None:
            self.ldap_admin_user = ldap_admin_user
        if ldap_group_search_root is not None:
            self.ldap_group_search_root = ldap_group_search_root
        if ldap_server_uri is not None:
            self.ldap_server_uri = ldap_server_uri
        if ldap_user_search_root is not None:
            self.ldap_user_search_root = ldap_user_search_root
        if group_mappings is not None:
            self.group_mappings = group_mappings
        if ldap_settings is not None:
            self.ldap_settings = ldap_settings
        if security is not None:
            self.security = security

    @property
    def enabled(self):
        """Gets the enabled of this ConfigLdapConfiguration.  # noqa: E501


        :return: The enabled of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConfigLdapConfiguration.


        :param enabled: The enabled of this ConfigLdapConfiguration.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def ldap_admin_password(self):
        """Gets the ldap_admin_password of this ConfigLdapConfiguration.  # noqa: E501


        :return: The ldap_admin_password of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ldap_admin_password

    @ldap_admin_password.setter
    def ldap_admin_password(self, ldap_admin_password):
        """Sets the ldap_admin_password of this ConfigLdapConfiguration.


        :param ldap_admin_password: The ldap_admin_password of this ConfigLdapConfiguration.  # noqa: E501
        :type ldap_admin_password: str
        """

        self._ldap_admin_password = ldap_admin_password

    @property
    def ldap_admin_user(self):
        """Gets the ldap_admin_user of this ConfigLdapConfiguration.  # noqa: E501


        :return: The ldap_admin_user of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ldap_admin_user

    @ldap_admin_user.setter
    def ldap_admin_user(self, ldap_admin_user):
        """Sets the ldap_admin_user of this ConfigLdapConfiguration.


        :param ldap_admin_user: The ldap_admin_user of this ConfigLdapConfiguration.  # noqa: E501
        :type ldap_admin_user: str
        """

        self._ldap_admin_user = ldap_admin_user

    @property
    def ldap_group_search_root(self):
        """Gets the ldap_group_search_root of this ConfigLdapConfiguration.  # noqa: E501


        :return: The ldap_group_search_root of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_search_root

    @ldap_group_search_root.setter
    def ldap_group_search_root(self, ldap_group_search_root):
        """Sets the ldap_group_search_root of this ConfigLdapConfiguration.


        :param ldap_group_search_root: The ldap_group_search_root of this ConfigLdapConfiguration.  # noqa: E501
        :type ldap_group_search_root: str
        """

        self._ldap_group_search_root = ldap_group_search_root

    @property
    def ldap_server_uri(self):
        """Gets the ldap_server_uri of this ConfigLdapConfiguration.  # noqa: E501


        :return: The ldap_server_uri of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ldap_server_uri

    @ldap_server_uri.setter
    def ldap_server_uri(self, ldap_server_uri):
        """Sets the ldap_server_uri of this ConfigLdapConfiguration.


        :param ldap_server_uri: The ldap_server_uri of this ConfigLdapConfiguration.  # noqa: E501
        :type ldap_server_uri: str
        """

        self._ldap_server_uri = ldap_server_uri

    @property
    def ldap_user_search_root(self):
        """Gets the ldap_user_search_root of this ConfigLdapConfiguration.  # noqa: E501


        :return: The ldap_user_search_root of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ldap_user_search_root

    @ldap_user_search_root.setter
    def ldap_user_search_root(self, ldap_user_search_root):
        """Sets the ldap_user_search_root of this ConfigLdapConfiguration.


        :param ldap_user_search_root: The ldap_user_search_root of this ConfigLdapConfiguration.  # noqa: E501
        :type ldap_user_search_root: str
        """

        self._ldap_user_search_root = ldap_user_search_root

    @property
    def group_mappings(self):
        """Gets the group_mappings of this ConfigLdapConfiguration.  # noqa: E501


        :return: The group_mappings of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: list[ConfigLdapConfigurationGroupMappingsInner]
        """
        return self._group_mappings

    @group_mappings.setter
    def group_mappings(self, group_mappings):
        """Sets the group_mappings of this ConfigLdapConfiguration.


        :param group_mappings: The group_mappings of this ConfigLdapConfiguration.  # noqa: E501
        :type group_mappings: list[ConfigLdapConfigurationGroupMappingsInner]
        """

        self._group_mappings = group_mappings

    @property
    def ldap_settings(self):
        """Gets the ldap_settings of this ConfigLdapConfiguration.  # noqa: E501


        :return: The ldap_settings of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: ConfigLdapConfigurationLdapSettings
        """
        return self._ldap_settings

    @ldap_settings.setter
    def ldap_settings(self, ldap_settings):
        """Sets the ldap_settings of this ConfigLdapConfiguration.


        :param ldap_settings: The ldap_settings of this ConfigLdapConfiguration.  # noqa: E501
        :type ldap_settings: ConfigLdapConfigurationLdapSettings
        """

        self._ldap_settings = ldap_settings

    @property
    def security(self):
        """Gets the security of this ConfigLdapConfiguration.  # noqa: E501


        :return: The security of this ConfigLdapConfiguration.  # noqa: E501
        :rtype: ConfigLdapConfigurationSecurity
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this ConfigLdapConfiguration.


        :param security: The security of this ConfigLdapConfiguration.  # noqa: E501
        :type security: ConfigLdapConfigurationSecurity
        """

        self._security = security

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLdapConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigLdapConfiguration):
            return True

        return self.to_dict() != other.to_dict()
