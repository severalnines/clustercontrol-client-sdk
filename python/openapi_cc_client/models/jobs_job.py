# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class JobsJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'job_spec': 'JobsJobJobSpec',
        'recurrence': 'str',
        'tags': 'list[str]',
        'title': 'str',
        'status': 'str'
    }

    attribute_map = {
        'class_name': 'class_name',
        'job_spec': 'job_spec',
        'recurrence': 'recurrence',
        'tags': 'tags',
        'title': 'title',
        'status': 'status'
    }

    def __init__(self, class_name=None, job_spec=None, recurrence=None, tags=None, title=None, status=None, local_vars_configuration=None):  # noqa: E501
        """JobsJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._job_spec = None
        self._recurrence = None
        self._tags = None
        self._title = None
        self._status = None
        self.discriminator = None

        if class_name is not None:
            self.class_name = class_name
        if job_spec is not None:
            self.job_spec = job_spec
        if recurrence is not None:
            self.recurrence = recurrence
        if tags is not None:
            self.tags = tags
        if title is not None:
            self.title = title
        if status is not None:
            self.status = status

    @property
    def class_name(self):
        """Gets the class_name of this JobsJob.  # noqa: E501


        :return: The class_name of this JobsJob.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this JobsJob.


        :param class_name: The class_name of this JobsJob.  # noqa: E501
        :type class_name: str
        """

        self._class_name = class_name

    @property
    def job_spec(self):
        """Gets the job_spec of this JobsJob.  # noqa: E501


        :return: The job_spec of this JobsJob.  # noqa: E501
        :rtype: JobsJobJobSpec
        """
        return self._job_spec

    @job_spec.setter
    def job_spec(self, job_spec):
        """Sets the job_spec of this JobsJob.


        :param job_spec: The job_spec of this JobsJob.  # noqa: E501
        :type job_spec: JobsJobJobSpec
        """

        self._job_spec = job_spec

    @property
    def recurrence(self):
        """Gets the recurrence of this JobsJob.  # noqa: E501

        e.g. \"2 * * * *\"  # noqa: E501

        :return: The recurrence of this JobsJob.  # noqa: E501
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this JobsJob.

        e.g. \"2 * * * *\"  # noqa: E501

        :param recurrence: The recurrence of this JobsJob.  # noqa: E501
        :type recurrence: str
        """

        self._recurrence = recurrence

    @property
    def tags(self):
        """Gets the tags of this JobsJob.  # noqa: E501


        :return: The tags of this JobsJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JobsJob.


        :param tags: The tags of this JobsJob.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this JobsJob.  # noqa: E501


        :return: The title of this JobsJob.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this JobsJob.


        :param title: The title of this JobsJob.  # noqa: E501
        :type title: str
        """
        allowed_values = ["Rolling Restart", "Simulated Success"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and title not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `title` ({0}), must be one of {1}"  # noqa: E501
                .format(title, allowed_values)
            )

        self._title = title

    @property
    def status(self):
        """Gets the status of this JobsJob.  # noqa: E501


        :return: The status of this JobsJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobsJob.


        :param status: The status of this JobsJob.  # noqa: E501
        :type status: str
        """
        allowed_values = ["PAUSED", "SCHEDULED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsJob):
            return True

        return self.to_dict() != other.to_dict()
