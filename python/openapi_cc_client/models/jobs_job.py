# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_cc_client.models.jobs_job_job_spec import JobsJobJobSpec

class JobsJob(BaseModel):
    """
    JobsJob
    """
    class_name: Optional[StrictStr] = None
    job_spec: Optional[JobsJobJobSpec] = None
    recurrence: Optional[StrictStr] = Field(None, description="e.g. \"2 * * * *\"")
    tags: Optional[conlist(StrictStr)] = None
    title: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties = ["class_name", "job_spec", "recurrence", "tags", "title", "status"]

    @validator('title')
    def title_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Rolling Restart', 'Simulated Success'):
            raise ValueError("must be one of enum values ('Rolling Restart', 'Simulated Success')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PAUSED', 'SCHEDULED'):
            raise ValueError("must be one of enum values ('PAUSED', 'SCHEDULED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobsJob:
        """Create an instance of JobsJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of job_spec
        if self.job_spec:
            _dict['job_spec'] = self.job_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobsJob:
        """Create an instance of JobsJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobsJob.parse_obj(obj)

        _obj = JobsJob.parse_obj({
            "class_name": obj.get("class_name"),
            "job_spec": JobsJobJobSpec.from_dict(obj.get("job_spec")) if obj.get("job_spec") is not None else None,
            "recurrence": obj.get("recurrence"),
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "status": obj.get("status")
        })
        return _obj


