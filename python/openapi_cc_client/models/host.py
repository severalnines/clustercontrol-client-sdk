# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from openapi_cc_client.models.host_host import HostHost
from openapi_cc_client.models.host_servers_inner import HostServersInner

class Host(BaseModel):
    """
    Host
    """
    operation: StrictStr = Field(...)
    servers: Optional[conlist(HostServersInner)] = None
    cluster_id: Optional[StrictInt] = None
    dry_run: Optional[StrictBool] = None
    host: Optional[HostHost] = None
    __properties = ["operation", "servers", "cluster_id", "dry_run", "host"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('startServers', 'shutdownServers', 'registerServers', 'unregisterServers', 'unregisterHost'):
            raise ValueError("must be one of enum values ('startServers', 'shutdownServers', 'registerServers', 'unregisterServers', 'unregisterHost')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Host:
        """Create an instance of Host from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in servers (list)
        _items = []
        if self.servers:
            for _item in self.servers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['servers'] = _items
        # override the default output from pydantic by calling `to_dict()` of host
        if self.host:
            _dict['host'] = self.host.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Host:
        """Create an instance of Host from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Host.parse_obj(obj)

        _obj = Host.parse_obj({
            "operation": obj.get("operation"),
            "servers": [HostServersInner.from_dict(_item) for _item in obj.get("servers")] if obj.get("servers") is not None else None,
            "cluster_id": obj.get("cluster_id"),
            "dry_run": obj.get("dry_run"),
            "host": HostHost.from_dict(obj.get("host")) if obj.get("host") is not None else None
        })
        return _obj


