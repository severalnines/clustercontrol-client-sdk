# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class Host(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'servers': 'list[HostServersInner]',
        'cluster_id': 'int',
        'dry_run': 'bool',
        'host': 'HostHost'
    }

    attribute_map = {
        'operation': 'operation',
        'servers': 'servers',
        'cluster_id': 'cluster_id',
        'dry_run': 'dry_run',
        'host': 'host'
    }

    def __init__(self, operation=None, servers=None, cluster_id=None, dry_run=None, host=None, local_vars_configuration=None):  # noqa: E501
        """Host - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation = None
        self._servers = None
        self._cluster_id = None
        self._dry_run = None
        self._host = None
        self.discriminator = None

        self.operation = operation
        if servers is not None:
            self.servers = servers
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if dry_run is not None:
            self.dry_run = dry_run
        if host is not None:
            self.host = host

    @property
    def operation(self):
        """Gets the operation of this Host.  # noqa: E501


        :return: The operation of this Host.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Host.


        :param operation: The operation of this Host.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["startServers", "shutdownServers", "registerServers", "unregisterServers", "unregisterHost"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def servers(self):
        """Gets the servers of this Host.  # noqa: E501


        :return: The servers of this Host.  # noqa: E501
        :rtype: list[HostServersInner]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this Host.


        :param servers: The servers of this Host.  # noqa: E501
        :type servers: list[HostServersInner]
        """

        self._servers = servers

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Host.  # noqa: E501


        :return: The cluster_id of this Host.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Host.


        :param cluster_id: The cluster_id of this Host.  # noqa: E501
        :type cluster_id: int
        """

        self._cluster_id = cluster_id

    @property
    def dry_run(self):
        """Gets the dry_run of this Host.  # noqa: E501


        :return: The dry_run of this Host.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this Host.


        :param dry_run: The dry_run of this Host.  # noqa: E501
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def host(self):
        """Gets the host of this Host.  # noqa: E501


        :return: The host of this Host.  # noqa: E501
        :rtype: HostHost
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Host.


        :param host: The host of this Host.  # noqa: E501
        :type host: HostHost
        """

        self._host = host

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Host):
            return True

        return self.to_dict() != other.to_dict()
