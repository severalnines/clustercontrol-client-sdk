# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class Alarm(BaseModel):
    """
    Alarm
    """
    operation: StrictStr = Field(...)
    cluster_id: Optional[StrictInt] = None
    alarm_id: Optional[StrictInt] = None
    class_name: Optional[StrictStr] = None
    ignore: Optional[StrictBool] = None
    __properties = ["operation", "cluster_id", "alarm_id", "class_name", "ignore"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('getStatistics', 'getAlarm', 'getAlarms', 'ignoreAlarm'):
            raise ValueError("must be one of enum values ('getStatistics', 'getAlarm', 'getAlarms', 'ignoreAlarm')")
        return value

    @validator('class_name')
    def class_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CmonRpcRequest'):
            raise ValueError("must be one of enum values ('CmonRpcRequest')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Alarm:
        """Create an instance of Alarm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Alarm:
        """Create an instance of Alarm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Alarm.parse_obj(obj)

        _obj = Alarm.parse_obj({
            "operation": obj.get("operation"),
            "cluster_id": obj.get("cluster_id"),
            "alarm_id": obj.get("alarm_id"),
            "class_name": obj.get("class_name"),
            "ignore": obj.get("ignore")
        })
        return _obj


