# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class JobsJobJobSpecJobDataConfigServersMembersInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hostname': 'str',
        'hostname_data': 'str',
        'hostname_internal': 'str',
        'port': 'str'
    }

    attribute_map = {
        'hostname': 'hostname',
        'hostname_data': 'hostname_data',
        'hostname_internal': 'hostname_internal',
        'port': 'port'
    }

    def __init__(self, hostname=None, hostname_data=None, hostname_internal=None, port=None, local_vars_configuration=None):  # noqa: E501
        """JobsJobJobSpecJobDataConfigServersMembersInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._hostname = None
        self._hostname_data = None
        self._hostname_internal = None
        self._port = None
        self.discriminator = None

        if hostname is not None:
            self.hostname = hostname
        if hostname_data is not None:
            self.hostname_data = hostname_data
        if hostname_internal is not None:
            self.hostname_internal = hostname_internal
        if port is not None:
            self.port = port

    @property
    def hostname(self):
        """Gets the hostname of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501


        :return: The hostname of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this JobsJobJobSpecJobDataConfigServersMembersInner.


        :param hostname: The hostname of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def hostname_data(self):
        """Gets the hostname_data of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501


        :return: The hostname_data of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :rtype: str
        """
        return self._hostname_data

    @hostname_data.setter
    def hostname_data(self, hostname_data):
        """Sets the hostname_data of this JobsJobJobSpecJobDataConfigServersMembersInner.


        :param hostname_data: The hostname_data of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :type hostname_data: str
        """

        self._hostname_data = hostname_data

    @property
    def hostname_internal(self):
        """Gets the hostname_internal of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501


        :return: The hostname_internal of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :rtype: str
        """
        return self._hostname_internal

    @hostname_internal.setter
    def hostname_internal(self, hostname_internal):
        """Sets the hostname_internal of this JobsJobJobSpecJobDataConfigServersMembersInner.


        :param hostname_internal: The hostname_internal of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :type hostname_internal: str
        """

        self._hostname_internal = hostname_internal

    @property
    def port(self):
        """Gets the port of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501


        :return: The port of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this JobsJobJobSpecJobDataConfigServersMembersInner.


        :param port: The port of this JobsJobJobSpecJobDataConfigServersMembersInner.  # noqa: E501
        :type port: str
        """

        self._port = port

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsJobJobSpecJobDataConfigServersMembersInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsJobJobSpecJobDataConfigServersMembersInner):
            return True

        return self.to_dict() != other.to_dict()
