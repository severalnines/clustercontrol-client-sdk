# coding: utf-8

"""
    Severalnines ClusterControl REST API (V2)

    REST API (V2) specification for ClusterControl - AI Powered Database automation tool for multi/hybrid cloud database deployment.  # noqa: E501

    The version of the OpenAPI document: OpenAPI specification v1.0.0
    Contact: sales@severalnines.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_cc_client.configuration import Configuration


class UsersUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'user_name': 'str',
        'user_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'email_address': 'str',
        'new_password': 'str',
        'old_password': 'str',
        'groups': 'list[UsersUserGroupsInner]',
        'timezone': 'UsersUserTimezone',
        'public_keys': 'list[UsersUserPublicKeysInner]',
        'public_key': 'list[UsersUserPublicKeysInner]'
    }

    attribute_map = {
        'class_name': 'class_name',
        'user_name': 'user_name',
        'user_id': 'user_id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email_address': 'email_address',
        'new_password': 'new_password',
        'old_password': 'old_password',
        'groups': 'groups',
        'timezone': 'timezone',
        'public_keys': 'public_keys',
        'public_key': 'public_key'
    }

    def __init__(self, class_name=None, user_name=None, user_id=None, first_name=None, last_name=None, email_address=None, new_password=None, old_password=None, groups=None, timezone=None, public_keys=None, public_key=None, local_vars_configuration=None):  # noqa: E501
        """UsersUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._user_name = None
        self._user_id = None
        self._first_name = None
        self._last_name = None
        self._email_address = None
        self._new_password = None
        self._old_password = None
        self._groups = None
        self._timezone = None
        self._public_keys = None
        self._public_key = None
        self.discriminator = None

        if class_name is not None:
            self.class_name = class_name
        if user_name is not None:
            self.user_name = user_name
        if user_id is not None:
            self.user_id = user_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email_address is not None:
            self.email_address = email_address
        if new_password is not None:
            self.new_password = new_password
        if old_password is not None:
            self.old_password = old_password
        if groups is not None:
            self.groups = groups
        if timezone is not None:
            self.timezone = timezone
        if public_keys is not None:
            self.public_keys = public_keys
        if public_key is not None:
            self.public_key = public_key

    @property
    def class_name(self):
        """Gets the class_name of this UsersUser.  # noqa: E501


        :return: The class_name of this UsersUser.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this UsersUser.


        :param class_name: The class_name of this UsersUser.  # noqa: E501
        :type class_name: str
        """
        allowed_values = ["CmonUser"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and class_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `class_name` ({0}), must be one of {1}"  # noqa: E501
                .format(class_name, allowed_values)
            )

        self._class_name = class_name

    @property
    def user_name(self):
        """Gets the user_name of this UsersUser.  # noqa: E501


        :return: The user_name of this UsersUser.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UsersUser.


        :param user_name: The user_name of this UsersUser.  # noqa: E501
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def user_id(self):
        """Gets the user_id of this UsersUser.  # noqa: E501


        :return: The user_id of this UsersUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UsersUser.


        :param user_id: The user_id of this UsersUser.  # noqa: E501
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this UsersUser.  # noqa: E501


        :return: The first_name of this UsersUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsersUser.


        :param first_name: The first_name of this UsersUser.  # noqa: E501
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UsersUser.  # noqa: E501


        :return: The last_name of this UsersUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsersUser.


        :param last_name: The last_name of this UsersUser.  # noqa: E501
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email_address(self):
        """Gets the email_address of this UsersUser.  # noqa: E501


        :return: The email_address of this UsersUser.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UsersUser.


        :param email_address: The email_address of this UsersUser.  # noqa: E501
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def new_password(self):
        """Gets the new_password of this UsersUser.  # noqa: E501


        :return: The new_password of this UsersUser.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this UsersUser.


        :param new_password: The new_password of this UsersUser.  # noqa: E501
        :type new_password: str
        """

        self._new_password = new_password

    @property
    def old_password(self):
        """Gets the old_password of this UsersUser.  # noqa: E501


        :return: The old_password of this UsersUser.  # noqa: E501
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this UsersUser.


        :param old_password: The old_password of this UsersUser.  # noqa: E501
        :type old_password: str
        """

        self._old_password = old_password

    @property
    def groups(self):
        """Gets the groups of this UsersUser.  # noqa: E501


        :return: The groups of this UsersUser.  # noqa: E501
        :rtype: list[UsersUserGroupsInner]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UsersUser.


        :param groups: The groups of this UsersUser.  # noqa: E501
        :type groups: list[UsersUserGroupsInner]
        """

        self._groups = groups

    @property
    def timezone(self):
        """Gets the timezone of this UsersUser.  # noqa: E501


        :return: The timezone of this UsersUser.  # noqa: E501
        :rtype: UsersUserTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UsersUser.


        :param timezone: The timezone of this UsersUser.  # noqa: E501
        :type timezone: UsersUserTimezone
        """

        self._timezone = timezone

    @property
    def public_keys(self):
        """Gets the public_keys of this UsersUser.  # noqa: E501


        :return: The public_keys of this UsersUser.  # noqa: E501
        :rtype: list[UsersUserPublicKeysInner]
        """
        return self._public_keys

    @public_keys.setter
    def public_keys(self, public_keys):
        """Sets the public_keys of this UsersUser.


        :param public_keys: The public_keys of this UsersUser.  # noqa: E501
        :type public_keys: list[UsersUserPublicKeysInner]
        """

        self._public_keys = public_keys

    @property
    def public_key(self):
        """Gets the public_key of this UsersUser.  # noqa: E501


        :return: The public_key of this UsersUser.  # noqa: E501
        :rtype: list[UsersUserPublicKeysInner]
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this UsersUser.


        :param public_key: The public_key of this UsersUser.  # noqa: E501
        :type public_key: list[UsersUserPublicKeysInner]
        """

        self._public_key = public_key

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsersUser):
            return True

        return self.to_dict() != other.to_dict()
